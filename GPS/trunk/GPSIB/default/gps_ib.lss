
gps_ib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000010d8  0000116c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000932  00800100  00800100  0000116c  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  0000116c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000019c7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000150  00000000  00000000  000019f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001818  00000000  00000000  00001b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006bd  00000000  00000000  0000335e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000088b  00000000  00000000  00003a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000468  00000000  00000000  000042a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000079f  00000000  00000000  00004710  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000010bf  00000000  00000000  00004eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f0  00000000  00000000  00005f6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
       8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
       c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      30:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__vector_12>
      34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      4c:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__vector_19>
      50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      78:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__vector_30>
      7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
      98:	2a e0       	ldi	r18, 0x0A	; 10
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
      a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
      a2:	a2 33       	cpi	r26, 0x32	; 50
      a4:	b2 07       	cpc	r27, r18
      a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
      a8:	0e 94 06 07 	call	0xe0c	; 0xe0c <main>
      ac:	0c 94 6a 08 	jmp	0x10d4	; 0x10d4 <_exit>

000000b0 <__bad_interrupt>:
      b0:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__vector_default>

000000b4 <Sample_ADC_Channel>:
uint8 Get_ADC_Result (uint8 channel);

inline void Enable_ADC()						{ ADCSRA |=  (1<<ADEN); }	
inline void Disbale_ADC()						{ ADCSRA &= ~(1<<ADEN); } 
inline void Start_ADC_Conversion()				{ ADCSRA |=  (1<<ADSC); }
inline void Clear_ADC_MUX()						{ ADMUX  &= ~((1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0)); }
      b4:	97 b1       	in	r25, 0x07	; 7
      b6:	90 7f       	andi	r25, 0xF0	; 240
      b8:	97 b9       	out	0x07, r25	; 7
inline void Select_ADC_channel(uint8 channel)   { Clear_ADC_MUX();  (ADMUX |= (channel)); }
      ba:	97 b1       	in	r25, 0x07	; 7
      bc:	98 2b       	or	r25, r24
      be:	97 b9       	out	0x07, r25	; 7
uint8 Sample_ADC_Channel (uint8 channel);
uint8 Get_ADC_Result (uint8 channel);

inline void Enable_ADC()						{ ADCSRA |=  (1<<ADEN); }	
inline void Disbale_ADC()						{ ADCSRA &= ~(1<<ADEN); } 
inline void Start_ADC_Conversion()				{ ADCSRA |=  (1<<ADSC); }
      c0:	36 9a       	sbi	0x06, 6	; 6
uint8 Sample_ADC_Channel (uint8 channel)
{
	
	Select_ADC_channel(channel); 			// Channel
    Start_ADC_Conversion();   				// start conversion
	while ( !ADC_Conversion_Finished() );   // wait for conversion to end
      c2:	34 9b       	sbis	0x06, 4	; 6
      c4:	fe cf       	rjmp	.-4      	; 0xc2 <Sample_ADC_Channel+0xe>

    return ADCH; 							// read ADC result and change the index
      c6:	85 b1       	in	r24, 0x05	; 5
      c8:	08 95       	ret

000000ca <Get_ADC_Result>:


// This function collects 4 samples for a moving average filter of length 4, returns the average result
// (channel) is the ADC Mux channel, range 0-8.
uint8 Get_ADC_Result (uint8 channel)
{
      ca:	ff 92       	push	r15
      cc:	0f 93       	push	r16
      ce:	1f 93       	push	r17
      d0:	cf 93       	push	r28
      d2:	df 93       	push	r29
	
	uint32  ADC_Temp = 0;

    ADC_samples [channel][ADC_samples_index[channel]++] = Sample_ADC_Channel(channel);		// read ADC result and change the index
      d4:	08 2f       	mov	r16, r24
      d6:	10 e0       	ldi	r17, 0x00	; 0
      d8:	e8 01       	movw	r28, r16
      da:	cd 5f       	subi	r28, 0xFD	; 253
      dc:	de 4f       	sbci	r29, 0xFE	; 254
      de:	f8 80       	ld	r15, Y
      e0:	0e 94 5a 00 	call	0xb4	; 0xb4 <Sample_ADC_Channel>
      e4:	f8 01       	movw	r30, r16
      e6:	ee 0f       	add	r30, r30
      e8:	ff 1f       	adc	r31, r31
      ea:	ee 0f       	add	r30, r30
      ec:	ff 1f       	adc	r31, r31
      ee:	df 01       	movw	r26, r30
      f0:	af 0d       	add	r26, r15
      f2:	b1 1d       	adc	r27, r1
      f4:	a5 5f       	subi	r26, 0xF5	; 245
      f6:	be 4f       	sbci	r27, 0xFE	; 254
      f8:	8c 93       	st	X, r24
      fa:	8f 2d       	mov	r24, r15
      fc:	8f 5f       	subi	r24, 0xFF	; 255
      fe:	88 83       	st	Y, r24
    if(ADC_samples_index[channel] >= 4)	
     100:	84 30       	cpi	r24, 0x04	; 4
     102:	08 f0       	brcs	.+2      	; 0x106 <Get_ADC_Result+0x3c>
		ADC_samples_index[channel] = 0;							// length-4 filter
     104:	18 82       	st	Y, r1
    
	ADC_Temp = (		(uint32)ADC_samples [channel][0] +
                		(uint32)ADC_samples [channel][1] +
     106:	e5 5f       	subi	r30, 0xF5	; 245
     108:	fe 4f       	sbci	r31, 0xFE	; 254
     10a:	21 81       	ldd	r18, Z+1	; 0x01

    ADC_samples [channel][ADC_samples_index[channel]++] = Sample_ADC_Channel(channel);		// read ADC result and change the index
    if(ADC_samples_index[channel] >= 4)	
		ADC_samples_index[channel] = 0;							// length-4 filter
    
	ADC_Temp = (		(uint32)ADC_samples [channel][0] +
     10c:	80 81       	ld	r24, Z
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b0 e0       	ldi	r27, 0x00	; 0
     114:	82 0f       	add	r24, r18
     116:	91 1d       	adc	r25, r1
     118:	a1 1d       	adc	r26, r1
     11a:	b1 1d       	adc	r27, r1
                		(uint32)ADC_samples [channel][1] +
                		(uint32)ADC_samples [channel][2] +
     11c:	22 81       	ldd	r18, Z+2	; 0x02
    ADC_samples [channel][ADC_samples_index[channel]++] = Sample_ADC_Channel(channel);		// read ADC result and change the index
    if(ADC_samples_index[channel] >= 4)	
		ADC_samples_index[channel] = 0;							// length-4 filter
    
	ADC_Temp = (		(uint32)ADC_samples [channel][0] +
                		(uint32)ADC_samples [channel][1] +
     11e:	82 0f       	add	r24, r18
     120:	91 1d       	adc	r25, r1
     122:	a1 1d       	adc	r26, r1
     124:	b1 1d       	adc	r27, r1
                		(uint32)ADC_samples [channel][2] +
                		(uint32)ADC_samples [channel][3] );		// add up last 4
     126:	23 81       	ldd	r18, Z+3	; 0x03

    ADC_samples [channel][ADC_samples_index[channel]++] = Sample_ADC_Channel(channel);		// read ADC result and change the index
    if(ADC_samples_index[channel] >= 4)	
		ADC_samples_index[channel] = 0;							// length-4 filter
    
	ADC_Temp = (		(uint32)ADC_samples [channel][0] +
     128:	82 0f       	add	r24, r18
     12a:	91 1d       	adc	r25, r1
     12c:	a1 1d       	adc	r26, r1
     12e:	b1 1d       	adc	r27, r1
                		(uint32)ADC_samples [channel][1] +
                		(uint32)ADC_samples [channel][2] +
                		(uint32)ADC_samples [channel][3] );		// add up last 4
	return				(uint8)	(ADC_Temp >> 2);    			// divide by 4 and return the result
     130:	22 e0       	ldi	r18, 0x02	; 2
     132:	b6 95       	lsr	r27
     134:	a7 95       	ror	r26
     136:	97 95       	ror	r25
     138:	87 95       	ror	r24
     13a:	2a 95       	dec	r18
     13c:	d1 f7       	brne	.-12     	; 0x132 <Get_ADC_Result+0x68>
	
}
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	1f 91       	pop	r17
     144:	0f 91       	pop	r16
     146:	ff 90       	pop	r15
     148:	08 95       	ret

0000014a <getbit>:
		levels++;
	}

	div /= base;

	while (div >= 1)
     14a:	21 e0       	ldi	r18, 0x01	; 1
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	06 2e       	mov	r0, r22
     150:	02 c0       	rjmp	.+4      	; 0x156 <getbit+0xc>
     152:	22 0f       	add	r18, r18
 * a char array
 */
uint32 int_to_char(uint32 number, uint32 base, uint8 *str, uint32 str_size)
{
	if (str == NULL || str_size == 0)
		return 0;
     154:	33 1f       	adc	r19, r19
     156:	0a 94       	dec	r0
     158:	e2 f7       	brpl	.-8      	; 0x152 <getbit+0x8>

		div /= base;
	}

	return pos;
}
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	28 23       	and	r18, r24
     15e:	39 23       	and	r19, r25
     160:	02 c0       	rjmp	.+4      	; 0x166 <getbit+0x1c>
     162:	35 95       	asr	r19
     164:	27 95       	ror	r18
     166:	6a 95       	dec	r22
     168:	e2 f7       	brpl	.-8      	; 0x162 <getbit+0x18>
     16a:	82 2f       	mov	r24, r18
     16c:	08 95       	ret

0000016e <append_crc16>:
 * append_crc16
 *
 * Adds a byte of data into the crc calculation.
 */
void append_crc16(uint8 character, uint16ptr crc)
{
     16e:	fb 01       	movw	r30, r22
     170:	98 e0       	ldi	r25, 0x08	; 8
	for (j = 0; j < 8; j++)
	{
		//*crc = (*crc >> 1) ^ (((character ^ *crc) & 0x01) ? 0x8408 : 0);
		//character >>= 1;

		if ((character ^ *crc) & 0x01) {
     172:	20 81       	ld	r18, Z
     174:	31 81       	ldd	r19, Z+1	; 0x01
     176:	a9 01       	movw	r20, r18
     178:	48 27       	eor	r20, r24
     17a:	36 95       	lsr	r19
     17c:	27 95       	ror	r18
     17e:	40 ff       	sbrs	r20, 0
     180:	04 c0       	rjmp	.+8      	; 0x18a <append_crc16+0x1c>
                *crc = (*crc >> 1) ^ 0x8408;
     182:	48 e0       	ldi	r20, 0x08	; 8
     184:	24 27       	eor	r18, r20
     186:	44 e8       	ldi	r20, 0x84	; 132
     188:	34 27       	eor	r19, r20
		}
        else {
            *crc = *crc >> 1;
     18a:	31 83       	std	Z+1, r19	; 0x01
     18c:	20 83       	st	Z, r18
		}

        character >>= 1;
     18e:	86 95       	lsr	r24
     190:	91 50       	subi	r25, 0x01	; 1
 * Adds a byte of data into the crc calculation.
 */
void append_crc16(uint8 character, uint16ptr crc)
{
	uint8 j;
	for (j = 0; j < 8; j++)
     192:	79 f7       	brne	.-34     	; 0x172 <append_crc16+0x4>
            *crc = *crc >> 1;
		}

        character >>= 1;
	}
}
     194:	08 95       	ret

00000196 <Create_VCP_frame>:
// uint16ptr	dst_size -	Pointer to the destination size. This will contain the frame size after the function exits.
// uint8		addr -		Source peripheral VCP address 
// uint8ptr		src -		Pointer to the source buffer
// uint16		src_size -	Source size
uint8_t Create_VCP_frame(uint8ptr dst, uint16ptr dst_size, uint8 addr, uint8ptr src, uint16 src_size)
{
     196:	4f 92       	push	r4
     198:	5f 92       	push	r5
     19a:	6f 92       	push	r6
     19c:	7f 92       	push	r7
     19e:	8f 92       	push	r8
     1a0:	9f 92       	push	r9
     1a2:	af 92       	push	r10
     1a4:	bf 92       	push	r11
     1a6:	cf 92       	push	r12
     1a8:	df 92       	push	r13
     1aa:	ef 92       	push	r14
     1ac:	ff 92       	push	r15
     1ae:	0f 93       	push	r16
     1b0:	1f 93       	push	r17
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <Create_VCP_frame+0x22>
     1b8:	1f 92       	push	r1
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	6c 01       	movw	r12, r24
     1c0:	5b 01       	movw	r10, r22
     1c2:	79 01       	movw	r14, r18
	uint16_t crc = CRC16_INIT_VALUE;
     1c4:	1a 82       	std	Y+2, r1	; 0x02
     1c6:	19 82       	std	Y+1, r1	; 0x01
	uint16_t src_index = 0;
	uint16_t dst_index = 0;
	uint16_t payload_size;
	
	// Check for invalid buffers
	if (dst == NULL || src == NULL)
     1c8:	00 97       	sbiw	r24, 0x00	; 0
     1ca:	09 f4       	brne	.+2      	; 0x1ce <Create_VCP_frame+0x38>
     1cc:	5f c0       	rjmp	.+190    	; 0x28c <Create_VCP_frame+0xf6>
     1ce:	21 15       	cp	r18, r1
     1d0:	31 05       	cpc	r19, r1
     1d2:	09 f4       	brne	.+2      	; 0x1d6 <Create_VCP_frame+0x40>
     1d4:	5b c0       	rjmp	.+182    	; 0x28c <Create_VCP_frame+0xf6>
		return VCP_NULL_ERR;
	// Check for invalid VCP address	
	if (addr > VCP_FC && addr != VCP_SUN_SENSOR)
     1d6:	4c 30       	cpi	r20, 0x0C	; 12
     1d8:	18 f0       	brcs	.+6      	; 0x1e0 <Create_VCP_frame+0x4a>
     1da:	48 33       	cpi	r20, 0x38	; 56
     1dc:	09 f0       	breq	.+2      	; 0x1e0 <Create_VCP_frame+0x4a>
     1de:	58 c0       	rjmp	.+176    	; 0x290 <Create_VCP_frame+0xfa>
		return VCP_ADDR_ERR;		
		
	// Calculate CRC:
	append_crc16(addr, (uint16ptr)&crc);
     1e0:	44 24       	eor	r4, r4
     1e2:	43 94       	inc	r4
     1e4:	51 2c       	mov	r5, r1
     1e6:	4c 0e       	add	r4, r28
     1e8:	5d 1e       	adc	r5, r29
     1ea:	b2 01       	movw	r22, r4
     1ec:	84 2f       	mov	r24, r20
     1ee:	4b 83       	std	Y+3, r20	; 0x03
     1f0:	0e 94 b7 00 	call	0x16e	; 0x16e <append_crc16>
// uint8ptr		dst -		Pointer to the destination buffer
// uint16ptr	dst_size -	Pointer to the destination size. This will contain the frame size after the function exits.
// uint8		addr -		Source peripheral VCP address 
// uint8ptr		src -		Pointer to the source buffer
// uint16		src_size -	Source size
uint8_t Create_VCP_frame(uint8ptr dst, uint16ptr dst_size, uint8 addr, uint8ptr src, uint16 src_size)
     1f4:	37 01       	movw	r6, r14
     1f6:	60 0e       	add	r6, r16
     1f8:	71 1e       	adc	r7, r17
	if (addr > VCP_FC && addr != VCP_SUN_SENSOR)
		return VCP_ADDR_ERR;		
		
	// Calculate CRC:
	append_crc16(addr, (uint16ptr)&crc);
	for (src_index = 0; src_index < src_size; src_index++)
     1fa:	47 01       	movw	r8, r14
     1fc:	07 c0       	rjmp	.+14     	; 0x20c <Create_VCP_frame+0x76>
	{
		append_crc16(src[src_index], (uint16ptr)&crc);
     1fe:	b2 01       	movw	r22, r4
     200:	f4 01       	movw	r30, r8
     202:	81 91       	ld	r24, Z+
     204:	4f 01       	movw	r8, r30
     206:	4b 83       	std	Y+3, r20	; 0x03
     208:	0e 94 b7 00 	call	0x16e	; 0x16e <append_crc16>
     20c:	4b 81       	ldd	r20, Y+3	; 0x03
	if (addr > VCP_FC && addr != VCP_SUN_SENSOR)
		return VCP_ADDR_ERR;		
		
	// Calculate CRC:
	append_crc16(addr, (uint16ptr)&crc);
	for (src_index = 0; src_index < src_size; src_index++)
     20e:	86 14       	cp	r8, r6
     210:	97 04       	cpc	r9, r7
     212:	a9 f7       	brne	.-22     	; 0x1fe <Create_VCP_frame+0x68>
	{
		append_crc16(src[src_index], (uint16ptr)&crc);
	}
	
	// Add CRC to the end of the source buffer
	src[src_index++] = ((crc >> 8) & 0xFF);
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	9a 81       	ldd	r25, Y+2	; 0x02
     218:	f7 01       	movw	r30, r14
     21a:	e0 0f       	add	r30, r16
     21c:	f1 1f       	adc	r31, r17
     21e:	90 83       	st	Z, r25
	src[src_index++] = (crc & 0xFF);
     220:	81 83       	std	Z+1, r24	; 0x01
     222:	0e 5f       	subi	r16, 0xFE	; 254
     224:	1f 4f       	sbci	r17, 0xFF	; 255
	
	
	// Build KISS Frame:
	
	// Start the frame with FEND
	dst[dst_index++] =					FEND;
     226:	80 ec       	ldi	r24, 0xC0	; 192
     228:	f6 01       	movw	r30, r12
     22a:	80 83       	st	Z, r24
	// then insert VCP address
	dst[dst_index++] =					addr;
     22c:	41 83       	std	Z+1, r20	; 0x01
	
	// Copy src to dst and Escape when necessary
	for (src_index = 0; src_index < payload_size; src_index++ )
     22e:	d7 01       	movw	r26, r14
	// Build KISS Frame:
	
	// Start the frame with FEND
	dst[dst_index++] =					FEND;
	// then insert VCP address
	dst[dst_index++] =					addr;
     230:	42 e0       	ldi	r20, 0x02	; 2
     232:	50 e0       	ldi	r21, 0x00	; 0
			dst[dst_index++] =			TFEND;
		}
		else if (src[src_index] == FESC)
		{
			dst[dst_index++] =			FESC;
			dst[dst_index++] =			TFESC;
     234:	2d ed       	ldi	r18, 0xDD	; 221
	// Copy src to dst and Escape when necessary
	for (src_index = 0; src_index < payload_size; src_index++ )
	{
		if (src[src_index] == FEND)
		{
			dst[dst_index++] =			FESC;
     236:	3b ed       	ldi	r19, 0xDB	; 219
			dst[dst_index++] =			TFEND;
     238:	6c ed       	ldi	r22, 0xDC	; 220
	dst[dst_index++] =					FEND;
	// then insert VCP address
	dst[dst_index++] =					addr;
	
	// Copy src to dst and Escape when necessary
	for (src_index = 0; src_index < payload_size; src_index++ )
     23a:	16 c0       	rjmp	.+44     	; 0x268 <Create_VCP_frame+0xd2>
	{
		if (src[src_index] == FEND)
     23c:	8d 91       	ld	r24, X+
     23e:	80 3c       	cpi	r24, 0xC0	; 192
     240:	19 f4       	brne	.+6      	; 0x248 <Create_VCP_frame+0xb2>
		{
			dst[dst_index++] =			FESC;
     242:	30 83       	st	Z, r19
			dst[dst_index++] =			TFEND;
     244:	61 83       	std	Z+1, r22	; 0x01
     246:	04 c0       	rjmp	.+8      	; 0x250 <Create_VCP_frame+0xba>
		}
		else if (src[src_index] == FESC)
		{
			dst[dst_index++] =			FESC;
     248:	80 83       	st	Z, r24
		if (src[src_index] == FEND)
		{
			dst[dst_index++] =			FESC;
			dst[dst_index++] =			TFEND;
		}
		else if (src[src_index] == FESC)
     24a:	8b 3d       	cpi	r24, 0xDB	; 219
     24c:	21 f4       	brne	.+8      	; 0x256 <Create_VCP_frame+0xc0>
		{
			dst[dst_index++] =			FESC;
			dst[dst_index++] =			TFESC;
     24e:	21 83       	std	Z+1, r18	; 0x01
     250:	4e 5f       	subi	r20, 0xFE	; 254
     252:	5f 4f       	sbci	r21, 0xFF	; 255
     254:	02 c0       	rjmp	.+4      	; 0x25a <Create_VCP_frame+0xc4>
		}
		else
		{
			dst[dst_index++] =			src[src_index];
     256:	4f 5f       	subi	r20, 0xFF	; 255
     258:	5f 4f       	sbci	r21, 0xFF	; 255
		}
		
		// Check if the frame fits in the dst buffer 
		if (dst_index >= *dst_size - 1)
     25a:	f5 01       	movw	r30, r10
     25c:	80 81       	ld	r24, Z
     25e:	91 81       	ldd	r25, Z+1	; 0x01
     260:	01 97       	sbiw	r24, 0x01	; 1
     262:	48 17       	cp	r20, r24
     264:	59 07       	cpc	r21, r25
     266:	b0 f4       	brcc	.+44     	; 0x294 <Create_VCP_frame+0xfe>
	dst[dst_index++] =					FEND;
	// then insert VCP address
	dst[dst_index++] =					addr;
	
	// Copy src to dst and Escape when necessary
	for (src_index = 0; src_index < payload_size; src_index++ )
     268:	cd 01       	movw	r24, r26
     26a:	8e 19       	sub	r24, r14
     26c:	9f 09       	sbc	r25, r15
     26e:	f6 01       	movw	r30, r12
     270:	e4 0f       	add	r30, r20
     272:	f5 1f       	adc	r31, r21
     274:	80 17       	cp	r24, r16
     276:	91 07       	cpc	r25, r17
     278:	08 f3       	brcs	.-62     	; 0x23c <Create_VCP_frame+0xa6>
		if (dst_index >= *dst_size - 1)
			return VCP_OVR_ERR;
	}
	
	// End the frame with FEND
	dst[dst_index++] =					FEND;
     27a:	80 ec       	ldi	r24, 0xC0	; 192
     27c:	80 83       	st	Z, r24
     27e:	4f 5f       	subi	r20, 0xFF	; 255
     280:	5f 4f       	sbci	r21, 0xFF	; 255
	
	// Save the frame size
	*dst_size = dst_index;
     282:	f5 01       	movw	r30, r10
     284:	51 83       	std	Z+1, r21	; 0x01
     286:	40 83       	st	Z, r20
	
	// All good
	return VCP_TERM;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	05 c0       	rjmp	.+10     	; 0x296 <Create_VCP_frame+0x100>
	uint16_t dst_index = 0;
	uint16_t payload_size;
	
	// Check for invalid buffers
	if (dst == NULL || src == NULL)
		return VCP_NULL_ERR;
     28c:	85 e0       	ldi	r24, 0x05	; 5
     28e:	03 c0       	rjmp	.+6      	; 0x296 <Create_VCP_frame+0x100>
	// Check for invalid VCP address	
	if (addr > VCP_FC && addr != VCP_SUN_SENSOR)
		return VCP_ADDR_ERR;		
     290:	86 e0       	ldi	r24, 0x06	; 6
     292:	01 c0       	rjmp	.+2      	; 0x296 <Create_VCP_frame+0x100>
			dst[dst_index++] =			src[src_index];
		}
		
		// Check if the frame fits in the dst buffer 
		if (dst_index >= *dst_size - 1)
			return VCP_OVR_ERR;
     294:	83 e0       	ldi	r24, 0x03	; 3
	*dst_size = dst_index;
	
	// All good
	return VCP_TERM;

}
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	1f 91       	pop	r17
     2a2:	0f 91       	pop	r16
     2a4:	ff 90       	pop	r15
     2a6:	ef 90       	pop	r14
     2a8:	df 90       	pop	r13
     2aa:	cf 90       	pop	r12
     2ac:	bf 90       	pop	r11
     2ae:	af 90       	pop	r10
     2b0:	9f 90       	pop	r9
     2b2:	8f 90       	pop	r8
     2b4:	7f 90       	pop	r7
     2b6:	6f 90       	pop	r6
     2b8:	5f 90       	pop	r5
     2ba:	4f 90       	pop	r4
     2bc:	08 95       	ret

000002be <get_ubrr>:
#include "uart.h"

uint32 get_ubrr(uint32 baud)
{
     2be:	9b 01       	movw	r18, r22
     2c0:	ac 01       	movw	r20, r24
	#if defined(ASYNCHRONOUS_NORMAL)
		return ASYNCHRONOUS_NORMAL/baud - 1;
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	70 e1       	ldi	r23, 0x10	; 16
     2c6:	8e e0       	ldi	r24, 0x0E	; 14
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 48 08 	call	0x1090	; 0x1090 <__udivmodsi4>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	31 09       	sbc	r19, r1
     2d2:	41 09       	sbc	r20, r1
     2d4:	51 09       	sbc	r21, r1
	#elif defined(SYNCHRONOUS_MASTER)
		return SYNCHRONOUS_MASTER/baud - 1;
	#else // default to asynchronous normal
		return ASYNCHRONOUS_NORMAL/baud - 1;
	#endif
}
     2d6:	b9 01       	movw	r22, r18
     2d8:	ca 01       	movw	r24, r20
     2da:	08 95       	ret

000002dc <usart0_initialize>:

void usart0_initialize(uint32 ubrr)
{
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
	// set the baud rate
	UBRR0H = (uint8)(ubrr>>8);
     2e0:	07 2f       	mov	r16, r23
     2e2:	18 2f       	mov	r17, r24
     2e4:	29 2f       	mov	r18, r25
     2e6:	33 27       	eor	r19, r19
     2e8:	00 93 90 00 	sts	0x0090, r16
	UBRR0L = (uint8)ubrr;
     2ec:	69 b9       	out	0x09, r22	; 9
	
	// enable the transmitter
	UCSR0B = (1<<TXEN0);
     2ee:	88 e0       	ldi	r24, 0x08	; 8
     2f0:	8a b9       	out	0x0a, r24	; 10
	// enable the receiver
	//UCSR0B = (1<<RXEN0);

	// set the frame format: 8 bit data, 1 stop bits
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
     2f2:	86 e0       	ldi	r24, 0x06	; 6
     2f4:	80 93 95 00 	sts	0x0095, r24
}
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	08 95       	ret

000002fe <usart1_initialize>:

void usart1_initialize(uint32 ubrr)
{
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
	// set the baud rate
	UBRR1H = (uint8)(ubrr>>8);
     302:	07 2f       	mov	r16, r23
     304:	18 2f       	mov	r17, r24
     306:	29 2f       	mov	r18, r25
     308:	33 27       	eor	r19, r19
     30a:	00 93 98 00 	sts	0x0098, r16
	UBRR1L = (uint8)ubrr;
     30e:	60 93 99 00 	sts	0x0099, r22
	
	// enable the transmitter
	//UCSR1B = (1<<TXEN1);
	// enable the receiver
	UCSR1B = (1<<RXEN1);
     312:	80 e1       	ldi	r24, 0x10	; 16
     314:	80 93 9a 00 	sts	0x009A, r24
 
	// set the frame format: 8 bit data, 1 stop bits
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10); 
     318:	86 e0       	ldi	r24, 0x06	; 6
     31a:	80 93 9d 00 	sts	0x009D, r24
}
     31e:	1f 91       	pop	r17
     320:	0f 91       	pop	r16
     322:	08 95       	ret

00000324 <initialize>:
		DDRC |= (1<<DDC2);
		PORTC = 0x07;				// LEDs start OFF
	#endif

	// Init output I/Os
	DDRA |= (1<<DDA4);				// DISCP	on Pin PA4 as output ???
     324:	d4 9a       	sbi	0x1a, 4	; 26
	DDRA &= ~(1<<DDA3);	
     326:	d3 98       	cbi	0x1a, 3	; 26
	
	// UART TX Pins should be automatically configured as outputs when the UART is enabled
	// regardless of the following DDRx setting
	DDRD |= (1<<DDD3);	// GPS_TX	on Pin PD3 as output
     328:	8b 9a       	sbi	0x11, 3	; 17
	DDRE |= (1<<DDE1);	// COMM_TX	on Pin PE1 as output 
     32a:	11 9a       	sbi	0x02, 1	; 2
	
	
		
	// set up the UART lines
	usart0_initialize(get_ubrr(CDHIB_BAUD_RATE));		// UART0 is the interface to the CDH IB
     32c:	60 e8       	ldi	r22, 0x80	; 128
     32e:	75 e2       	ldi	r23, 0x25	; 37
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 5f 01 	call	0x2be	; 0x2be <get_ubrr>
     338:	0e 94 6e 01 	call	0x2dc	; 0x2dc <usart0_initialize>
	usart1_initialize(get_ubrr(RECEIVER_BAUD_RATE));	// UART1 is the interface to the GPS receiver
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	7c e2       	ldi	r23, 0x2C	; 44
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 5f 01 	call	0x2be	; 0x2be <get_ubrr>
     348:	0e 94 7f 01 	call	0x2fe	; 0x2fe <usart1_initialize>

	usart0_index		= 0;
     34c:	10 92 ca 02 	sts	0x02CA, r1
     350:	10 92 c9 02 	sts	0x02C9, r1
	usart0_complete		= 0;
     354:	10 92 45 03 	sts	0x0345, r1
     358:	10 92 44 03 	sts	0x0344, r1
	usart0_flags		= 0;
     35c:	10 92 31 0a 	sts	0x0A31, r1

	usart1_index		= 0;
     360:	10 92 8f 03 	sts	0x038F, r1
     364:	10 92 8e 03 	sts	0x038E, r1
	usart1_complete		= 0;
     368:	10 92 ec 01 	sts	0x01EC, r1
     36c:	10 92 eb 01 	sts	0x01EB, r1
	usart1_flags		= 0;
     370:	10 92 98 03 	sts	0x0398, r1

	gpsi_ready			= 0;
     374:	10 92 cb 09 	sts	0x09CB, r1
	f00_ready			= 0;
     378:	10 92 81 07 	sts	0x0781, r1
	watchdog_transmit	= 0;
     37c:	10 92 97 03 	sts	0x0397, r1
	deadSecs			= 0;
     380:	10 92 c8 02 	sts	0x02C8, r1
     384:	10 92 c7 02 	sts	0x02C7, r1


	// Init ADC
    ADMUX	|=  ( (1<<REFS0) | (1<<ADLAR) );				// External AVcc as Ref, Left adjusted result
     388:	87 b1       	in	r24, 0x07	; 7
     38a:	80 66       	ori	r24, 0x60	; 96
     38c:	87 b9       	out	0x07, r24	; 7
	ADCSRA	|= 	( (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0) );	// Prescaler 128, conversion clock = CLOCK_SPEED/prescaler
     38e:	86 b1       	in	r24, 0x06	; 6
     390:	87 60       	ori	r24, 0x07	; 7
     392:	86 b9       	out	0x06, r24	; 6
inline void Clear_ADC_MUX()						{ ADMUX  &= ~((1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0)); }
     394:	87 b1       	in	r24, 0x07	; 7
     396:	80 7f       	andi	r24, 0xF0	; 240
     398:	87 b9       	out	0x07, r24	; 7

// Functions - see adc.c
uint8 Sample_ADC_Channel (uint8 channel);
uint8 Get_ADC_Result (uint8 channel);

inline void Enable_ADC()						{ ADCSRA |=  (1<<ADEN); }	
     39a:	37 9a       	sbi	0x06, 7	; 6
inline void Disbale_ADC()						{ ADCSRA &= ~(1<<ADEN); } 
inline void Start_ADC_Conversion()				{ ADCSRA |=  (1<<ADSC); }
     39c:	36 9a       	sbi	0x06, 6	; 6
	Enable_ADC();											// Enable ADC
	Start_ADC_Conversion();									// Do first dummy conversion on Channel 0


	// Init watchdog (use Timer 1 in CTC mode to create 1Hz interrupts)
	TCCR1A 	= 	0; 							// no I/O connected
     39e:	1f bc       	out	0x2f, r1	; 47
	OCR1A	=	((CLOCK_SPEED / 1024) - 1);	// 1 Hz interrupt	  
     3a0:	8f e3       	ldi	r24, 0x3F	; 63
     3a2:	98 e3       	ldi	r25, 0x38	; 56
     3a4:	9b bd       	out	0x2b, r25	; 43
     3a6:	8a bd       	out	0x2a, r24	; 42
	TIMSK 	|=	( (1<< OCIE1A));			// enable interrupt on compare
     3a8:	87 b7       	in	r24, 0x37	; 55
     3aa:	80 61       	ori	r24, 0x10	; 16
     3ac:	87 bf       	out	0x37, r24	; 55
	TCCR1B 	|= 	( (1<<WGM12));				// CTC mode, OCR1A is top
     3ae:	8e b5       	in	r24, 0x2e	; 46
     3b0:	88 60       	ori	r24, 0x08	; 8
     3b2:	8e bd       	out	0x2e, r24	; 46
	TCCR1B	|=	( (1<<CS10)  | (1<<CS12)); 	// prescale clock by 1024 and start the timer		
     3b4:	8e b5       	in	r24, 0x2e	; 46
     3b6:	85 60       	ori	r24, 0x05	; 5
     3b8:	8e bd       	out	0x2e, r24	; 46
		PORTA	|= (1<<PA1);
	#endif		


	// enable interrupts
	sei();
     3ba:	78 94       	sei
     3bc:	08 95       	ret

000003be <retrieve_gps_data>:
 * If it gets unexpected data at any stage (except in the GPSI_S1,2,3,4,5 stages), it'll
 * throw a general error and go into GPSI_UNKNOWN. If it recognizes a start byte and starts
 * ID'ing the sentence, it'll clear the general error.
 */ 
void retrieve_gps_data()
{
     3be:	2f 92       	push	r2
     3c0:	3f 92       	push	r3
     3c2:	4f 92       	push	r4
     3c4:	5f 92       	push	r5
     3c6:	6f 92       	push	r6
     3c8:	7f 92       	push	r7
     3ca:	8f 92       	push	r8
     3cc:	9f 92       	push	r9
     3ce:	af 92       	push	r10
     3d0:	bf 92       	push	r11
     3d2:	cf 92       	push	r12
     3d4:	df 92       	push	r13
     3d6:	ef 92       	push	r14
     3d8:	ff 92       	push	r15
     3da:	0f 93       	push	r16
     3dc:	1f 93       	push	r17
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29

			case  GPSI_CHKS3B: // F18 Checksum Byte 1
				rec_checksum[1] = usart1_buffer[usart1_index];
				
				if (rec_checksum[0] != checksum[0] || rec_checksum[1] != checksum[1])
					memset(&f18, 0x00, sizeof(gps_f18));	// Checksum failed - Write zeros to F18
     3e2:	8b e2       	ldi	r24, 0x2B	; 43
     3e4:	28 2e       	mov	r2, r24
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	38 2e       	mov	r3, r24
     3ea:	90 ec       	ldi	r25, 0xC0	; 192

			case  GPSI_CHKS5B: // F23 Checksum Byte 1
				rec_checksum[1] = usart1_buffer[usart1_index];

				if (rec_checksum[0] != checksum[0] || rec_checksum[1] != checksum[1])
					memset(&f23, 0x00, sizeof(gps_f23));	// Checksum failed - Write zeros to F23
     3ec:	2c ec       	ldi	r18, 0xCC	; 204
     3ee:	82 2e       	mov	r8, r18
     3f0:	29 e0       	ldi	r18, 0x09	; 9
     3f2:	92 2e       	mov	r9, r18
     3f4:	20 e6       	ldi	r18, 0x60	; 96
					{
						if (order == GPSI_ORDER_F22)
							order = GPSI_ORDER_F23;

						rem_gen_state(error, GPSI_ERR_5); // F23 received ok
						gpsi_ready = 1;		
     3f6:	81 e0       	ldi	r24, 0x01	; 1
					}
					
					else if (rx_id[2] == '3' && rx_id[1] == '2')
					{
						if (order == GPSI_ORDER_F22)
							order = GPSI_ORDER_F23;
     3f8:	33 e2       	ldi	r19, 0x23	; 35
					}
					
					else if (rx_id[1] == '2' && rx_id[2] == '2')
					{
						if (order == GPSI_ORDER_F18)
							order = GPSI_ORDER_F22;
     3fa:	42 e2       	ldi	r20, 0x22	; 34
					}
					
					else if (rx_id[1] == '1' && rx_id[2] == '8')
					{
						if (order == GPSI_ORDER_F03)
							order = GPSI_ORDER_F18;
     3fc:	58 e1       	ldi	r21, 0x18	; 24
					}

					else if (rx_id[2] == '3' && rx_id[1] == '0')
					{
						if (order == GPSI_ORDER_F00)
							order = GPSI_ORDER_F03;
     3fe:	63 e0       	ldi	r22, 0x03	; 3

			case  GPSI_CHKS4B: // F22 Checksum Byte 1
				rec_checksum[1] = usart1_buffer[usart1_index];

				if (rec_checksum[0] != checksum[0] || rec_checksum[1] != checksum[1])
					memset(&f22, 0x00, sizeof(gps_f22));	// Checksum failed - Write zeros to F22
     400:	7b ec       	ldi	r23, 0xCB	; 203
     402:	a7 2e       	mov	r10, r23
     404:	72 e0       	ldi	r23, 0x02	; 2
     406:	b7 2e       	mov	r11, r23
     408:	78 e7       	ldi	r23, 0x78	; 120

			case  GPSI_CHKS1B: // F00 Checksum Byte 1
				rec_checksum[1] = usart1_buffer[usart1_index];

				if (rec_checksum[0] != checksum[0] || rec_checksum[1] != checksum[1])
					memset(&f00, 0x00, sizeof(gps_f00));	// Checksum failed - Write zeros to F00
     40a:	a6 e4       	ldi	r26, 0x46	; 70
     40c:	b3 e0       	ldi	r27, 0x03	; 3

			case  GPSI_ID1:
				if (usart1_buffer[usart1_index] == 'F')
				{
					set_usart_state(usart1_flags, GPSI_ID2);
					rx_id[0] = 'F';
     40e:	16 e4       	ldi	r17, 0x46	; 70
void retrieve_gps_data()
{
	// The buffer is circular, so when the loop gets to the end, it just
	// sets back to index 0 and continues until it reaches usart1_snapshot
	// This helps to prevent unwanted loss of data
	for (; usart1_index != usart1_snapshot; usart1_index = (usart1_index+1 < usart1_buffer_size ? usart1_index+1 : 0))
     410:	75 c4       	rjmp	.+2282   	; 0xcfc <retrieve_gps_data+0x93e>
	{
		switch (get_usart_state(usart1_flags))
     412:	e0 91 98 03 	lds	r30, 0x0398
     416:	ec 7f       	andi	r30, 0xFC	; 252
     418:	e0 33       	cpi	r30, 0x30	; 48
     41a:	09 f4       	brne	.+2      	; 0x41e <retrieve_gps_data+0x60>
     41c:	ab c2       	rjmp	.+1366   	; 0x974 <retrieve_gps_data+0x5b6>
     41e:	40 f5       	brcc	.+80     	; 0x470 <retrieve_gps_data+0xb2>
     420:	e8 31       	cpi	r30, 0x18	; 24
     422:	09 f4       	brne	.+2      	; 0x426 <retrieve_gps_data+0x68>
     424:	a8 c0       	rjmp	.+336    	; 0x576 <retrieve_gps_data+0x1b8>
     426:	90 f4       	brcc	.+36     	; 0x44c <retrieve_gps_data+0x8e>
     428:	ec 30       	cpi	r30, 0x0C	; 12
     42a:	09 f4       	brne	.+2      	; 0x42e <retrieve_gps_data+0x70>
     42c:	6e c0       	rjmp	.+220    	; 0x50a <retrieve_gps_data+0x14c>
     42e:	38 f4       	brcc	.+14     	; 0x43e <retrieve_gps_data+0x80>
     430:	e4 30       	cpi	r30, 0x04	; 4
     432:	09 f4       	brne	.+2      	; 0x436 <retrieve_gps_data+0x78>
     434:	45 c0       	rjmp	.+138    	; 0x4c0 <retrieve_gps_data+0x102>
     436:	e8 30       	cpi	r30, 0x08	; 8
     438:	09 f0       	breq	.+2      	; 0x43c <retrieve_gps_data+0x7e>
     43a:	31 c4       	rjmp	.+2146   	; 0xc9e <retrieve_gps_data+0x8e0>
     43c:	55 c0       	rjmp	.+170    	; 0x4e8 <retrieve_gps_data+0x12a>
     43e:	e0 31       	cpi	r30, 0x10	; 16
     440:	09 f4       	brne	.+2      	; 0x444 <retrieve_gps_data+0x86>
     442:	76 c0       	rjmp	.+236    	; 0x530 <retrieve_gps_data+0x172>
     444:	e4 31       	cpi	r30, 0x14	; 20
     446:	09 f0       	breq	.+2      	; 0x44a <retrieve_gps_data+0x8c>
     448:	2a c4       	rjmp	.+2132   	; 0xc9e <retrieve_gps_data+0x8e0>
     44a:	7c c0       	rjmp	.+248    	; 0x544 <retrieve_gps_data+0x186>
     44c:	e4 32       	cpi	r30, 0x24	; 36
     44e:	09 f4       	brne	.+2      	; 0x452 <retrieve_gps_data+0x94>
     450:	7a c1       	rjmp	.+756    	; 0x746 <retrieve_gps_data+0x388>
     452:	38 f4       	brcc	.+14     	; 0x462 <retrieve_gps_data+0xa4>
     454:	ec 31       	cpi	r30, 0x1C	; 28
     456:	09 f4       	brne	.+2      	; 0x45a <retrieve_gps_data+0x9c>
     458:	b0 c0       	rjmp	.+352    	; 0x5ba <retrieve_gps_data+0x1fc>
     45a:	e0 32       	cpi	r30, 0x20	; 32
     45c:	09 f0       	breq	.+2      	; 0x460 <retrieve_gps_data+0xa2>
     45e:	1f c4       	rjmp	.+2110   	; 0xc9e <retrieve_gps_data+0x8e0>
     460:	15 c1       	rjmp	.+554    	; 0x68c <retrieve_gps_data+0x2ce>
     462:	e8 32       	cpi	r30, 0x28	; 40
     464:	09 f4       	brne	.+2      	; 0x468 <retrieve_gps_data+0xaa>
     466:	cc c1       	rjmp	.+920    	; 0x800 <retrieve_gps_data+0x442>
     468:	ec 32       	cpi	r30, 0x2C	; 44
     46a:	09 f0       	breq	.+2      	; 0x46e <retrieve_gps_data+0xb0>
     46c:	18 c4       	rjmp	.+2096   	; 0xc9e <retrieve_gps_data+0x8e0>
     46e:	25 c2       	rjmp	.+1098   	; 0x8ba <retrieve_gps_data+0x4fc>
     470:	e8 34       	cpi	r30, 0x48	; 72
     472:	09 f4       	brne	.+2      	; 0x476 <retrieve_gps_data+0xb8>
     474:	3e c3       	rjmp	.+1660   	; 0xaf2 <retrieve_gps_data+0x734>
     476:	90 f4       	brcc	.+36     	; 0x49c <retrieve_gps_data+0xde>
     478:	ec 33       	cpi	r30, 0x3C	; 60
     47a:	09 f4       	brne	.+2      	; 0x47e <retrieve_gps_data+0xc0>
     47c:	00 c3       	rjmp	.+1536   	; 0xa7e <retrieve_gps_data+0x6c0>
     47e:	38 f4       	brcc	.+14     	; 0x48e <retrieve_gps_data+0xd0>
     480:	e4 33       	cpi	r30, 0x34	; 52
     482:	09 f4       	brne	.+2      	; 0x486 <retrieve_gps_data+0xc8>
     484:	d4 c2       	rjmp	.+1448   	; 0xa2e <retrieve_gps_data+0x670>
     486:	e8 33       	cpi	r30, 0x38	; 56
     488:	09 f0       	breq	.+2      	; 0x48c <retrieve_gps_data+0xce>
     48a:	09 c4       	rjmp	.+2066   	; 0xc9e <retrieve_gps_data+0x8e0>
     48c:	e1 c2       	rjmp	.+1474   	; 0xa50 <retrieve_gps_data+0x692>
     48e:	e0 34       	cpi	r30, 0x40	; 64
     490:	09 f4       	brne	.+2      	; 0x494 <retrieve_gps_data+0xd6>
     492:	06 c3       	rjmp	.+1548   	; 0xaa0 <retrieve_gps_data+0x6e2>
     494:	e4 34       	cpi	r30, 0x44	; 68
     496:	09 f0       	breq	.+2      	; 0x49a <retrieve_gps_data+0xdc>
     498:	02 c4       	rjmp	.+2052   	; 0xc9e <retrieve_gps_data+0x8e0>
     49a:	1a c3       	rjmp	.+1588   	; 0xad0 <retrieve_gps_data+0x712>
     49c:	e4 35       	cpi	r30, 0x54	; 84
     49e:	09 f4       	brne	.+2      	; 0x4a2 <retrieve_gps_data+0xe4>
     4a0:	66 c3       	rjmp	.+1740   	; 0xb6e <retrieve_gps_data+0x7b0>
     4a2:	38 f4       	brcc	.+14     	; 0x4b2 <retrieve_gps_data+0xf4>
     4a4:	ec 34       	cpi	r30, 0x4C	; 76
     4a6:	09 f4       	brne	.+2      	; 0x4aa <retrieve_gps_data+0xec>
     4a8:	3b c3       	rjmp	.+1654   	; 0xb20 <retrieve_gps_data+0x762>
     4aa:	e0 35       	cpi	r30, 0x50	; 80
     4ac:	09 f0       	breq	.+2      	; 0x4b0 <retrieve_gps_data+0xf2>
     4ae:	f7 c3       	rjmp	.+2030   	; 0xc9e <retrieve_gps_data+0x8e0>
     4b0:	48 c3       	rjmp	.+1680   	; 0xb42 <retrieve_gps_data+0x784>
     4b2:	e8 35       	cpi	r30, 0x58	; 88
     4b4:	09 f4       	brne	.+2      	; 0x4b8 <retrieve_gps_data+0xfa>
     4b6:	6c c3       	rjmp	.+1752   	; 0xb90 <retrieve_gps_data+0x7d2>
     4b8:	ec 35       	cpi	r30, 0x5C	; 92
     4ba:	09 f0       	breq	.+2      	; 0x4be <retrieve_gps_data+0x100>
     4bc:	f0 c3       	rjmp	.+2016   	; 0xc9e <retrieve_gps_data+0x8e0>
     4be:	88 c3       	rjmp	.+1808   	; 0xbd0 <retrieve_gps_data+0x812>
		{
			case  GPSI_UNKNOWN:
				if (usart1_buffer[usart1_index] == GPSI_START)
     4c0:	e0 91 8e 03 	lds	r30, 0x038E
     4c4:	f0 91 8f 03 	lds	r31, 0x038F
     4c8:	e7 56       	subi	r30, 0x67	; 103
     4ca:	fc 4f       	sbci	r31, 0xFC	; 252
     4cc:	e0 81       	ld	r30, Z
     4ce:	e2 30       	cpi	r30, 0x02	; 2
     4d0:	09 f0       	breq	.+2      	; 0x4d4 <retrieve_gps_data+0x116>
     4d2:	ee c3       	rjmp	.+2012   	; 0xcb0 <retrieve_gps_data+0x8f2>
				{
					gpsi_ready = 0;
     4d4:	10 92 cb 09 	sts	0x09CB, r1
					set_usart_state(usart1_flags, GPSI_ID1);
     4d8:	f0 91 98 03 	lds	r31, 0x0398
     4dc:	e0 91 98 03 	lds	r30, 0x0398
     4e0:	ec 7f       	andi	r30, 0xFC	; 252
     4e2:	ef 27       	eor	r30, r31
     4e4:	e4 61       	ori	r30, 0x14	; 20
     4e6:	d8 c3       	rjmp	.+1968   	; 0xc98 <retrieve_gps_data+0x8da>
				}
				break;


			case GPSI_PRELIM1:
				telem.last_command = usart1_buffer[usart1_index];
     4e8:	e0 91 8e 03 	lds	r30, 0x038E
     4ec:	f0 91 8f 03 	lds	r31, 0x038F
     4f0:	e7 56       	subi	r30, 0x67	; 103
     4f2:	fc 4f       	sbci	r31, 0xFC	; 252
     4f4:	e0 81       	ld	r30, Z
     4f6:	e0 93 93 03 	sts	0x0393, r30
				set_usart_state(usart1_flags, GPSI_PRELIM2);
     4fa:	f0 91 98 03 	lds	r31, 0x0398
     4fe:	e0 91 98 03 	lds	r30, 0x0398
     502:	ec 7f       	andi	r30, 0xFC	; 252
     504:	ef 27       	eor	r30, r31
     506:	ec 60       	ori	r30, 0x0C	; 12
     508:	10 c0       	rjmp	.+32     	; 0x52a <retrieve_gps_data+0x16c>
				break;


			case GPSI_PRELIM2:
				telem.command_success = usart1_buffer[usart1_index];
     50a:	e0 91 8e 03 	lds	r30, 0x038E
     50e:	f0 91 8f 03 	lds	r31, 0x038F
     512:	e7 56       	subi	r30, 0x67	; 103
     514:	fc 4f       	sbci	r31, 0xFC	; 252
     516:	e0 81       	ld	r30, Z
     518:	e0 93 94 03 	sts	0x0394, r30
				set_usart_state(usart1_flags, GPSI_PRELIM3);
     51c:	f0 91 98 03 	lds	r31, 0x0398
     520:	e0 91 98 03 	lds	r30, 0x0398
     524:	ec 7f       	andi	r30, 0xFC	; 252
     526:	ef 27       	eor	r30, r31
     528:	e0 61       	ori	r30, 0x10	; 16
     52a:	e0 93 98 03 	sts	0x0398, r30
				break;
     52e:	c5 c3       	rjmp	.+1930   	; 0xcba <retrieve_gps_data+0x8fc>


			case GPSI_PRELIM3:
				telem.last_satellite = usart1_buffer[usart1_index];
     530:	e0 91 8e 03 	lds	r30, 0x038E
     534:	f0 91 8f 03 	lds	r31, 0x038F
     538:	e7 56       	subi	r30, 0x67	; 103
     53a:	fc 4f       	sbci	r31, 0xFC	; 252
     53c:	e0 81       	ld	r30, Z
     53e:	e0 93 95 03 	sts	0x0395, r30
     542:	3e c3       	rjmp	.+1660   	; 0xbc0 <retrieve_gps_data+0x802>
				set_usart_state(usart1_flags, GPSI_DONE);
				break;


			case  GPSI_ID1:
				if (usart1_buffer[usart1_index] == 'F')
     544:	e0 91 8e 03 	lds	r30, 0x038E
     548:	f0 91 8f 03 	lds	r31, 0x038F
     54c:	e7 56       	subi	r30, 0x67	; 103
     54e:	fc 4f       	sbci	r31, 0xFC	; 252
     550:	e0 81       	ld	r30, Z
				{
					set_usart_state(usart1_flags, GPSI_ID2);
     552:	f0 91 98 03 	lds	r31, 0x0398
				set_usart_state(usart1_flags, GPSI_DONE);
				break;


			case  GPSI_ID1:
				if (usart1_buffer[usart1_index] == 'F')
     556:	e6 34       	cpi	r30, 0x46	; 70
     558:	09 f0       	breq	.+2      	; 0x55c <retrieve_gps_data+0x19e>
     55a:	a3 c3       	rjmp	.+1862   	; 0xca2 <retrieve_gps_data+0x8e4>
				{
					set_usart_state(usart1_flags, GPSI_ID2);
     55c:	e0 91 98 03 	lds	r30, 0x0398
     560:	ec 7f       	andi	r30, 0xFC	; 252
     562:	ef 27       	eor	r30, r31
     564:	e8 61       	ori	r30, 0x18	; 24
     566:	e0 93 98 03 	sts	0x0398, r30
					rx_id[0] = 'F';
     56a:	10 93 2e 0a 	sts	0x0A2E, r17
					rem_gen_state(error, GPSI_ERR_GEN);
     56e:	e0 91 ca 09 	lds	r30, 0x09CA
     572:	eb 7f       	andi	r30, 0xFB	; 251
     574:	a0 c3       	rjmp	.+1856   	; 0xcb6 <retrieve_gps_data+0x8f8>
				}
				break;


			case  GPSI_ID2:
				switch(usart1_buffer[usart1_index])
     576:	e0 91 8e 03 	lds	r30, 0x038E
     57a:	f0 91 8f 03 	lds	r31, 0x038F
     57e:	e7 56       	subi	r30, 0x67	; 103
     580:	fc 4f       	sbci	r31, 0xFC	; 252
     582:	e0 81       	ld	r30, Z
     584:	e0 33       	cpi	r30, 0x30	; 48
     586:	08 f4       	brcc	.+2      	; 0x58a <retrieve_gps_data+0x1cc>
     588:	8a c3       	rjmp	.+1812   	; 0xc9e <retrieve_gps_data+0x8e0>
     58a:	e3 33       	cpi	r30, 0x33	; 51
     58c:	18 f0       	brcs	.+6      	; 0x594 <retrieve_gps_data+0x1d6>
     58e:	e9 33       	cpi	r30, 0x39	; 57
     590:	09 f0       	breq	.+2      	; 0x594 <retrieve_gps_data+0x1d6>
     592:	85 c3       	rjmp	.+1802   	; 0xc9e <retrieve_gps_data+0x8e0>
					// Four possible valid options here
					case '0':
					case '1':
					case '2':
					case '9':
						set_usart_state(usart1_flags, GPSI_ID3);
     594:	f0 91 98 03 	lds	r31, 0x0398
     598:	e0 91 98 03 	lds	r30, 0x0398
     59c:	ec 7f       	andi	r30, 0xFC	; 252
     59e:	ef 27       	eor	r30, r31
     5a0:	ec 61       	ori	r30, 0x1C	; 28
     5a2:	e0 93 98 03 	sts	0x0398, r30
						rx_id[1] = usart1_buffer[usart1_index];
     5a6:	e0 91 8e 03 	lds	r30, 0x038E
     5aa:	f0 91 8f 03 	lds	r31, 0x038F
     5ae:	e7 56       	subi	r30, 0x67	; 103
     5b0:	fc 4f       	sbci	r31, 0xFC	; 252
     5b2:	e0 81       	ld	r30, Z
     5b4:	e0 93 2f 0a 	sts	0x0A2F, r30
     5b8:	da cf       	rjmp	.-76     	; 0x56e <retrieve_gps_data+0x1b0>
				}
				break;


			case  GPSI_ID3:
				rx_id[2] = usart1_buffer[usart1_index];
     5ba:	e0 91 8e 03 	lds	r30, 0x038E
     5be:	f0 91 8f 03 	lds	r31, 0x038F
     5c2:	e7 56       	subi	r30, 0x67	; 103
     5c4:	fc 4f       	sbci	r31, 0xFC	; 252
     5c6:	e0 81       	ld	r30, Z
     5c8:	e0 93 30 0a 	sts	0x0A30, r30
				rem_gen_state(error, GPSI_ERR_GEN);
     5cc:	f0 91 ca 09 	lds	r31, 0x09CA
     5d0:	fb 7f       	andi	r31, 0xFB	; 251
     5d2:	f0 93 ca 09 	sts	0x09CA, r31
				if (rx_id[1] == '0' && rx_id[2] == '0')			// F00
     5d6:	00 91 2f 0a 	lds	r16, 0x0A2F
     5da:	00 33       	cpi	r16, 0x30	; 48
     5dc:	a9 f4       	brne	.+42     	; 0x608 <retrieve_gps_data+0x24a>
     5de:	e0 33       	cpi	r30, 0x30	; 48
     5e0:	09 f0       	breq	.+2      	; 0x5e4 <retrieve_gps_data+0x226>
     5e2:	99 c3       	rjmp	.+1842   	; 0xd16 <retrieve_gps_data+0x958>
					set_usart_state(usart1_flags, GPSI_S1);
     5e4:	f0 91 98 03 	lds	r31, 0x0398
     5e8:	e0 91 98 03 	lds	r30, 0x0398
     5ec:	ec 7f       	andi	r30, 0xFC	; 252
     5ee:	ef 27       	eor	r30, r31
     5f0:	e0 62       	ori	r30, 0x20	; 32
     5f2:	07 c0       	rjmp	.+14     	; 0x602 <retrieve_gps_data+0x244>
				else if (rx_id[2] == '3' && rx_id[1] == '0')	// F03
					set_usart_state(usart1_flags, GPSI_S2);
     5f4:	f0 91 98 03 	lds	r31, 0x0398
     5f8:	e0 91 98 03 	lds	r30, 0x0398
     5fc:	ec 7f       	andi	r30, 0xFC	; 252
     5fe:	ef 27       	eor	r30, r31
     600:	e4 62       	ori	r30, 0x24	; 36
     602:	e0 93 98 03 	sts	0x0398, r30
     606:	39 c0       	rjmp	.+114    	; 0x67a <retrieve_gps_data+0x2bc>
				else if (rx_id[1] == '1' && rx_id[2] == '8')	// F18
     608:	01 33       	cpi	r16, 0x31	; 49
     60a:	51 f4       	brne	.+20     	; 0x620 <retrieve_gps_data+0x262>
     60c:	e8 33       	cpi	r30, 0x38	; 56
     60e:	49 f5       	brne	.+82     	; 0x662 <retrieve_gps_data+0x2a4>
					set_usart_state(usart1_flags, GPSI_S3);
     610:	f0 91 98 03 	lds	r31, 0x0398
     614:	e0 91 98 03 	lds	r30, 0x0398
     618:	ec 7f       	andi	r30, 0xFC	; 252
     61a:	ef 27       	eor	r30, r31
     61c:	e8 62       	ori	r30, 0x28	; 40
     61e:	f1 cf       	rjmp	.-30     	; 0x602 <retrieve_gps_data+0x244>
				else if (rx_id[1] == '2' && rx_id[2] == '2')	// F22
     620:	02 33       	cpi	r16, 0x32	; 50
     622:	99 f4       	brne	.+38     	; 0x64a <retrieve_gps_data+0x28c>
     624:	e2 33       	cpi	r30, 0x32	; 50
     626:	09 f0       	breq	.+2      	; 0x62a <retrieve_gps_data+0x26c>
     628:	7a c3       	rjmp	.+1780   	; 0xd1e <retrieve_gps_data+0x960>
					set_usart_state(usart1_flags, GPSI_S4);
     62a:	f0 91 98 03 	lds	r31, 0x0398
     62e:	e0 91 98 03 	lds	r30, 0x0398
     632:	ec 7f       	andi	r30, 0xFC	; 252
     634:	ef 27       	eor	r30, r31
     636:	ec 62       	ori	r30, 0x2C	; 44
     638:	e4 cf       	rjmp	.-56     	; 0x602 <retrieve_gps_data+0x244>
				else if (rx_id[2] == '3' && rx_id[1] == '2')	// F23
					set_usart_state(usart1_flags, GPSI_S5);
     63a:	f0 91 98 03 	lds	r31, 0x0398
     63e:	e0 91 98 03 	lds	r30, 0x0398
     642:	ec 7f       	andi	r30, 0xFC	; 252
     644:	ef 27       	eor	r30, r31
     646:	e0 63       	ori	r30, 0x30	; 48
     648:	dc cf       	rjmp	.-72     	; 0x602 <retrieve_gps_data+0x244>
				else if (rx_id[1] == '9' && rx_id[2] == '9')	// f99
     64a:	09 33       	cpi	r16, 0x39	; 57
     64c:	51 f4       	brne	.+20     	; 0x662 <retrieve_gps_data+0x2a4>
     64e:	e9 33       	cpi	r30, 0x39	; 57
     650:	41 f4       	brne	.+16     	; 0x662 <retrieve_gps_data+0x2a4>
					set_usart_state(usart1_flags, GPSI_PRELIM1);
     652:	f0 91 98 03 	lds	r31, 0x0398
     656:	e0 91 98 03 	lds	r30, 0x0398
     65a:	ec 7f       	andi	r30, 0xFC	; 252
     65c:	ef 27       	eor	r30, r31
     65e:	e8 60       	ori	r30, 0x08	; 8
     660:	d0 cf       	rjmp	.-96     	; 0x602 <retrieve_gps_data+0x244>
				else
				{
					set_usart_state(usart1_flags, GPSI_UNKNOWN);
     662:	00 91 98 03 	lds	r16, 0x0398
     666:	e0 91 98 03 	lds	r30, 0x0398
     66a:	ec 7f       	andi	r30, 0xFC	; 252
     66c:	e0 27       	eor	r30, r16
     66e:	e4 60       	ori	r30, 0x04	; 4
     670:	e0 93 98 03 	sts	0x0398, r30
					set_gen_state(error, GPSI_ERR_GEN);
     674:	f4 60       	ori	r31, 0x04	; 4
     676:	f0 93 ca 09 	sts	0x09CA, r31
				}

				count = 0;
     67a:	10 92 82 07 	sts	0x0782, r1
     67e:	10 92 83 07 	sts	0x0783, r1
     682:	10 92 84 07 	sts	0x0784, r1
     686:	10 92 85 07 	sts	0x0785, r1
				break;
     68a:	17 c3       	rjmp	.+1582   	; 0xcba <retrieve_gps_data+0x8fc>


			case  GPSI_S1: // F00
				if (count == 0)
     68c:	40 90 82 07 	lds	r4, 0x0782
     690:	50 90 83 07 	lds	r5, 0x0783
     694:	60 90 84 07 	lds	r6, 0x0784
     698:	70 90 85 07 	lds	r7, 0x0785
     69c:	41 14       	cp	r4, r1
     69e:	51 04       	cpc	r5, r1
     6a0:	61 04       	cpc	r6, r1
     6a2:	71 04       	cpc	r7, r1
     6a4:	21 f4       	brne	.+8      	; 0x6ae <retrieve_gps_data+0x2f0>
				{
					checksum[0] = 0;
     6a6:	10 92 2c 0a 	sts	0x0A2C, r1
					checksum[1] = 0;
     6aa:	10 92 2d 0a 	sts	0x0A2D, r1
				}

				((uint8ptr)&f00)[count] = usart1_buffer[usart1_index];
     6ae:	e0 91 8e 03 	lds	r30, 0x038E
     6b2:	f0 91 8f 03 	lds	r31, 0x038F
     6b6:	c6 e4       	ldi	r28, 0x46	; 70
     6b8:	ec 2e       	mov	r14, r28
     6ba:	c3 e0       	ldi	r28, 0x03	; 3
     6bc:	fc 2e       	mov	r15, r28
     6be:	e4 0c       	add	r14, r4
     6c0:	f5 1c       	adc	r15, r5
     6c2:	e7 56       	subi	r30, 0x67	; 103
     6c4:	fc 4f       	sbci	r31, 0xFC	; 252
     6c6:	c0 81       	ld	r28, Z
     6c8:	f7 01       	movw	r30, r14
     6ca:	c0 83       	st	Z, r28
				checksum[count%2] = checksum[count%2]^usart1_buffer[usart1_index];
     6cc:	c1 2c       	mov	r12, r1
     6ce:	d1 2c       	mov	r13, r1
     6d0:	76 01       	movw	r14, r12
     6d2:	c3 94       	inc	r12
     6d4:	c4 20       	and	r12, r4
     6d6:	d5 20       	and	r13, r5
     6d8:	e6 20       	and	r14, r6
     6da:	f7 20       	and	r15, r7
     6dc:	e0 91 8e 03 	lds	r30, 0x038E
     6e0:	f0 91 8f 03 	lds	r31, 0x038F
     6e4:	0c e2       	ldi	r16, 0x2C	; 44
     6e6:	e0 2e       	mov	r14, r16
     6e8:	0a e0       	ldi	r16, 0x0A	; 10
     6ea:	f0 2e       	mov	r15, r16
     6ec:	ec 0c       	add	r14, r12
     6ee:	fd 1c       	adc	r15, r13
     6f0:	e7 56       	subi	r30, 0x67	; 103
     6f2:	fc 4f       	sbci	r31, 0xFC	; 252
     6f4:	e7 01       	movw	r28, r14
     6f6:	08 81       	ld	r16, Y
     6f8:	e0 81       	ld	r30, Z
     6fa:	0e 27       	eor	r16, r30
     6fc:	08 83       	st	Y, r16
				count++;
     6fe:	df ef       	ldi	r29, 0xFF	; 255
     700:	4d 1a       	sub	r4, r29
     702:	5d 0a       	sbc	r5, r29
     704:	6d 0a       	sbc	r6, r29
     706:	7d 0a       	sbc	r7, r29
     708:	40 92 82 07 	sts	0x0782, r4
     70c:	50 92 83 07 	sts	0x0783, r5
     710:	60 92 84 07 	sts	0x0784, r6
     714:	70 92 85 07 	sts	0x0785, r7

				if (count == sizeof(gps_f00))
     718:	e8 e4       	ldi	r30, 0x48	; 72
     71a:	4e 16       	cp	r4, r30
     71c:	51 04       	cpc	r5, r1
     71e:	61 04       	cpc	r6, r1
     720:	71 04       	cpc	r7, r1
     722:	09 f0       	breq	.+2      	; 0x726 <retrieve_gps_data+0x368>
     724:	ca c2       	rjmp	.+1428   	; 0xcba <retrieve_gps_data+0x8fc>
				{
					count = 0;
     726:	10 92 82 07 	sts	0x0782, r1
     72a:	10 92 83 07 	sts	0x0783, r1
     72e:	10 92 84 07 	sts	0x0784, r1
     732:	10 92 85 07 	sts	0x0785, r1
					set_usart_state(usart1_flags, GPSI_CHKS1A);
     736:	f0 91 98 03 	lds	r31, 0x0398
     73a:	e0 91 98 03 	lds	r30, 0x0398
     73e:	ec 7f       	andi	r30, 0xFC	; 252
     740:	ef 27       	eor	r30, r31
     742:	e4 63       	ori	r30, 0x34	; 52
     744:	f2 ce       	rjmp	.-540    	; 0x52a <retrieve_gps_data+0x16c>
				}
				break;


			case  GPSI_S2: // F03
				if (count == 0)
     746:	40 90 82 07 	lds	r4, 0x0782
     74a:	50 90 83 07 	lds	r5, 0x0783
     74e:	60 90 84 07 	lds	r6, 0x0784
     752:	70 90 85 07 	lds	r7, 0x0785
     756:	41 14       	cp	r4, r1
     758:	51 04       	cpc	r5, r1
     75a:	61 04       	cpc	r6, r1
     75c:	71 04       	cpc	r7, r1
     75e:	21 f4       	brne	.+8      	; 0x768 <retrieve_gps_data+0x3aa>
				{
					checksum[0] = 0;
     760:	10 92 2c 0a 	sts	0x0A2C, r1
					checksum[1] = 0;
     764:	10 92 2d 0a 	sts	0x0A2D, r1
				}

				((uint8ptr)&f03)[count] = usart1_buffer[usart1_index];
     768:	e0 91 8e 03 	lds	r30, 0x038E
     76c:	f0 91 8f 03 	lds	r31, 0x038F
     770:	cd ee       	ldi	r28, 0xED	; 237
     772:	ec 2e       	mov	r14, r28
     774:	c1 e0       	ldi	r28, 0x01	; 1
     776:	fc 2e       	mov	r15, r28
     778:	e4 0c       	add	r14, r4
     77a:	f5 1c       	adc	r15, r5
     77c:	e7 56       	subi	r30, 0x67	; 103
     77e:	fc 4f       	sbci	r31, 0xFC	; 252
     780:	e0 81       	ld	r30, Z
     782:	e7 01       	movw	r28, r14
     784:	e8 83       	st	Y, r30
				checksum[count%2] = checksum[count%2]^usart1_buffer[usart1_index];
     786:	c1 2c       	mov	r12, r1
     788:	d1 2c       	mov	r13, r1
     78a:	76 01       	movw	r14, r12
     78c:	c3 94       	inc	r12
     78e:	c4 20       	and	r12, r4
     790:	d5 20       	and	r13, r5
     792:	e6 20       	and	r14, r6
     794:	f7 20       	and	r15, r7
     796:	e0 91 8e 03 	lds	r30, 0x038E
     79a:	f0 91 8f 03 	lds	r31, 0x038F
     79e:	0c e2       	ldi	r16, 0x2C	; 44
     7a0:	e0 2e       	mov	r14, r16
     7a2:	0a e0       	ldi	r16, 0x0A	; 10
     7a4:	f0 2e       	mov	r15, r16
     7a6:	ec 0c       	add	r14, r12
     7a8:	fd 1c       	adc	r15, r13
     7aa:	e7 56       	subi	r30, 0x67	; 103
     7ac:	fc 4f       	sbci	r31, 0xFC	; 252
     7ae:	e7 01       	movw	r28, r14
     7b0:	08 81       	ld	r16, Y
     7b2:	e0 81       	ld	r30, Z
     7b4:	0e 27       	eor	r16, r30
     7b6:	08 83       	st	Y, r16
				count++;
     7b8:	df ef       	ldi	r29, 0xFF	; 255
     7ba:	4d 1a       	sub	r4, r29
     7bc:	5d 0a       	sbc	r5, r29
     7be:	6d 0a       	sbc	r6, r29
     7c0:	7d 0a       	sbc	r7, r29
     7c2:	40 92 82 07 	sts	0x0782, r4
     7c6:	50 92 83 07 	sts	0x0783, r5
     7ca:	60 92 84 07 	sts	0x0784, r6
     7ce:	70 92 85 07 	sts	0x0785, r7

				if (count == sizeof(gps_f03))
     7d2:	e8 ed       	ldi	r30, 0xD8	; 216
     7d4:	4e 16       	cp	r4, r30
     7d6:	51 04       	cpc	r5, r1
     7d8:	61 04       	cpc	r6, r1
     7da:	71 04       	cpc	r7, r1
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <retrieve_gps_data+0x422>
     7de:	6d c2       	rjmp	.+1242   	; 0xcba <retrieve_gps_data+0x8fc>
				{
					count = 0;
     7e0:	10 92 82 07 	sts	0x0782, r1
     7e4:	10 92 83 07 	sts	0x0783, r1
     7e8:	10 92 84 07 	sts	0x0784, r1
     7ec:	10 92 85 07 	sts	0x0785, r1
					set_usart_state(usart1_flags, GPSI_CHKS2A);
     7f0:	f0 91 98 03 	lds	r31, 0x0398
     7f4:	e0 91 98 03 	lds	r30, 0x0398
     7f8:	ec 7f       	andi	r30, 0xFC	; 252
     7fa:	ef 27       	eor	r30, r31
     7fc:	ec 63       	ori	r30, 0x3C	; 60
     7fe:	95 ce       	rjmp	.-726    	; 0x52a <retrieve_gps_data+0x16c>
				}
				break;


			case  GPSI_S3: // F18
				if (count == 0)
     800:	40 90 82 07 	lds	r4, 0x0782
     804:	50 90 83 07 	lds	r5, 0x0783
     808:	60 90 84 07 	lds	r6, 0x0784
     80c:	70 90 85 07 	lds	r7, 0x0785
     810:	41 14       	cp	r4, r1
     812:	51 04       	cpc	r5, r1
     814:	61 04       	cpc	r6, r1
     816:	71 04       	cpc	r7, r1
     818:	21 f4       	brne	.+8      	; 0x822 <retrieve_gps_data+0x464>
				{
					checksum[0] = 0;
     81a:	10 92 2c 0a 	sts	0x0A2C, r1
					checksum[1] = 0;
     81e:	10 92 2d 0a 	sts	0x0A2D, r1
				}

				((uint8ptr)&f18)[count] = usart1_buffer[usart1_index];
     822:	e0 91 8e 03 	lds	r30, 0x038E
     826:	f0 91 8f 03 	lds	r31, 0x038F
     82a:	cb e2       	ldi	r28, 0x2B	; 43
     82c:	ec 2e       	mov	r14, r28
     82e:	c1 e0       	ldi	r28, 0x01	; 1
     830:	fc 2e       	mov	r15, r28
     832:	e4 0c       	add	r14, r4
     834:	f5 1c       	adc	r15, r5
     836:	e7 56       	subi	r30, 0x67	; 103
     838:	fc 4f       	sbci	r31, 0xFC	; 252
     83a:	e0 81       	ld	r30, Z
     83c:	e7 01       	movw	r28, r14
     83e:	e8 83       	st	Y, r30
				checksum[count%2] = checksum[count%2]^usart1_buffer[usart1_index];
     840:	c1 2c       	mov	r12, r1
     842:	d1 2c       	mov	r13, r1
     844:	76 01       	movw	r14, r12
     846:	c3 94       	inc	r12
     848:	c4 20       	and	r12, r4
     84a:	d5 20       	and	r13, r5
     84c:	e6 20       	and	r14, r6
     84e:	f7 20       	and	r15, r7
     850:	e0 91 8e 03 	lds	r30, 0x038E
     854:	f0 91 8f 03 	lds	r31, 0x038F
     858:	0c e2       	ldi	r16, 0x2C	; 44
     85a:	e0 2e       	mov	r14, r16
     85c:	0a e0       	ldi	r16, 0x0A	; 10
     85e:	f0 2e       	mov	r15, r16
     860:	ec 0c       	add	r14, r12
     862:	fd 1c       	adc	r15, r13
     864:	e7 56       	subi	r30, 0x67	; 103
     866:	fc 4f       	sbci	r31, 0xFC	; 252
     868:	e7 01       	movw	r28, r14
     86a:	08 81       	ld	r16, Y
     86c:	e0 81       	ld	r30, Z
     86e:	0e 27       	eor	r16, r30
     870:	08 83       	st	Y, r16
				count++;
     872:	df ef       	ldi	r29, 0xFF	; 255
     874:	4d 1a       	sub	r4, r29
     876:	5d 0a       	sbc	r5, r29
     878:	6d 0a       	sbc	r6, r29
     87a:	7d 0a       	sbc	r7, r29
     87c:	40 92 82 07 	sts	0x0782, r4
     880:	50 92 83 07 	sts	0x0783, r5
     884:	60 92 84 07 	sts	0x0784, r6
     888:	70 92 85 07 	sts	0x0785, r7

				if (count == sizeof(gps_f18))
     88c:	e0 ec       	ldi	r30, 0xC0	; 192
     88e:	4e 16       	cp	r4, r30
     890:	51 04       	cpc	r5, r1
     892:	61 04       	cpc	r6, r1
     894:	71 04       	cpc	r7, r1
     896:	09 f0       	breq	.+2      	; 0x89a <retrieve_gps_data+0x4dc>
     898:	10 c2       	rjmp	.+1056   	; 0xcba <retrieve_gps_data+0x8fc>
				{
					count = 0;
     89a:	10 92 82 07 	sts	0x0782, r1
     89e:	10 92 83 07 	sts	0x0783, r1
     8a2:	10 92 84 07 	sts	0x0784, r1
     8a6:	10 92 85 07 	sts	0x0785, r1
					set_usart_state(usart1_flags, GPSI_CHKS3A);
     8aa:	f0 91 98 03 	lds	r31, 0x0398
     8ae:	e0 91 98 03 	lds	r30, 0x0398
     8b2:	ec 7f       	andi	r30, 0xFC	; 252
     8b4:	ef 27       	eor	r30, r31
     8b6:	e4 64       	ori	r30, 0x44	; 68
     8b8:	38 ce       	rjmp	.-912    	; 0x52a <retrieve_gps_data+0x16c>
				}
				break;


			case  GPSI_S4: // F22
				if (count == 0)
     8ba:	40 90 82 07 	lds	r4, 0x0782
     8be:	50 90 83 07 	lds	r5, 0x0783
     8c2:	60 90 84 07 	lds	r6, 0x0784
     8c6:	70 90 85 07 	lds	r7, 0x0785
     8ca:	41 14       	cp	r4, r1
     8cc:	51 04       	cpc	r5, r1
     8ce:	61 04       	cpc	r6, r1
     8d0:	71 04       	cpc	r7, r1
     8d2:	21 f4       	brne	.+8      	; 0x8dc <retrieve_gps_data+0x51e>
				{
					checksum[0] = 0;
     8d4:	10 92 2c 0a 	sts	0x0A2C, r1
					checksum[1] = 0;
     8d8:	10 92 2d 0a 	sts	0x0A2D, r1
				}

				((uint8ptr)&f22)[count] = usart1_buffer[usart1_index];
     8dc:	e0 91 8e 03 	lds	r30, 0x038E
     8e0:	f0 91 8f 03 	lds	r31, 0x038F
     8e4:	cb ec       	ldi	r28, 0xCB	; 203
     8e6:	ec 2e       	mov	r14, r28
     8e8:	c2 e0       	ldi	r28, 0x02	; 2
     8ea:	fc 2e       	mov	r15, r28
     8ec:	e4 0c       	add	r14, r4
     8ee:	f5 1c       	adc	r15, r5
     8f0:	e7 56       	subi	r30, 0x67	; 103
     8f2:	fc 4f       	sbci	r31, 0xFC	; 252
     8f4:	e0 81       	ld	r30, Z
     8f6:	e7 01       	movw	r28, r14
     8f8:	e8 83       	st	Y, r30
				checksum[count%2] = checksum[count%2]^usart1_buffer[usart1_index];
     8fa:	c1 2c       	mov	r12, r1
     8fc:	d1 2c       	mov	r13, r1
     8fe:	76 01       	movw	r14, r12
     900:	c3 94       	inc	r12
     902:	c4 20       	and	r12, r4
     904:	d5 20       	and	r13, r5
     906:	e6 20       	and	r14, r6
     908:	f7 20       	and	r15, r7
     90a:	e0 91 8e 03 	lds	r30, 0x038E
     90e:	f0 91 8f 03 	lds	r31, 0x038F
     912:	0c e2       	ldi	r16, 0x2C	; 44
     914:	e0 2e       	mov	r14, r16
     916:	0a e0       	ldi	r16, 0x0A	; 10
     918:	f0 2e       	mov	r15, r16
     91a:	ec 0c       	add	r14, r12
     91c:	fd 1c       	adc	r15, r13
     91e:	e7 56       	subi	r30, 0x67	; 103
     920:	fc 4f       	sbci	r31, 0xFC	; 252
     922:	e7 01       	movw	r28, r14
     924:	08 81       	ld	r16, Y
     926:	e0 81       	ld	r30, Z
     928:	0e 27       	eor	r16, r30
     92a:	08 83       	st	Y, r16
				count++;
     92c:	df ef       	ldi	r29, 0xFF	; 255
     92e:	4d 1a       	sub	r4, r29
     930:	5d 0a       	sbc	r5, r29
     932:	6d 0a       	sbc	r6, r29
     934:	7d 0a       	sbc	r7, r29
     936:	40 92 82 07 	sts	0x0782, r4
     93a:	50 92 83 07 	sts	0x0783, r5
     93e:	60 92 84 07 	sts	0x0784, r6
     942:	70 92 85 07 	sts	0x0785, r7

				if (count == sizeof(gps_f22))
     946:	e8 e7       	ldi	r30, 0x78	; 120
     948:	4e 16       	cp	r4, r30
     94a:	51 04       	cpc	r5, r1
     94c:	61 04       	cpc	r6, r1
     94e:	71 04       	cpc	r7, r1
     950:	09 f0       	breq	.+2      	; 0x954 <retrieve_gps_data+0x596>
     952:	b3 c1       	rjmp	.+870    	; 0xcba <retrieve_gps_data+0x8fc>
				{
					count = 0;
     954:	10 92 82 07 	sts	0x0782, r1
     958:	10 92 83 07 	sts	0x0783, r1
     95c:	10 92 84 07 	sts	0x0784, r1
     960:	10 92 85 07 	sts	0x0785, r1
					set_usart_state(usart1_flags, GPSI_CHKS4A);
     964:	f0 91 98 03 	lds	r31, 0x0398
     968:	e0 91 98 03 	lds	r30, 0x0398
     96c:	ec 7f       	andi	r30, 0xFC	; 252
     96e:	ef 27       	eor	r30, r31
     970:	ec 64       	ori	r30, 0x4C	; 76
     972:	db cd       	rjmp	.-1098   	; 0x52a <retrieve_gps_data+0x16c>
				}
				break;


			case  GPSI_S5: // F23
				if (count == 0)
     974:	40 90 82 07 	lds	r4, 0x0782
     978:	50 90 83 07 	lds	r5, 0x0783
     97c:	60 90 84 07 	lds	r6, 0x0784
     980:	70 90 85 07 	lds	r7, 0x0785
     984:	41 14       	cp	r4, r1
     986:	51 04       	cpc	r5, r1
     988:	61 04       	cpc	r6, r1
     98a:	71 04       	cpc	r7, r1
     98c:	21 f4       	brne	.+8      	; 0x996 <retrieve_gps_data+0x5d8>
				{
					checksum[0] = 0;
     98e:	10 92 2c 0a 	sts	0x0A2C, r1
					checksum[1] = 0;
     992:	10 92 2d 0a 	sts	0x0A2D, r1
				}

				((uint8ptr)&f23)[count] = usart1_buffer[usart1_index];
     996:	e0 91 8e 03 	lds	r30, 0x038E
     99a:	f0 91 8f 03 	lds	r31, 0x038F
     99e:	cc ec       	ldi	r28, 0xCC	; 204
     9a0:	ec 2e       	mov	r14, r28
     9a2:	c9 e0       	ldi	r28, 0x09	; 9
     9a4:	fc 2e       	mov	r15, r28
     9a6:	e4 0c       	add	r14, r4
     9a8:	f5 1c       	adc	r15, r5
     9aa:	e7 56       	subi	r30, 0x67	; 103
     9ac:	fc 4f       	sbci	r31, 0xFC	; 252
     9ae:	e0 81       	ld	r30, Z
     9b0:	e7 01       	movw	r28, r14
     9b2:	e8 83       	st	Y, r30
				checksum[count%2] = checksum[count%2]^usart1_buffer[usart1_index];
     9b4:	c1 2c       	mov	r12, r1
     9b6:	d1 2c       	mov	r13, r1
     9b8:	76 01       	movw	r14, r12
     9ba:	c3 94       	inc	r12
     9bc:	c4 20       	and	r12, r4
     9be:	d5 20       	and	r13, r5
     9c0:	e6 20       	and	r14, r6
     9c2:	f7 20       	and	r15, r7
     9c4:	e0 91 8e 03 	lds	r30, 0x038E
     9c8:	f0 91 8f 03 	lds	r31, 0x038F
     9cc:	0c e2       	ldi	r16, 0x2C	; 44
     9ce:	e0 2e       	mov	r14, r16
     9d0:	0a e0       	ldi	r16, 0x0A	; 10
     9d2:	f0 2e       	mov	r15, r16
     9d4:	ec 0c       	add	r14, r12
     9d6:	fd 1c       	adc	r15, r13
     9d8:	e7 56       	subi	r30, 0x67	; 103
     9da:	fc 4f       	sbci	r31, 0xFC	; 252
     9dc:	e7 01       	movw	r28, r14
     9de:	08 81       	ld	r16, Y
     9e0:	e0 81       	ld	r30, Z
     9e2:	0e 27       	eor	r16, r30
     9e4:	08 83       	st	Y, r16
				count++;
     9e6:	df ef       	ldi	r29, 0xFF	; 255
     9e8:	4d 1a       	sub	r4, r29
     9ea:	5d 0a       	sbc	r5, r29
     9ec:	6d 0a       	sbc	r6, r29
     9ee:	7d 0a       	sbc	r7, r29
     9f0:	40 92 82 07 	sts	0x0782, r4
     9f4:	50 92 83 07 	sts	0x0783, r5
     9f8:	60 92 84 07 	sts	0x0784, r6
     9fc:	70 92 85 07 	sts	0x0785, r7

				if (count == sizeof(gps_f23))
     a00:	e0 e6       	ldi	r30, 0x60	; 96
     a02:	4e 16       	cp	r4, r30
     a04:	51 04       	cpc	r5, r1
     a06:	61 04       	cpc	r6, r1
     a08:	71 04       	cpc	r7, r1
     a0a:	09 f0       	breq	.+2      	; 0xa0e <retrieve_gps_data+0x650>
     a0c:	56 c1       	rjmp	.+684    	; 0xcba <retrieve_gps_data+0x8fc>
				{
					count = 0;
     a0e:	10 92 82 07 	sts	0x0782, r1
     a12:	10 92 83 07 	sts	0x0783, r1
     a16:	10 92 84 07 	sts	0x0784, r1
     a1a:	10 92 85 07 	sts	0x0785, r1
					set_usart_state(usart1_flags, GPSI_CHKS5A);
     a1e:	f0 91 98 03 	lds	r31, 0x0398
     a22:	e0 91 98 03 	lds	r30, 0x0398
     a26:	ec 7f       	andi	r30, 0xFC	; 252
     a28:	ef 27       	eor	r30, r31
     a2a:	e4 65       	ori	r30, 0x54	; 84
     a2c:	7e cd       	rjmp	.-1284   	; 0x52a <retrieve_gps_data+0x16c>
				}
				break;


			case  GPSI_CHKS1A: // F00 Checksum Byte 0
				rec_checksum[0] = usart1_buffer[usart1_index];
     a2e:	e0 91 8e 03 	lds	r30, 0x038E
     a32:	f0 91 8f 03 	lds	r31, 0x038F
     a36:	e7 56       	subi	r30, 0x67	; 103
     a38:	fc 4f       	sbci	r31, 0xFC	; 252
     a3a:	e0 81       	ld	r30, Z
     a3c:	e0 93 c5 02 	sts	0x02C5, r30
				set_usart_state(usart1_flags, GPSI_CHKS1B);
     a40:	f0 91 98 03 	lds	r31, 0x0398
     a44:	e0 91 98 03 	lds	r30, 0x0398
     a48:	ec 7f       	andi	r30, 0xFC	; 252
     a4a:	ef 27       	eor	r30, r31
     a4c:	e8 63       	ori	r30, 0x38	; 56
     a4e:	6d cd       	rjmp	.-1318   	; 0x52a <retrieve_gps_data+0x16c>
				break;


			case  GPSI_CHKS1B: // F00 Checksum Byte 1
				rec_checksum[1] = usart1_buffer[usart1_index];
     a50:	e0 91 8e 03 	lds	r30, 0x038E
     a54:	f0 91 8f 03 	lds	r31, 0x038F
     a58:	e7 56       	subi	r30, 0x67	; 103
     a5a:	fc 4f       	sbci	r31, 0xFC	; 252
     a5c:	e0 81       	ld	r30, Z
     a5e:	e0 93 c6 02 	sts	0x02C6, r30

				if (rec_checksum[0] != checksum[0] || rec_checksum[1] != checksum[1])
     a62:	00 91 c5 02 	lds	r16, 0x02C5
     a66:	f0 91 2c 0a 	lds	r31, 0x0A2C
     a6a:	0f 13       	cpse	r16, r31
     a6c:	05 c0       	rjmp	.+10     	; 0xa78 <retrieve_gps_data+0x6ba>
     a6e:	f0 91 2d 0a 	lds	r31, 0x0A2D
     a72:	ef 17       	cp	r30, r31
     a74:	09 f4       	brne	.+2      	; 0xa78 <retrieve_gps_data+0x6ba>
     a76:	a4 c0       	rjmp	.+328    	; 0xbc0 <retrieve_gps_data+0x802>
					memset(&f00, 0x00, sizeof(gps_f00));	// Checksum failed - Write zeros to F00
     a78:	ed 01       	movw	r28, r26
     a7a:	e8 e4       	ldi	r30, 0x48	; 72
     a7c:	9e c0       	rjmp	.+316    	; 0xbba <retrieve_gps_data+0x7fc>
				set_usart_state(usart1_flags, GPSI_DONE);
				break;


			case  GPSI_CHKS2A: // F03 Checksum Byte 0
				rec_checksum[0] = usart1_buffer[usart1_index];
     a7e:	e0 91 8e 03 	lds	r30, 0x038E
     a82:	f0 91 8f 03 	lds	r31, 0x038F
     a86:	e7 56       	subi	r30, 0x67	; 103
     a88:	fc 4f       	sbci	r31, 0xFC	; 252
     a8a:	e0 81       	ld	r30, Z
     a8c:	e0 93 c5 02 	sts	0x02C5, r30
				set_usart_state(usart1_flags, GPSI_CHKS2B);
     a90:	f0 91 98 03 	lds	r31, 0x0398
     a94:	e0 91 98 03 	lds	r30, 0x0398
     a98:	ec 7f       	andi	r30, 0xFC	; 252
     a9a:	ef 27       	eor	r30, r31
     a9c:	e0 64       	ori	r30, 0x40	; 64
     a9e:	45 cd       	rjmp	.-1398   	; 0x52a <retrieve_gps_data+0x16c>
				break;


			case  GPSI_CHKS2B: // F03 Checksum Byte 1
				rec_checksum[1] = usart1_buffer[usart1_index];
     aa0:	e0 91 8e 03 	lds	r30, 0x038E
     aa4:	f0 91 8f 03 	lds	r31, 0x038F
     aa8:	e7 56       	subi	r30, 0x67	; 103
     aaa:	fc 4f       	sbci	r31, 0xFC	; 252
     aac:	e0 81       	ld	r30, Z
     aae:	e0 93 c6 02 	sts	0x02C6, r30

				if (rec_checksum[0] != checksum[0] || rec_checksum[1] != checksum[1])
     ab2:	00 91 c5 02 	lds	r16, 0x02C5
     ab6:	f0 91 2c 0a 	lds	r31, 0x0A2C
     aba:	0f 13       	cpse	r16, r31
     abc:	05 c0       	rjmp	.+10     	; 0xac8 <retrieve_gps_data+0x70a>
     abe:	f0 91 2d 0a 	lds	r31, 0x0A2D
     ac2:	ef 17       	cp	r30, r31
     ac4:	09 f4       	brne	.+2      	; 0xac8 <retrieve_gps_data+0x70a>
     ac6:	7c c0       	rjmp	.+248    	; 0xbc0 <retrieve_gps_data+0x802>
					memset(&f03, 0x00, sizeof(gps_f03));	// Checksum failed - Write zeros to F03
     ac8:	cd ee       	ldi	r28, 0xED	; 237
     aca:	d1 e0       	ldi	r29, 0x01	; 1
     acc:	e8 ed       	ldi	r30, 0xD8	; 216
     ace:	75 c0       	rjmp	.+234    	; 0xbba <retrieve_gps_data+0x7fc>
				set_usart_state(usart1_flags, GPSI_DONE);
				break;


			case  GPSI_CHKS3A: // F18 Checksum Byte 0
				rec_checksum[0] = usart1_buffer[usart1_index];
     ad0:	e0 91 8e 03 	lds	r30, 0x038E
     ad4:	f0 91 8f 03 	lds	r31, 0x038F
     ad8:	e7 56       	subi	r30, 0x67	; 103
     ada:	fc 4f       	sbci	r31, 0xFC	; 252
     adc:	e0 81       	ld	r30, Z
     ade:	e0 93 c5 02 	sts	0x02C5, r30
				set_usart_state(usart1_flags, GPSI_CHKS3B);
     ae2:	f0 91 98 03 	lds	r31, 0x0398
     ae6:	e0 91 98 03 	lds	r30, 0x0398
     aea:	ec 7f       	andi	r30, 0xFC	; 252
     aec:	ef 27       	eor	r30, r31
     aee:	e8 64       	ori	r30, 0x48	; 72
     af0:	1c cd       	rjmp	.-1480   	; 0x52a <retrieve_gps_data+0x16c>
				break;


			case  GPSI_CHKS3B: // F18 Checksum Byte 1
				rec_checksum[1] = usart1_buffer[usart1_index];
     af2:	e0 91 8e 03 	lds	r30, 0x038E
     af6:	f0 91 8f 03 	lds	r31, 0x038F
     afa:	e7 56       	subi	r30, 0x67	; 103
     afc:	fc 4f       	sbci	r31, 0xFC	; 252
     afe:	e0 81       	ld	r30, Z
     b00:	e0 93 c6 02 	sts	0x02C6, r30
				
				if (rec_checksum[0] != checksum[0] || rec_checksum[1] != checksum[1])
     b04:	00 91 c5 02 	lds	r16, 0x02C5
     b08:	f0 91 2c 0a 	lds	r31, 0x0A2C
     b0c:	0f 13       	cpse	r16, r31
     b0e:	05 c0       	rjmp	.+10     	; 0xb1a <retrieve_gps_data+0x75c>
     b10:	f0 91 2d 0a 	lds	r31, 0x0A2D
     b14:	ef 17       	cp	r30, r31
     b16:	09 f4       	brne	.+2      	; 0xb1a <retrieve_gps_data+0x75c>
     b18:	53 c0       	rjmp	.+166    	; 0xbc0 <retrieve_gps_data+0x802>
					memset(&f18, 0x00, sizeof(gps_f18));	// Checksum failed - Write zeros to F18
     b1a:	e1 01       	movw	r28, r2
     b1c:	e9 2f       	mov	r30, r25
     b1e:	4d c0       	rjmp	.+154    	; 0xbba <retrieve_gps_data+0x7fc>
				set_usart_state(usart1_flags, GPSI_DONE);
				break;


			case  GPSI_CHKS4A: // F22 Checksum Byte 0
				rec_checksum[0] = usart1_buffer[usart1_index];
     b20:	e0 91 8e 03 	lds	r30, 0x038E
     b24:	f0 91 8f 03 	lds	r31, 0x038F
     b28:	e7 56       	subi	r30, 0x67	; 103
     b2a:	fc 4f       	sbci	r31, 0xFC	; 252
     b2c:	e0 81       	ld	r30, Z
     b2e:	e0 93 c5 02 	sts	0x02C5, r30
				set_usart_state(usart1_flags, GPSI_CHKS4B);
     b32:	f0 91 98 03 	lds	r31, 0x0398
     b36:	e0 91 98 03 	lds	r30, 0x0398
     b3a:	ec 7f       	andi	r30, 0xFC	; 252
     b3c:	ef 27       	eor	r30, r31
     b3e:	e0 65       	ori	r30, 0x50	; 80
     b40:	f4 cc       	rjmp	.-1560   	; 0x52a <retrieve_gps_data+0x16c>
				break;


			case  GPSI_CHKS4B: // F22 Checksum Byte 1
				rec_checksum[1] = usart1_buffer[usart1_index];
     b42:	e0 91 8e 03 	lds	r30, 0x038E
     b46:	f0 91 8f 03 	lds	r31, 0x038F
     b4a:	e7 56       	subi	r30, 0x67	; 103
     b4c:	fc 4f       	sbci	r31, 0xFC	; 252
     b4e:	e0 81       	ld	r30, Z
     b50:	e0 93 c6 02 	sts	0x02C6, r30

				if (rec_checksum[0] != checksum[0] || rec_checksum[1] != checksum[1])
     b54:	00 91 c5 02 	lds	r16, 0x02C5
     b58:	f0 91 2c 0a 	lds	r31, 0x0A2C
     b5c:	0f 13       	cpse	r16, r31
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <retrieve_gps_data+0x7aa>
     b60:	f0 91 2d 0a 	lds	r31, 0x0A2D
     b64:	ef 17       	cp	r30, r31
     b66:	61 f1       	breq	.+88     	; 0xbc0 <retrieve_gps_data+0x802>
					memset(&f22, 0x00, sizeof(gps_f22));	// Checksum failed - Write zeros to F22
     b68:	e5 01       	movw	r28, r10
     b6a:	e7 2f       	mov	r30, r23
     b6c:	26 c0       	rjmp	.+76     	; 0xbba <retrieve_gps_data+0x7fc>
				set_usart_state(usart1_flags, GPSI_DONE);
				break;


			case  GPSI_CHKS5A: // F23 Checksum Byte 0
				rec_checksum[0] = usart1_buffer[usart1_index];
     b6e:	e0 91 8e 03 	lds	r30, 0x038E
     b72:	f0 91 8f 03 	lds	r31, 0x038F
     b76:	e7 56       	subi	r30, 0x67	; 103
     b78:	fc 4f       	sbci	r31, 0xFC	; 252
     b7a:	e0 81       	ld	r30, Z
     b7c:	e0 93 c5 02 	sts	0x02C5, r30
				set_usart_state(usart1_flags, GPSI_CHKS5B);
     b80:	f0 91 98 03 	lds	r31, 0x0398
     b84:	e0 91 98 03 	lds	r30, 0x0398
     b88:	ec 7f       	andi	r30, 0xFC	; 252
     b8a:	ef 27       	eor	r30, r31
     b8c:	e8 65       	ori	r30, 0x58	; 88
     b8e:	cd cc       	rjmp	.-1638   	; 0x52a <retrieve_gps_data+0x16c>
				break;


			case  GPSI_CHKS5B: // F23 Checksum Byte 1
				rec_checksum[1] = usart1_buffer[usart1_index];
     b90:	e0 91 8e 03 	lds	r30, 0x038E
     b94:	f0 91 8f 03 	lds	r31, 0x038F
     b98:	e7 56       	subi	r30, 0x67	; 103
     b9a:	fc 4f       	sbci	r31, 0xFC	; 252
     b9c:	e0 81       	ld	r30, Z
     b9e:	e0 93 c6 02 	sts	0x02C6, r30

				if (rec_checksum[0] != checksum[0] || rec_checksum[1] != checksum[1])
     ba2:	00 91 c5 02 	lds	r16, 0x02C5
     ba6:	f0 91 2c 0a 	lds	r31, 0x0A2C
     baa:	0f 13       	cpse	r16, r31
     bac:	04 c0       	rjmp	.+8      	; 0xbb6 <retrieve_gps_data+0x7f8>
     bae:	f0 91 2d 0a 	lds	r31, 0x0A2D
     bb2:	ef 17       	cp	r30, r31
     bb4:	29 f0       	breq	.+10     	; 0xbc0 <retrieve_gps_data+0x802>
					memset(&f23, 0x00, sizeof(gps_f23));	// Checksum failed - Write zeros to F23
     bb6:	e4 01       	movw	r28, r8
     bb8:	e2 2f       	mov	r30, r18
     bba:	19 92       	st	Y+, r1
     bbc:	ea 95       	dec	r30
     bbe:	e9 f7       	brne	.-6      	; 0xbba <retrieve_gps_data+0x7fc>

				set_usart_state(usart1_flags, GPSI_DONE);
     bc0:	f0 91 98 03 	lds	r31, 0x0398
     bc4:	e0 91 98 03 	lds	r30, 0x0398
     bc8:	ec 7f       	andi	r30, 0xFC	; 252
     bca:	ef 27       	eor	r30, r31
     bcc:	ec 65       	ori	r30, 0x5C	; 92
     bce:	ad cc       	rjmp	.-1702   	; 0x52a <retrieve_gps_data+0x16c>
				break;


			case  GPSI_DONE:
				if (usart1_buffer[usart1_index] == GPSI_END)
     bd0:	e0 91 8e 03 	lds	r30, 0x038E
     bd4:	f0 91 8f 03 	lds	r31, 0x038F
     bd8:	e7 56       	subi	r30, 0x67	; 103
     bda:	fc 4f       	sbci	r31, 0xFC	; 252
     bdc:	e0 81       	ld	r30, Z
     bde:	e3 30       	cpi	r30, 0x03	; 3
     be0:	09 f0       	breq	.+2      	; 0xbe4 <retrieve_gps_data+0x826>
     be2:	5d c0       	rjmp	.+186    	; 0xc9e <retrieve_gps_data+0x8e0>
				{
					

					
					if (rx_id[1] == '0' && rx_id[2] == '0')
     be4:	e0 91 2f 0a 	lds	r30, 0x0A2F
     be8:	f0 91 30 0a 	lds	r31, 0x0A30
     bec:	e0 33       	cpi	r30, 0x30	; 48
     bee:	61 f4       	brne	.+24     	; 0xc08 <retrieve_gps_data+0x84a>
     bf0:	f0 33       	cpi	r31, 0x30	; 48
     bf2:	51 f4       	brne	.+20     	; 0xc08 <retrieve_gps_data+0x84a>
					{
						order = GPSI_ORDER_F00;
     bf4:	10 92 00 01 	sts	0x0100, r1

						rem_gen_state(error, GPSI_ERR_1); // F00 received ok
     bf8:	e0 91 ca 09 	lds	r30, 0x09CA
     bfc:	e7 7f       	andi	r30, 0xF7	; 247
     bfe:	e0 93 ca 09 	sts	0x09CA, r30
						f00_ready = 1;
     c02:	80 93 81 07 	sts	0x0781, r24
     c06:	41 c0       	rjmp	.+130    	; 0xc8a <retrieve_gps_data+0x8cc>
						#endif


					}

					else if (rx_id[2] == '3' && rx_id[1] == '0')
     c08:	f3 33       	cpi	r31, 0x33	; 51
     c0a:	69 f4       	brne	.+26     	; 0xc26 <retrieve_gps_data+0x868>
     c0c:	e0 33       	cpi	r30, 0x30	; 48
     c0e:	09 f0       	breq	.+2      	; 0xc12 <retrieve_gps_data+0x854>
     c10:	8a c0       	rjmp	.+276    	; 0xd26 <retrieve_gps_data+0x968>
					{
						if (order == GPSI_ORDER_F00)
     c12:	e0 91 00 01 	lds	r30, 0x0100
     c16:	e1 11       	cpse	r30, r1
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <retrieve_gps_data+0x860>
							order = GPSI_ORDER_F03;
     c1a:	60 93 00 01 	sts	0x0100, r22

						rem_gen_state(error, GPSI_ERR_2); // F03 received ok
     c1e:	e0 91 ca 09 	lds	r30, 0x09CA
     c22:	ef 7e       	andi	r30, 0xEF	; 239
     c24:	0d c0       	rjmp	.+26     	; 0xc40 <retrieve_gps_data+0x882>
					}
					
					else if (rx_id[1] == '1' && rx_id[2] == '8')
     c26:	e1 33       	cpi	r30, 0x31	; 49
     c28:	71 f4       	brne	.+28     	; 0xc46 <retrieve_gps_data+0x888>
     c2a:	f8 33       	cpi	r31, 0x38	; 56
     c2c:	c1 f5       	brne	.+112    	; 0xc9e <retrieve_gps_data+0x8e0>
					{
						if (order == GPSI_ORDER_F03)
     c2e:	e0 91 00 01 	lds	r30, 0x0100
     c32:	e3 30       	cpi	r30, 0x03	; 3
     c34:	11 f4       	brne	.+4      	; 0xc3a <retrieve_gps_data+0x87c>
							order = GPSI_ORDER_F18;
     c36:	50 93 00 01 	sts	0x0100, r21

						rem_gen_state(error, GPSI_ERR_3); // F18 received ok
     c3a:	e0 91 ca 09 	lds	r30, 0x09CA
     c3e:	ef 7d       	andi	r30, 0xDF	; 223
     c40:	e0 93 ca 09 	sts	0x09CA, r30
     c44:	22 c0       	rjmp	.+68     	; 0xc8a <retrieve_gps_data+0x8cc>
					}
					
					else if (rx_id[1] == '2' && rx_id[2] == '2')
     c46:	e2 33       	cpi	r30, 0x32	; 50
     c48:	d9 f4       	brne	.+54     	; 0xc80 <retrieve_gps_data+0x8c2>
     c4a:	f2 33       	cpi	r31, 0x32	; 50
     c4c:	09 f0       	breq	.+2      	; 0xc50 <retrieve_gps_data+0x892>
     c4e:	6e c0       	rjmp	.+220    	; 0xd2c <retrieve_gps_data+0x96e>
					{
						if (order == GPSI_ORDER_F18)
     c50:	e0 91 00 01 	lds	r30, 0x0100
     c54:	e8 31       	cpi	r30, 0x18	; 24
     c56:	11 f4       	brne	.+4      	; 0xc5c <retrieve_gps_data+0x89e>
							order = GPSI_ORDER_F22;
     c58:	40 93 00 01 	sts	0x0100, r20

						rem_gen_state(error, GPSI_ERR_4); // F22 received ok
     c5c:	e0 91 ca 09 	lds	r30, 0x09CA
     c60:	ef 7b       	andi	r30, 0xBF	; 191
     c62:	ee cf       	rjmp	.-36     	; 0xc40 <retrieve_gps_data+0x882>
					}
					
					else if (rx_id[2] == '3' && rx_id[1] == '2')
					{
						if (order == GPSI_ORDER_F22)
     c64:	e0 91 00 01 	lds	r30, 0x0100
     c68:	e2 32       	cpi	r30, 0x22	; 34
     c6a:	11 f4       	brne	.+4      	; 0xc70 <retrieve_gps_data+0x8b2>
							order = GPSI_ORDER_F23;
     c6c:	30 93 00 01 	sts	0x0100, r19

						rem_gen_state(error, GPSI_ERR_5); // F23 received ok
     c70:	e0 91 ca 09 	lds	r30, 0x09CA
     c74:	ef 77       	andi	r30, 0x7F	; 127
     c76:	e0 93 ca 09 	sts	0x09CA, r30
						gpsi_ready = 1;		
     c7a:	80 93 cb 09 	sts	0x09CB, r24
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <retrieve_gps_data+0x8cc>

					}
					
					
					else if (rx_id[1] == '9' && rx_id[2] == '9') {} // preliminary sentence
     c80:	e9 33       	cpi	r30, 0x39	; 57
     c82:	69 f4       	brne	.+26     	; 0xc9e <retrieve_gps_data+0x8e0>
     c84:	f9 33       	cpi	r31, 0x39	; 57
     c86:	09 f0       	breq	.+2      	; 0xc8a <retrieve_gps_data+0x8cc>
     c88:	0a c0       	rjmp	.+20     	; 0xc9e <retrieve_gps_data+0x8e0>
						set_usart_state(usart1_flags, GPSI_UNKNOWN);
						set_gen_state(error, GPSI_ERR_GEN);
						break;
					}

					set_usart_state(usart1_flags, GPSI_UNKNOWN);
     c8a:	f0 91 98 03 	lds	r31, 0x0398
     c8e:	e0 91 98 03 	lds	r30, 0x0398
     c92:	ec 7f       	andi	r30, 0xFC	; 252
     c94:	ef 27       	eor	r30, r31
     c96:	e4 60       	ori	r30, 0x04	; 4
     c98:	e0 93 98 03 	sts	0x0398, r30
     c9c:	68 cc       	rjmp	.-1840   	; 0x56e <retrieve_gps_data+0x1b0>
				}
				break;


			default:
				set_usart_state(usart1_flags, GPSI_UNKNOWN);
     c9e:	f0 91 98 03 	lds	r31, 0x0398
     ca2:	e0 91 98 03 	lds	r30, 0x0398
     ca6:	ec 7f       	andi	r30, 0xFC	; 252
     ca8:	ef 27       	eor	r30, r31
     caa:	e4 60       	ori	r30, 0x04	; 4
     cac:	e0 93 98 03 	sts	0x0398, r30
				set_gen_state(error, GPSI_ERR_GEN);
     cb0:	e0 91 ca 09 	lds	r30, 0x09CA
     cb4:	e4 60       	ori	r30, 0x04	; 4
     cb6:	e0 93 ca 09 	sts	0x09CA, r30
				break;
		}

		if (order == GPSI_ORDER_F23)	// All sentences received successfully
     cba:	e0 91 00 01 	lds	r30, 0x0100
     cbe:	e3 32       	cpi	r30, 0x23	; 35
     cc0:	49 f4       	brne	.+18     	; 0xcd4 <retrieve_gps_data+0x916>
		{
			
			deadSecs		= 0;	// It's alive
     cc2:	10 92 c8 02 	sts	0x02C8, r1
     cc6:	10 92 c7 02 	sts	0x02C7, r1
			rem_gen_state(error, GPSI_ERR_DEAD);
     cca:	e0 91 ca 09 	lds	r30, 0x09CA
     cce:	ee 7f       	andi	r30, 0xFE	; 254
     cd0:	e0 93 ca 09 	sts	0x09CA, r30
void retrieve_gps_data()
{
	// The buffer is circular, so when the loop gets to the end, it just
	// sets back to index 0 and continues until it reaches usart1_snapshot
	// This helps to prevent unwanted loss of data
	for (; usart1_index != usart1_snapshot; usart1_index = (usart1_index+1 < usart1_buffer_size ? usart1_index+1 : 0))
     cd4:	e0 91 8e 03 	lds	r30, 0x038E
     cd8:	f0 91 8f 03 	lds	r31, 0x038F
     cdc:	31 96       	adiw	r30, 0x01	; 1
     cde:	e8 3e       	cpi	r30, 0xE8	; 232
     ce0:	f3 40       	sbci	r31, 0x03	; 3
     ce2:	30 f4       	brcc	.+12     	; 0xcf0 <retrieve_gps_data+0x932>
     ce4:	e0 91 8e 03 	lds	r30, 0x038E
     ce8:	f0 91 8f 03 	lds	r31, 0x038F
     cec:	31 96       	adiw	r30, 0x01	; 1
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <retrieve_gps_data+0x936>
     cf0:	e0 e0       	ldi	r30, 0x00	; 0
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	f0 93 8f 03 	sts	0x038F, r31
     cf8:	e0 93 8e 03 	sts	0x038E, r30
     cfc:	e0 90 8e 03 	lds	r14, 0x038E
     d00:	f0 90 8f 03 	lds	r15, 0x038F
     d04:	e0 91 01 01 	lds	r30, 0x0101
     d08:	f0 91 02 01 	lds	r31, 0x0102
     d0c:	ee 16       	cp	r14, r30
     d0e:	ff 06       	cpc	r15, r31
     d10:	09 f0       	breq	.+2      	; 0xd14 <retrieve_gps_data+0x956>
     d12:	7f cb       	rjmp	.-2306   	; 0x412 <retrieve_gps_data+0x54>
     d14:	13 c0       	rjmp	.+38     	; 0xd3c <retrieve_gps_data+0x97e>
			case  GPSI_ID3:
				rx_id[2] = usart1_buffer[usart1_index];
				rem_gen_state(error, GPSI_ERR_GEN);
				if (rx_id[1] == '0' && rx_id[2] == '0')			// F00
					set_usart_state(usart1_flags, GPSI_S1);
				else if (rx_id[2] == '3' && rx_id[1] == '0')	// F03
     d16:	e3 33       	cpi	r30, 0x33	; 51
     d18:	09 f0       	breq	.+2      	; 0xd1c <retrieve_gps_data+0x95e>
     d1a:	a3 cc       	rjmp	.-1722   	; 0x662 <retrieve_gps_data+0x2a4>
     d1c:	6b cc       	rjmp	.-1834   	; 0x5f4 <retrieve_gps_data+0x236>
					set_usart_state(usart1_flags, GPSI_S2);
				else if (rx_id[1] == '1' && rx_id[2] == '8')	// F18
					set_usart_state(usart1_flags, GPSI_S3);
				else if (rx_id[1] == '2' && rx_id[2] == '2')	// F22
					set_usart_state(usart1_flags, GPSI_S4);
				else if (rx_id[2] == '3' && rx_id[1] == '2')	// F23
     d1e:	e3 33       	cpi	r30, 0x33	; 51
     d20:	09 f0       	breq	.+2      	; 0xd24 <retrieve_gps_data+0x966>
     d22:	9f cc       	rjmp	.-1730   	; 0x662 <retrieve_gps_data+0x2a4>
     d24:	8a cc       	rjmp	.-1772   	; 0x63a <retrieve_gps_data+0x27c>
							order = GPSI_ORDER_F03;

						rem_gen_state(error, GPSI_ERR_2); // F03 received ok
					}
					
					else if (rx_id[1] == '1' && rx_id[2] == '8')
     d26:	e1 33       	cpi	r30, 0x31	; 49
     d28:	29 f4       	brne	.+10     	; 0xd34 <retrieve_gps_data+0x976>
     d2a:	b9 cf       	rjmp	.-142    	; 0xc9e <retrieve_gps_data+0x8e0>
							order = GPSI_ORDER_F22;

						rem_gen_state(error, GPSI_ERR_4); // F22 received ok
					}
					
					else if (rx_id[2] == '3' && rx_id[1] == '2')
     d2c:	f3 33       	cpi	r31, 0x33	; 51
     d2e:	09 f0       	breq	.+2      	; 0xd32 <retrieve_gps_data+0x974>
     d30:	b6 cf       	rjmp	.-148    	; 0xc9e <retrieve_gps_data+0x8e0>
     d32:	98 cf       	rjmp	.-208    	; 0xc64 <retrieve_gps_data+0x8a6>
							order = GPSI_ORDER_F18;

						rem_gen_state(error, GPSI_ERR_3); // F18 received ok
					}
					
					else if (rx_id[1] == '2' && rx_id[2] == '2')
     d34:	e2 33       	cpi	r30, 0x32	; 50
     d36:	09 f0       	breq	.+2      	; 0xd3a <retrieve_gps_data+0x97c>
     d38:	a3 cf       	rjmp	.-186    	; 0xc80 <retrieve_gps_data+0x8c2>
     d3a:	94 cf       	rjmp	.-216    	; 0xc64 <retrieve_gps_data+0x8a6>
			deadSecs		= 0;	// It's alive
			rem_gen_state(error, GPSI_ERR_DEAD);
			
		}
	}
}
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	cf 90       	pop	r12
     d4c:	bf 90       	pop	r11
     d4e:	af 90       	pop	r10
     d50:	9f 90       	pop	r9
     d52:	8f 90       	pop	r8
     d54:	7f 90       	pop	r7
     d56:	6f 90       	pop	r6
     d58:	5f 90       	pop	r5
     d5a:	4f 90       	pop	r4
     d5c:	3f 90       	pop	r3
     d5e:	2f 90       	pop	r2
     d60:	08 95       	ret

00000d62 <check_pgood>:

// PGOOD is an input from the receiver on pin PA3
void check_pgood()
{

	if (getbit(PINA, PINA3)) // PGOOD pin HIGH
     d62:	89 b3       	in	r24, 0x19	; 25
     d64:	63 e0       	ldi	r22, 0x03	; 3
     d66:	0e 94 a5 00 	call	0x14a	; 0x14a <getbit>
     d6a:	90 91 ca 09 	lds	r25, 0x09CA
     d6e:	88 23       	and	r24, r24
     d70:	11 f0       	breq	.+4      	; 0xd76 <check_pgood+0x14>
		rem_gen_state(error, GPSI_ERR_PGOOD);
     d72:	9d 7f       	andi	r25, 0xFD	; 253
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <check_pgood+0x16>
	else
		set_gen_state(error, GPSI_ERR_PGOOD);
     d76:	92 60       	ori	r25, 0x02	; 2
     d78:	90 93 ca 09 	sts	0x09CA, r25
     d7c:	08 95       	ret

00000d7e <check_time>:
}

// Check time since last sync with receiver 
void check_time()
{
	if (deadSecs >= RECEIVER_DEAD_TIME) 	// Receiver is dead after DEAD_TIME seconds
     d7e:	80 91 c7 02 	lds	r24, 0x02C7
     d82:	90 91 c8 02 	lds	r25, 0x02C8
     d86:	20 91 ca 09 	lds	r18, 0x09CA
     d8a:	8c 32       	cpi	r24, 0x2C	; 44
     d8c:	91 40       	sbci	r25, 0x01	; 1
     d8e:	40 f0       	brcs	.+16     	; 0xda0 <check_time+0x22>
	{
		deadSecs = 100*RECEIVER_DEAD_TIME;		// avoid overflow on deadSecs
     d90:	80 e3       	ldi	r24, 0x30	; 48
     d92:	95 e7       	ldi	r25, 0x75	; 117
     d94:	90 93 c8 02 	sts	0x02C8, r25
     d98:	80 93 c7 02 	sts	0x02C7, r24
		set_gen_state(error, GPSI_ERR_DEAD);
     d9c:	21 60       	ori	r18, 0x01	; 1
     d9e:	01 c0       	rjmp	.+2      	; 0xda2 <check_time+0x24>
	}
	else
		rem_gen_state(error, GPSI_ERR_DEAD);
     da0:	2e 7f       	andi	r18, 0xFE	; 254
     da2:	20 93 ca 09 	sts	0x09CA, r18
     da6:	08 95       	ret

00000da8 <send_VCP_data>:
}


void send_VCP_data()	// VCP
{
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <send_VCP_data+0xa>
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <send_VCP_data+0xc>
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
	uint32 size = usart0_buffer_size;
     db8:	84 ef       	ldi	r24, 0xF4	; 244
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	a0 e0       	ldi	r26, 0x00	; 0
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	89 83       	std	Y+1, r24	; 0x01
     dc2:	9a 83       	std	Y+2, r25	; 0x02
     dc4:	ab 83       	std	Y+3, r26	; 0x03
     dc6:	bc 83       	std	Y+4, r27	; 0x04
	
	// create VCP frame in the transmit buffer
	uint8_t VCP_tx_status = Create_VCP_frame(	usart0_buffer, 
     dc8:	00 e5       	ldi	r16, 0x50	; 80
     dca:	10 e0       	ldi	r17, 0x00	; 0
     dcc:	2a e7       	ldi	r18, 0x7A	; 122
     dce:	39 e0       	ldi	r19, 0x09	; 9
     dd0:	43 e0       	ldi	r20, 0x03	; 3
     dd2:	be 01       	movw	r22, r28
     dd4:	6f 5f       	subi	r22, 0xFF	; 255
     dd6:	7f 4f       	sbci	r23, 0xFF	; 255
     dd8:	86 e8       	ldi	r24, 0x86	; 134
     dda:	97 e0       	ldi	r25, 0x07	; 7
     ddc:	0e 94 cb 00 	call	0x196	; 0x196 <Create_VCP_frame>
												sizeof(gps_packet));

	if (VCP_tx_status == VCP_OVR_ERR)	{}
	if (VCP_tx_status == VCP_NULL_ERR)	{}
	if (VCP_tx_status == VCP_ADDR_ERR)	{}
	if (VCP_tx_status == VCP_TERM)			// Done with no errors
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	59 f4       	brne	.+22     	; 0xdfa <send_VCP_data+0x52>
	{
		usart0_index = 0;				// reset index
     de4:	10 92 ca 02 	sts	0x02CA, r1
     de8:	10 92 c9 02 	sts	0x02C9, r1
		usart0_complete = size;			// packet length
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	9a 81       	ldd	r25, Y+2	; 0x02
     df0:	90 93 45 03 	sts	0x0345, r25
     df4:	80 93 44 03 	sts	0x0344, r24
// usart0
void usart0_initialize(uint32 ubrr);

inline void usart0_rx_interrupt_enable()  { UCSR0B |= (1<<RXCIE0);	}
inline void usart0_rx_interrupt_disable() { UCSR0B &= ~(1<<RXCIE0);	}
inline void usart0_tx_interrupt_enable()  { UCSR0B |= (1<<UDRIE0);	}
     df8:	55 9a       	sbi	0x0a, 5	; 10
		usart0_tx_interrupt_enable();	// enable interrupt to start transmission
	}			
}
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	08 95       	ret

00000e0c <main>:


// Main
int main()
{
	initialize();
     e0c:	0e 94 92 01 	call	0x324	; 0x324 <initialize>


// usart1
void usart1_initialize(uint32 ubrr);

inline void usart1_rx_interrupt_enable()  { UCSR1B |= (1<<RXCIE1);	}
     e10:	80 91 9a 00 	lds	r24, 0x009A
     e14:	80 68       	ori	r24, 0x80	; 128
     e16:	80 93 9a 00 	sts	0x009A, r24

	usart1_rx_interrupt_enable();

	set_usart_state(usart1_flags, GPSI_UNKNOWN);
     e1a:	90 91 98 03 	lds	r25, 0x0398
     e1e:	80 91 98 03 	lds	r24, 0x0398
     e22:	8c 7f       	andi	r24, 0xFC	; 252
     e24:	89 27       	eor	r24, r25
     e26:	84 60       	ori	r24, 0x04	; 4
     e28:	80 93 98 03 	sts	0x0398, r24

	for (;;)	// Loooooop
	{
		if (usart0_flags & USART_TX_COMPLETE)
		{
			usart0_flags ^= USART_TX_COMPLETE;
     e2c:	12 e0       	ldi	r17, 0x02	; 2
			check_time();
			

			// pack
			tx_packet.packet_status = error;
			tx_packet.packet_telem = telem;
     e2e:	07 e0       	ldi	r16, 0x07	; 7
			set_gen_state(error, GPSI_ERR_3);
			set_gen_state(error, GPSI_ERR_4);
			set_gen_state(error, GPSI_ERR_5);
			
			// trigger ADC sampling
			sample_ADC = 1;				
     e30:	c1 e0       	ldi	r28, 0x01	; 1
			tx_packet.packet_status = error;
			tx_packet.packet_telem = telem;
			if (watchdog_transmit)	// No sync with receiver - Write zeros to F00
				memset(&tx_packet.packet_f00, 0x00, sizeof(gps_f00));	
			else
				tx_packet.packet_f00 = f00;
     e32:	d8 e4       	ldi	r29, 0x48	; 72

	set_usart_state(usart1_flags, GPSI_UNKNOWN);

	for (;;)	// Loooooop
	{
		if (usart0_flags & USART_TX_COMPLETE)
     e34:	80 91 31 0a 	lds	r24, 0x0A31
     e38:	81 ff       	sbrs	r24, 1
     e3a:	05 c0       	rjmp	.+10     	; 0xe46 <main+0x3a>
		{
			usart0_flags ^= USART_TX_COMPLETE;
     e3c:	80 91 31 0a 	lds	r24, 0x0A31
     e40:	81 27       	eor	r24, r17
     e42:	80 93 31 0a 	sts	0x0A31, r24
		}
		
		if (f00_ready || watchdog_transmit)
     e46:	80 91 81 07 	lds	r24, 0x0781
     e4a:	81 11       	cpse	r24, r1
     e4c:	04 c0       	rjmp	.+8      	; 0xe56 <main+0x4a>
     e4e:	80 91 97 03 	lds	r24, 0x0397
     e52:	88 23       	and	r24, r24
     e54:	99 f1       	breq	.+102    	; 0xebc <main+0xb0>
		{
			
			check_pgood();
     e56:	0e 94 b1 06 	call	0xd62	; 0xd62 <check_pgood>
			check_time();
     e5a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <check_time>
			

			// pack
			tx_packet.packet_status = error;
     e5e:	80 91 ca 09 	lds	r24, 0x09CA
     e62:	80 93 7a 09 	sts	0x097A, r24
			tx_packet.packet_telem = telem;
     e66:	e0 e9       	ldi	r30, 0x90	; 144
     e68:	f3 e0       	ldi	r31, 0x03	; 3
     e6a:	ab e7       	ldi	r26, 0x7B	; 123
     e6c:	b9 e0       	ldi	r27, 0x09	; 9
     e6e:	80 2f       	mov	r24, r16
     e70:	01 90       	ld	r0, Z+
     e72:	0d 92       	st	X+, r0
     e74:	8a 95       	dec	r24
     e76:	e1 f7       	brne	.-8      	; 0xe70 <main+0x64>
			if (watchdog_transmit)	// No sync with receiver - Write zeros to F00
     e78:	80 91 97 03 	lds	r24, 0x0397
     e7c:	88 23       	and	r24, r24
     e7e:	41 f0       	breq	.+16     	; 0xe90 <main+0x84>
				memset(&tx_packet.packet_f00, 0x00, sizeof(gps_f00));	
     e80:	e2 e8       	ldi	r30, 0x82	; 130
     e82:	f9 e0       	ldi	r31, 0x09	; 9
     e84:	df 01       	movw	r26, r30
     e86:	8d 2f       	mov	r24, r29
     e88:	1d 92       	st	X+, r1
     e8a:	8a 95       	dec	r24
     e8c:	e9 f7       	brne	.-6      	; 0xe88 <main+0x7c>
     e8e:	09 c0       	rjmp	.+18     	; 0xea2 <main+0x96>
			else
				tx_packet.packet_f00 = f00;
     e90:	e6 e4       	ldi	r30, 0x46	; 70
     e92:	f3 e0       	ldi	r31, 0x03	; 3
     e94:	a2 e8       	ldi	r26, 0x82	; 130
     e96:	b9 e0       	ldi	r27, 0x09	; 9
     e98:	8d 2f       	mov	r24, r29
     e9a:	01 90       	ld	r0, Z+
     e9c:	0d 92       	st	X+, r0
     e9e:	8a 95       	dec	r24
     ea0:	e1 f7       	brne	.-8      	; 0xe9a <main+0x8e>

			// reset all the triggers
			f00_ready = 0;
     ea2:	10 92 81 07 	sts	0x0781, r1
			watchdog_transmit = 0;
     ea6:	10 92 97 03 	sts	0x0397, r1
				((uint8ptr)&tx_packet.packet_f00)[71] = 0xFF;		// end comm byte for debug
				send( (char*)&tx_packet, sizeof(tx_packet) );		// Transmit without VCP frame
				//send( (char*)&telem, sizeof(telem) );				// Debug - transmit only telem
				//send( (char*)&tx_packet.packet_f00, sizeof(f00) );	// Debug - transmit only f00
			#else
				send_VCP_data();								// Transmit with VCP frame
     eaa:	0e 94 d4 06 	call	0xda8	; 0xda8 <send_VCP_data>
			// set all sentence receive errors for next receive cycle
			set_gen_state(error, GPSI_ERR_1);
			set_gen_state(error, GPSI_ERR_2);
			set_gen_state(error, GPSI_ERR_3);
			set_gen_state(error, GPSI_ERR_4);
			set_gen_state(error, GPSI_ERR_5);
     eae:	80 91 ca 09 	lds	r24, 0x09CA
     eb2:	88 6f       	ori	r24, 0xF8	; 248
     eb4:	80 93 ca 09 	sts	0x09CA, r24
			
			// trigger ADC sampling
			sample_ADC = 1;				
     eb8:	c0 93 43 03 	sts	0x0343, r28

		}
		
		
		if (usart1_flags & USART_RX_READY)
     ebc:	80 91 98 03 	lds	r24, 0x0398
     ec0:	80 ff       	sbrs	r24, 0
     ec2:	0f c0       	rjmp	.+30     	; 0xee2 <main+0xd6>
		{
			usart1_flags ^= USART_RX_READY;		// signal received
     ec4:	80 91 98 03 	lds	r24, 0x0398
     ec8:	8c 27       	eor	r24, r28
     eca:	80 93 98 03 	sts	0x0398, r24
			usart1_snapshot = usart1_complete;	// grab a snapshot of the current usart state in case it changes
     ece:	80 91 eb 01 	lds	r24, 0x01EB
     ed2:	90 91 ec 01 	lds	r25, 0x01EC
     ed6:	90 93 02 01 	sts	0x0102, r25
     eda:	80 93 01 01 	sts	0x0101, r24
			
			// extract the data from the buffer
			retrieve_gps_data();
     ede:	0e 94 df 01 	call	0x3be	; 0x3be <retrieve_gps_data>
		}
		
		if (sample_ADC)
     ee2:	80 91 43 03 	lds	r24, 0x0343
     ee6:	88 23       	and	r24, r24
     ee8:	09 f4       	brne	.+2      	; 0xeec <main+0xe0>
     eea:	a4 cf       	rjmp	.-184    	; 0xe34 <main+0x28>
		{
			sample_ADC			= 0;
     eec:	10 92 43 03 	sts	0x0343, r1
			telem.gps_temp		= Get_ADC_Result(ADC_THERM_GPS_CHANNEL);
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	0e 94 65 00 	call	0xca	; 0xca <Get_ADC_Result>
     ef6:	80 93 90 03 	sts	0x0390, r24
			telem.gpsib_temp	= Get_ADC_Result(ADC_THERM_GPSIB_CHANNEL);
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	0e 94 65 00 	call	0xca	; 0xca <Get_ADC_Result>
     f00:	80 93 91 03 	sts	0x0391, r24
			telem.radio_temp	= Get_ADC_Result(ADC_THERM_RADIO_CHANNEL);
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	0e 94 65 00 	call	0xca	; 0xca <Get_ADC_Result>
     f0a:	80 93 92 03 	sts	0x0392, r24
     f0e:	92 cf       	rjmp	.-220    	; 0xe34 <main+0x28>

00000f10 <__vector_default>:
	}
}

// Catch interrupts without ISR - should never happen 
ISR(BADISR_vect)
{
     f10:	1f 92       	push	r1
     f12:	0f 92       	push	r0
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	0f 92       	push	r0
     f18:	11 24       	eor	r1, r1
    // user code here
}
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	0f 90       	pop	r0
     f20:	1f 90       	pop	r1
     f22:	18 95       	reti

00000f24 <__vector_12>:

// Timer1 compare interrupt service routine
ISR(TIMER1_COMPA_vect)
{
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
     f2e:	5f 93       	push	r21
     f30:	6f 93       	push	r22
     f32:	7f 93       	push	r23
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
     f38:	af 93       	push	r26
     f3a:	bf 93       	push	r27
	deadSecs++;					// count seconds between time syncs
     f3c:	80 91 c7 02 	lds	r24, 0x02C7
     f40:	90 91 c8 02 	lds	r25, 0x02C8
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	90 93 c8 02 	sts	0x02C8, r25
     f4a:	80 93 c7 02 	sts	0x02C7, r24
	
	if (deadSecs % IB_TRANSMIT_TRIGGER_TIME == 2)	// trigger transmit every <IB_TRANSMIT_TRIGGER_TIME> seconds
     f4e:	80 91 c7 02 	lds	r24, 0x02C7
     f52:	90 91 c8 02 	lds	r25, 0x02C8
     f56:	63 e0       	ldi	r22, 0x03	; 3
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	0e 94 34 08 	call	0x1068	; 0x1068 <__udivmodhi4>
     f5e:	02 97       	sbiw	r24, 0x02	; 2
     f60:	19 f4       	brne	.+6      	; 0xf68 <__vector_12+0x44>
		watchdog_transmit = 1;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	80 93 97 03 	sts	0x0397, r24
		if (watchdog_transmit)	
			PORTC &= ~(1<<PC1);		// led 1 ON
		else
			PORTC |= (1<<PC1);		// led 1 OFF
	#endif
}
     f68:	bf 91       	pop	r27
     f6a:	af 91       	pop	r26
     f6c:	9f 91       	pop	r25
     f6e:	8f 91       	pop	r24
     f70:	7f 91       	pop	r23
     f72:	6f 91       	pop	r22
     f74:	5f 91       	pop	r21
     f76:	0f 90       	pop	r0
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	0f 90       	pop	r0
     f7c:	1f 90       	pop	r1
     f7e:	18 95       	reti

00000f80 <__vector_19>:

// uart0 transmit interrupt service routine
ISR (USART0_UDRE_vect)
{		
     f80:	1f 92       	push	r1
     f82:	0f 92       	push	r0
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	0f 92       	push	r0
     f88:	11 24       	eor	r1, r1
     f8a:	0b b6       	in	r0, 0x3b	; 59
     f8c:	0f 92       	push	r0
     f8e:	2f 93       	push	r18
     f90:	3f 93       	push	r19
     f92:	8f 93       	push	r24
     f94:	9f 93       	push	r25
     f96:	ef 93       	push	r30
     f98:	ff 93       	push	r31
	if (usart0_index != usart0_complete)
     f9a:	20 91 c9 02 	lds	r18, 0x02C9
     f9e:	30 91 ca 02 	lds	r19, 0x02CA
     fa2:	80 91 44 03 	lds	r24, 0x0344
     fa6:	90 91 45 03 	lds	r25, 0x0345
     faa:	28 17       	cp	r18, r24
     fac:	39 07       	cpc	r19, r25
     fae:	79 f0       	breq	.+30     	; 0xfce <__vector_19+0x4e>
	{
		UDR0 = usart0_buffer[usart0_index++];
     fb0:	80 91 c9 02 	lds	r24, 0x02C9
     fb4:	90 91 ca 02 	lds	r25, 0x02CA
     fb8:	fc 01       	movw	r30, r24
     fba:	ea 57       	subi	r30, 0x7A	; 122
     fbc:	f8 4f       	sbci	r31, 0xF8	; 248
     fbe:	20 81       	ld	r18, Z
     fc0:	2c b9       	out	0x0c, r18	; 12
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	90 93 ca 02 	sts	0x02CA, r25
     fc8:	80 93 c9 02 	sts	0x02C9, r24
     fcc:	06 c0       	rjmp	.+12     	; 0xfda <__vector_19+0x5a>
void usart0_initialize(uint32 ubrr);

inline void usart0_rx_interrupt_enable()  { UCSR0B |= (1<<RXCIE0);	}
inline void usart0_rx_interrupt_disable() { UCSR0B &= ~(1<<RXCIE0);	}
inline void usart0_tx_interrupt_enable()  { UCSR0B |= (1<<UDRIE0);	}
inline void usart0_tx_interrupt_disable() { UCSR0B &= ~(1<<UDRIE0);	}
     fce:	55 98       	cbi	0x0a, 5	; 10
	}
	else
	{
		usart0_tx_interrupt_disable();
		usart0_flags |= USART_TX_COMPLETE;
     fd0:	80 91 31 0a 	lds	r24, 0x0A31
     fd4:	82 60       	ori	r24, 0x02	; 2
     fd6:	80 93 31 0a 	sts	0x0A31, r24
	}
}
     fda:	ff 91       	pop	r31
     fdc:	ef 91       	pop	r30
     fde:	9f 91       	pop	r25
     fe0:	8f 91       	pop	r24
     fe2:	3f 91       	pop	r19
     fe4:	2f 91       	pop	r18
     fe6:	0f 90       	pop	r0
     fe8:	0b be       	out	0x3b, r0	; 59
     fea:	0f 90       	pop	r0
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	0f 90       	pop	r0
     ff0:	1f 90       	pop	r1
     ff2:	18 95       	reti

00000ff4 <__vector_30>:

// uart1 receive interrupt service routine
ISR (USART1_RX_vect)
{
     ff4:	1f 92       	push	r1
     ff6:	0f 92       	push	r0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	0f 92       	push	r0
     ffc:	11 24       	eor	r1, r1
     ffe:	0b b6       	in	r0, 0x3b	; 59
    1000:	0f 92       	push	r0
    1002:	2f 93       	push	r18
    1004:	8f 93       	push	r24
    1006:	9f 93       	push	r25
    1008:	ef 93       	push	r30
    100a:	ff 93       	push	r31
	usart1_buffer[usart1_complete] = UDR1;
    100c:	e0 91 eb 01 	lds	r30, 0x01EB
    1010:	f0 91 ec 01 	lds	r31, 0x01EC
    1014:	80 91 9c 00 	lds	r24, 0x009C
    1018:	e7 56       	subi	r30, 0x67	; 103
    101a:	fc 4f       	sbci	r31, 0xFC	; 252
    101c:	80 83       	st	Z, r24
	usart1_complete = ((usart1_complete+1) < usart1_buffer_size ? (usart1_complete+1) : 0);
    101e:	80 91 eb 01 	lds	r24, 0x01EB
    1022:	90 91 ec 01 	lds	r25, 0x01EC
    1026:	01 96       	adiw	r24, 0x01	; 1
    1028:	88 3e       	cpi	r24, 0xE8	; 232
    102a:	93 40       	sbci	r25, 0x03	; 3
    102c:	30 f4       	brcc	.+12     	; 0x103a <__vector_30+0x46>
    102e:	80 91 eb 01 	lds	r24, 0x01EB
    1032:	90 91 ec 01 	lds	r25, 0x01EC
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	02 c0       	rjmp	.+4      	; 0x103e <__vector_30+0x4a>
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	90 93 ec 01 	sts	0x01EC, r25
    1042:	80 93 eb 01 	sts	0x01EB, r24
	
	usart1_flags |= USART_RX_READY;
    1046:	80 91 98 03 	lds	r24, 0x0398
    104a:	81 60       	ori	r24, 0x01	; 1
    104c:	80 93 98 03 	sts	0x0398, r24
}
    1050:	ff 91       	pop	r31
    1052:	ef 91       	pop	r30
    1054:	9f 91       	pop	r25
    1056:	8f 91       	pop	r24
    1058:	2f 91       	pop	r18
    105a:	0f 90       	pop	r0
    105c:	0b be       	out	0x3b, r0	; 59
    105e:	0f 90       	pop	r0
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	0f 90       	pop	r0
    1064:	1f 90       	pop	r1
    1066:	18 95       	reti

00001068 <__udivmodhi4>:
    1068:	aa 1b       	sub	r26, r26
    106a:	bb 1b       	sub	r27, r27
    106c:	51 e1       	ldi	r21, 0x11	; 17
    106e:	07 c0       	rjmp	.+14     	; 0x107e <__udivmodhi4_ep>

00001070 <__udivmodhi4_loop>:
    1070:	aa 1f       	adc	r26, r26
    1072:	bb 1f       	adc	r27, r27
    1074:	a6 17       	cp	r26, r22
    1076:	b7 07       	cpc	r27, r23
    1078:	10 f0       	brcs	.+4      	; 0x107e <__udivmodhi4_ep>
    107a:	a6 1b       	sub	r26, r22
    107c:	b7 0b       	sbc	r27, r23

0000107e <__udivmodhi4_ep>:
    107e:	88 1f       	adc	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	5a 95       	dec	r21
    1084:	a9 f7       	brne	.-22     	; 0x1070 <__udivmodhi4_loop>
    1086:	80 95       	com	r24
    1088:	90 95       	com	r25
    108a:	bc 01       	movw	r22, r24
    108c:	cd 01       	movw	r24, r26
    108e:	08 95       	ret

00001090 <__udivmodsi4>:
    1090:	a1 e2       	ldi	r26, 0x21	; 33
    1092:	1a 2e       	mov	r1, r26
    1094:	aa 1b       	sub	r26, r26
    1096:	bb 1b       	sub	r27, r27
    1098:	fd 01       	movw	r30, r26
    109a:	0d c0       	rjmp	.+26     	; 0x10b6 <__udivmodsi4_ep>

0000109c <__udivmodsi4_loop>:
    109c:	aa 1f       	adc	r26, r26
    109e:	bb 1f       	adc	r27, r27
    10a0:	ee 1f       	adc	r30, r30
    10a2:	ff 1f       	adc	r31, r31
    10a4:	a2 17       	cp	r26, r18
    10a6:	b3 07       	cpc	r27, r19
    10a8:	e4 07       	cpc	r30, r20
    10aa:	f5 07       	cpc	r31, r21
    10ac:	20 f0       	brcs	.+8      	; 0x10b6 <__udivmodsi4_ep>
    10ae:	a2 1b       	sub	r26, r18
    10b0:	b3 0b       	sbc	r27, r19
    10b2:	e4 0b       	sbc	r30, r20
    10b4:	f5 0b       	sbc	r31, r21

000010b6 <__udivmodsi4_ep>:
    10b6:	66 1f       	adc	r22, r22
    10b8:	77 1f       	adc	r23, r23
    10ba:	88 1f       	adc	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	1a 94       	dec	r1
    10c0:	69 f7       	brne	.-38     	; 0x109c <__udivmodsi4_loop>
    10c2:	60 95       	com	r22
    10c4:	70 95       	com	r23
    10c6:	80 95       	com	r24
    10c8:	90 95       	com	r25
    10ca:	9b 01       	movw	r18, r22
    10cc:	ac 01       	movw	r20, r24
    10ce:	bd 01       	movw	r22, r26
    10d0:	cf 01       	movw	r24, r30
    10d2:	08 95       	ret

000010d4 <_exit>:
    10d4:	f8 94       	cli

000010d6 <__stop_program>:
    10d6:	ff cf       	rjmp	.-2      	; 0x10d6 <__stop_program>
