
gps_ib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000f78  0000100c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000932  00800100  00800100  0000100c  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001867  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000150  00000000  00000000  00001896  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001837  00000000  00000000  000019e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006bd  00000000  00000000  0000321d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000088f  00000000  00000000  000038da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000468  00000000  00000000  0000416c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000079f  00000000  00000000  000045d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000010bf  00000000  00000000  00004d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f0  00000000  00000000  00005e32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 * Calculates a 16 bit ccitt crc from a message
 * buffer. The return value
 * is the crc.
 */
uint16 crc16(uint8ptr message, uint32 size)
{
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
 *
 * Calculates a 16 bit ccitt crc from a message
 * buffer. The return value
 * is the crc.
 */
uint16 crc16(uint8ptr message, uint32 size)
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
{
	uint16 crc = CRC16_INIT_VALUE;

	uint8 ch;
	sint32 index, j;
	for (index = 0; index < size; index++)
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
 * buffer. The return value
 * is the crc.
 */
uint16 crc16(uint8ptr message, uint32 size)
{
	uint16 crc = CRC16_INIT_VALUE;
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

	uint8 ch;
	sint32 index, j;
	for (index = 0; index < size; index++)
	{
		ch = message[index];
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
		for (j = 0; j < 8; j++)
		{
			crc = (crc >> 1) ^ (((ch ^ crc) & 0x01) ? 0x8408 : 0);
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__vector_12>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
			ch >>= 1;
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
	uint8 ch;
	sint32 index, j;
	for (index = 0; index < size; index++)
	{
		ch = message[index];
		for (j = 0; j < 8; j++)
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
{
	uint16 crc = CRC16_INIT_VALUE;

	uint8 ch;
	sint32 index, j;
	for (index = 0; index < size; index++)
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__vector_19>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
			ch >>= 1;
		}
	}

	return crc;
}
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
		case VCP_RECEIVING:
			if (byte == FEND)
			{
				if (buff->index > 0)
					// Done
					buff->status = VCP_TERM;
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
				else
					// No data between FENDs - assume lost sync and start over
					buff->status = VCP_ADDRESS;
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
			}
			else if (byte == FESC)
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
				buff->status = VCP_ESC;
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
			else
			{
				buff->message[(buff->index)++] = byte;	
  78:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__vector_30>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
			}						
			break;
		case VCP_ESC:
			if (byte == TFEND)
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
			{
				buff->message[(buff->index)++] = FEND;
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
				buff->status = VCP_RECEIVING;
			}
			else if (byte == TFESC)
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	2a e0       	ldi	r18, 0x0A	; 10
			{
				buff->message[(buff->index)++] = FESC;
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 33       	cpi	r26, 0x32	; 50
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 43 06 	call	0xc86	; 0xc86 <main>
				buff->status = VCP_RECEIVING;
  ac:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <_exit>

000000b0 <__bad_interrupt>:
			}
			else
				return VCP_ESC_ERR;	
			break;
		default:
			buff->status = VCP_IDLE;
  b0:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__vector_default>

000000b4 <Sample_ADC_Channel>:
			break; 
	}
	
	// End of frame
	if (buff->status == VCP_TERM)
  b4:	97 b1       	in	r25, 0x07	; 7
  b6:	90 7f       	andi	r25, 0xF0	; 240
		// Check Calculated CRC against Received CRC
		if (buff->crc != message_crc)
			return VCP_CRC_ERR;
	}

	return buff->status;
  b8:	97 b9       	out	0x07, r25	; 7
  ba:	97 b1       	in	r25, 0x07	; 7
	
	// End of frame
	if (buff->status == VCP_TERM)
	{
		// Message CRC is last 2 bytes 
		message_crc = (buff->message[buff->index-2] << 8 ) + buff->message[buff->index-1];
  bc:	98 2b       	or	r25, r24
  be:	97 b9       	out	0x07, r25	; 7
  c0:	36 9a       	sbi	0x06, 6	; 6
  c2:	34 9b       	sbis	0x06, 4	; 6
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <Sample_ADC_Channel+0xe>
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	08 95       	ret

000000ca <Get_ADC_Result>:
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	08 2f       	mov	r16, r24
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	e8 01       	movw	r28, r16
  da:	cd 5f       	subi	r28, 0xFD	; 253
		// Remove CRC bytes from the message
		buff->index -= 2;
  dc:	de 4f       	sbci	r29, 0xFE	; 254
  de:	f8 80       	ld	r15, Y
  e0:	0e 94 5a 00 	call	0xb4	; 0xb4 <Sample_ADC_Channel>
		// Calculate CRC on received message (including address)
		append_crc16(buff->address, &(buff->crc));
  e4:	f8 01       	movw	r30, r16
  e6:	ee 0f       	add	r30, r30
  e8:	ff 1f       	adc	r31, r31
  ea:	ee 0f       	add	r30, r30
  ec:	ff 1f       	adc	r31, r31
  ee:	df 01       	movw	r26, r30
  f0:	af 0d       	add	r26, r15
  f2:	b1 1d       	adc	r27, r1
		for (payload_index = 0; payload_index < buff->index; payload_index++)
  f4:	a5 5f       	subi	r26, 0xF5	; 245
  f6:	be 4f       	sbci	r27, 0xFE	; 254
  f8:	8c 93       	st	X, r24
		{
			append_crc16(buff->message[payload_index], &buff->crc);
  fa:	8f 2d       	mov	r24, r15
  fc:	8f 5f       	subi	r24, 0xFF	; 255
  fe:	88 83       	st	Y, r24
 100:	84 30       	cpi	r24, 0x04	; 4
 102:	08 f0       	brcs	.+2      	; 0x106 <Get_ADC_Result+0x3c>
 104:	18 82       	st	Y, r1
 106:	e5 5f       	subi	r30, 0xF5	; 245
 108:	fe 4f       	sbci	r31, 0xFE	; 254
		message_crc = (buff->message[buff->index-2] << 8 ) + buff->message[buff->index-1];
		// Remove CRC bytes from the message
		buff->index -= 2;
		// Calculate CRC on received message (including address)
		append_crc16(buff->address, &(buff->crc));
		for (payload_index = 0; payload_index < buff->index; payload_index++)
 10a:	21 81       	ldd	r18, Z+1	; 0x01
 10c:	80 81       	ld	r24, Z
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	82 0f       	add	r24, r18
 116:	91 1d       	adc	r25, r1
		{
			append_crc16(buff->message[payload_index], &buff->crc);
		}
		// Check Calculated CRC against Received CRC
		if (buff->crc != message_crc)
 118:	a1 1d       	adc	r26, r1
 11a:	b1 1d       	adc	r27, r1
 11c:	22 81       	ldd	r18, Z+2	; 0x02
 11e:	82 0f       	add	r24, r18
 120:	91 1d       	adc	r25, r1
			return VCP_CRC_ERR;
 122:	a1 1d       	adc	r26, r1
 124:	b1 1d       	adc	r27, r1
	uint16_t payload_index;
	uint16_t message_crc;
	
	// Check for invalid buffer
	if (buff->message == NULL)
		return VCP_NULL_ERR;
 126:	23 81       	ldd	r18, Z+3	; 0x03
 128:	82 0f       	add	r24, r18
	
	// Check if the buffer will overflow
	if (buff->index >= buff->size-1)
		return VCP_OVR_ERR;
 12a:	91 1d       	adc	r25, r1
 12c:	a1 1d       	adc	r26, r1
				buff->status = VCP_ADDRESS;	
			break;
		case VCP_ADDRESS:
			// Check for invalid VCP address
			if (byte > VCP_FC && byte != VCP_SUN_SENSOR)
				return VCP_ADDR_ERR;
 12e:	b1 1d       	adc	r27, r1
 130:	22 e0       	ldi	r18, 0x02	; 2
			{
				buff->message[(buff->index)++] = FESC;
				buff->status = VCP_RECEIVING;
			}
			else
				return VCP_ESC_ERR;	
 132:	b6 95       	lsr	r27
		if (buff->crc != message_crc)
			return VCP_CRC_ERR;
	}

	return buff->status;
 134:	a7 95       	ror	r26
 136:	97 95       	ror	r25
 138:	87 95       	ror	r24
 13a:	2a 95       	dec	r18
 13c:	d1 f7       	brne	.-12     	; 0x132 <Get_ADC_Result+0x68>
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
                		(uint32)ADC_samples [channel][1] +
                		(uint32)ADC_samples [channel][2] +
                		(uint32)ADC_samples [channel][3] );		// add up last 4
	return				(uint8)	(ADC_Temp >> 2);    			// divide by 4 and return the result
	
}
 146:	ff 90       	pop	r15
 148:	08 95       	ret

0000014a <getbit>:
		levels++;
	}

	div /= base;

	while (div >= 1)
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	06 2e       	mov	r0, r22
 150:	02 c0       	rjmp	.+4      	; 0x156 <getbit+0xc>
 152:	22 0f       	add	r18, r18
 * a char array
 */
uint32 int_to_char(uint32 number, uint32 base, uint8 *str, uint32 str_size)
{
	if (str == NULL || str_size == 0)
		return 0;
 154:	33 1f       	adc	r19, r19
 156:	0a 94       	dec	r0
 158:	e2 f7       	brpl	.-8      	; 0x152 <getbit+0x8>

		div /= base;
	}

	return pos;
}
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	28 23       	and	r18, r24
 15e:	39 23       	and	r19, r25
 160:	02 c0       	rjmp	.+4      	; 0x166 <getbit+0x1c>
 162:	35 95       	asr	r19
 164:	27 95       	ror	r18
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <getbit+0x18>
 16a:	82 2f       	mov	r24, r18
 16c:	08 95       	ret

0000016e <get_ubrr>:
 16e:	9b 01       	movw	r18, r22
 170:	ac 01       	movw	r20, r24
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	70 e1       	ldi	r23, 0x10	; 16
 176:	8e e0       	ldi	r24, 0x0E	; 14
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__udivmodsi4>
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	31 09       	sbc	r19, r1
 182:	41 09       	sbc	r20, r1
 184:	51 09       	sbc	r21, r1
 186:	b9 01       	movw	r22, r18
 188:	ca 01       	movw	r24, r20
 18a:	08 95       	ret

0000018c <usart0_initialize>:
		return ASYNCHRONOUS_NORMAL/baud - 1;
	#endif
}

void usart0_initialize(uint32 ubrr)
{
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
	// set the baud rate
	UBRR0H = (uint8)(ubrr>>8);
 190:	07 2f       	mov	r16, r23
 192:	18 2f       	mov	r17, r24
 194:	29 2f       	mov	r18, r25
 196:	33 27       	eor	r19, r19
 198:	00 93 90 00 	sts	0x0090, r16
	UBRR0L = (uint8)ubrr;
 19c:	69 b9       	out	0x09, r22	; 9
	
	// enable the transmitter
	UCSR0B = (1<<TXEN0);
 19e:	88 e0       	ldi	r24, 0x08	; 8
 1a0:	8a b9       	out	0x0a, r24	; 10
	// enable the receiver
	//UCSR0B = (1<<RXEN0);

	// set the frame format: 8 bit data, 1 stop bits
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 1a2:	86 e0       	ldi	r24, 0x06	; 6
 1a4:	80 93 95 00 	sts	0x0095, r24
}
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	08 95       	ret

000001ae <usart1_initialize>:

void usart1_initialize(uint32 ubrr)
{
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
	// set the baud rate
	UBRR1H = (uint8)(ubrr>>8);
 1b2:	07 2f       	mov	r16, r23
 1b4:	18 2f       	mov	r17, r24
 1b6:	29 2f       	mov	r18, r25
 1b8:	33 27       	eor	r19, r19
 1ba:	00 93 98 00 	sts	0x0098, r16
	UBRR1L = (uint8)ubrr;
 1be:	60 93 99 00 	sts	0x0099, r22
	
	// enable the transmitter
	//UCSR1B = (1<<TXEN1);
	// enable the receiver
	UCSR1B = (1<<RXEN1);
 1c2:	80 e1       	ldi	r24, 0x10	; 16
 1c4:	80 93 9a 00 	sts	0x009A, r24
 
	// set the frame format: 8 bit data, 1 stop bits
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10); 
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	80 93 9d 00 	sts	0x009D, r24
}
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	08 95       	ret

000001d4 <initialize>:
		DDRC |= (1<<DDC2);
		PORTC = 0x07;				// LEDs start OFF
	#endif

	// Init output I/Os
	DDRA |= (1<<DDA4);				// DISCP	on Pin PA4 as output ???
 1d4:	d4 9a       	sbi	0x1a, 4	; 26
	
	
	// UART TX Pins should be automatically configured as outputs when the UART is enabled
	// regardless of the following DDRx setting
	DDRD |= (1<<DDD3);	// GPS_TX	on Pin PD3 as output
 1d6:	8b 9a       	sbi	0x11, 3	; 17
	DDRE |= (1<<DDE1);	// COMM_TX	on Pin PE1 as output 
 1d8:	11 9a       	sbi	0x02, 1	; 2
	
		
	// set up the UART lines
	usart0_initialize(get_ubrr(CDHIB_BAUD_RATE));		// UART0 is the interface to the CDH IB
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	72 ec       	ldi	r23, 0xC2	; 194
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 b7 00 	call	0x16e	; 0x16e <get_ubrr>
 1e6:	0e 94 c6 00 	call	0x18c	; 0x18c <usart0_initialize>
	usart1_initialize(get_ubrr(RECEIVER_BAUD_RATE));	// UART1 is the interface to the GPS receiver
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	7c e2       	ldi	r23, 0x2C	; 44
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 b7 00 	call	0x16e	; 0x16e <get_ubrr>
 1f6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <usart1_initialize>

	usart0_index		= 0;
 1fa:	10 92 ca 02 	sts	0x02CA, r1
 1fe:	10 92 c9 02 	sts	0x02C9, r1
	usart0_complete		= 0;
 202:	10 92 45 03 	sts	0x0345, r1
 206:	10 92 44 03 	sts	0x0344, r1
	usart0_flags		= 0;
 20a:	10 92 31 0a 	sts	0x0A31, r1

	usart1_index		= 0;
 20e:	10 92 8f 03 	sts	0x038F, r1
 212:	10 92 8e 03 	sts	0x038E, r1
	usart1_complete		= 0;
 216:	10 92 ec 01 	sts	0x01EC, r1
 21a:	10 92 eb 01 	sts	0x01EB, r1
	usart1_flags		= 0;
 21e:	10 92 98 03 	sts	0x0398, r1

	gpsi_ready			= 0;
 222:	10 92 cb 09 	sts	0x09CB, r1
	f00_ready			= 0;
 226:	10 92 81 07 	sts	0x0781, r1
	watchdog_transmit	= 0;
 22a:	10 92 97 03 	sts	0x0397, r1
	deadSecs			= 0;
 22e:	10 92 c8 02 	sts	0x02C8, r1
 232:	10 92 c7 02 	sts	0x02C7, r1


	// Init ADC
    ADMUX	|=  ( (1<<REFS0) | (1<<ADLAR) );				// External AVcc as Ref, Left adjusted result
 236:	87 b1       	in	r24, 0x07	; 7
 238:	80 66       	ori	r24, 0x60	; 96
 23a:	87 b9       	out	0x07, r24	; 7
	ADCSRA	|= 	( (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0) );	// Prescaler 128, conversion clock = CLOCK_SPEED/prescaler
 23c:	86 b1       	in	r24, 0x06	; 6
 23e:	87 60       	ori	r24, 0x07	; 7
 240:	86 b9       	out	0x06, r24	; 6
uint8 Get_ADC_Result (uint8 channel);

inline void Enable_ADC()						{ ADCSRA |=  (1<<ADEN); }	
inline void Disbale_ADC()						{ ADCSRA &= ~(1<<ADEN); } 
inline void Start_ADC_Conversion()				{ ADCSRA |=  (1<<ADSC); }
inline void Clear_ADC_MUX()						{ ADMUX  &= ~((1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0)); }
 242:	87 b1       	in	r24, 0x07	; 7
 244:	80 7f       	andi	r24, 0xF0	; 240
 246:	87 b9       	out	0x07, r24	; 7

// Functions - see adc.c
uint8 Sample_ADC_Channel (uint8 channel);
uint8 Get_ADC_Result (uint8 channel);

inline void Enable_ADC()						{ ADCSRA |=  (1<<ADEN); }	
 248:	37 9a       	sbi	0x06, 7	; 6
inline void Disbale_ADC()						{ ADCSRA &= ~(1<<ADEN); } 
inline void Start_ADC_Conversion()				{ ADCSRA |=  (1<<ADSC); }
 24a:	36 9a       	sbi	0x06, 6	; 6
	Enable_ADC();											// Enable ADC
	Start_ADC_Conversion();									// Do first dummy conversion on Channel 0


	// Init watchdog (use Timer 1 in CTC mode to create 1Hz interrupts)
	TCCR1A 	= 	0; 							// no I/O connected
 24c:	1f bc       	out	0x2f, r1	; 47
	OCR1A	=	((CLOCK_SPEED / 1024) - 1);	// 1 Hz interrupt	  
 24e:	8f e3       	ldi	r24, 0x3F	; 63
 250:	98 e3       	ldi	r25, 0x38	; 56
 252:	9b bd       	out	0x2b, r25	; 43
 254:	8a bd       	out	0x2a, r24	; 42
	TIMSK 	|=	( (1<< OCIE1A));			// enable interrupt on compare
 256:	87 b7       	in	r24, 0x37	; 55
 258:	80 61       	ori	r24, 0x10	; 16
 25a:	87 bf       	out	0x37, r24	; 55
	TCCR1B 	|= 	( (1<<WGM12));				// CTC mode, OCR1A is top
 25c:	8e b5       	in	r24, 0x2e	; 46
 25e:	88 60       	ori	r24, 0x08	; 8
 260:	8e bd       	out	0x2e, r24	; 46
	TCCR1B	|=	( (1<<CS10)  | (1<<CS12)); 	// prescale clock by 1024 and start the timer		
 262:	8e b5       	in	r24, 0x2e	; 46
 264:	85 60       	ori	r24, 0x05	; 5
 266:	8e bd       	out	0x2e, r24	; 46
		PORTA	|= (1<<PA1);
	#endif		


	// enable interrupts
	sei();
 268:	78 94       	sei
 26a:	08 95       	ret

0000026c <retrieve_gps_data>:
 * If it gets unexpected data at any stage (except in the GPSI_S1,2,3,4,5 stages), it'll
 * throw a general error and go into GPSI_UNKNOWN. If it recognizes a start byte and starts
 * ID'ing the sentence, it'll clear the general error.
 */ 
void retrieve_gps_data()
{
 26c:	2f 92       	push	r2
 26e:	3f 92       	push	r3
 270:	4f 92       	push	r4
 272:	5f 92       	push	r5
 274:	6f 92       	push	r6
 276:	7f 92       	push	r7
 278:	8f 92       	push	r8
 27a:	9f 92       	push	r9
 27c:	af 92       	push	r10
 27e:	bf 92       	push	r11
 280:	cf 92       	push	r12
 282:	df 92       	push	r13
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29

			case  GPSI_CHKS3B: // F18 Checksum Byte 1
				rec_checksum[1] = usart1_buffer[usart1_index];
				
				if (rec_checksum[0] != checksum[0] || rec_checksum[1] != checksum[1])
					memset(&f18, 0x00, sizeof(gps_f18));	// Checksum failed - Write zeros to F18
 290:	8b e2       	ldi	r24, 0x2B	; 43
 292:	28 2e       	mov	r2, r24
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	38 2e       	mov	r3, r24
 298:	90 ec       	ldi	r25, 0xC0	; 192

			case  GPSI_CHKS5B: // F23 Checksum Byte 1
				rec_checksum[1] = usart1_buffer[usart1_index];

				if (rec_checksum[0] != checksum[0] || rec_checksum[1] != checksum[1])
					memset(&f23, 0x00, sizeof(gps_f23));	// Checksum failed - Write zeros to F23
 29a:	2c ec       	ldi	r18, 0xCC	; 204
 29c:	82 2e       	mov	r8, r18
 29e:	29 e0       	ldi	r18, 0x09	; 9
 2a0:	92 2e       	mov	r9, r18
 2a2:	20 e6       	ldi	r18, 0x60	; 96
					{
						if (order == GPSI_ORDER_F22)
							order = GPSI_ORDER_F23;

						rem_gen_state(error, GPSI_ERR_5); // F23 received ok
						gpsi_ready = 1;		
 2a4:	81 e0       	ldi	r24, 0x01	; 1
					}
					
					else if (rx_id[2] == '3' && rx_id[1] == '2')
					{
						if (order == GPSI_ORDER_F22)
							order = GPSI_ORDER_F23;
 2a6:	33 e2       	ldi	r19, 0x23	; 35
					}
					
					else if (rx_id[1] == '2' && rx_id[2] == '2')
					{
						if (order == GPSI_ORDER_F18)
							order = GPSI_ORDER_F22;
 2a8:	42 e2       	ldi	r20, 0x22	; 34
					}
					
					else if (rx_id[1] == '1' && rx_id[2] == '8')
					{
						if (order == GPSI_ORDER_F03)
							order = GPSI_ORDER_F18;
 2aa:	58 e1       	ldi	r21, 0x18	; 24
					}

					else if (rx_id[2] == '3' && rx_id[1] == '0')
					{
						if (order == GPSI_ORDER_F00)
							order = GPSI_ORDER_F03;
 2ac:	63 e0       	ldi	r22, 0x03	; 3

			case  GPSI_CHKS4B: // F22 Checksum Byte 1
				rec_checksum[1] = usart1_buffer[usart1_index];

				if (rec_checksum[0] != checksum[0] || rec_checksum[1] != checksum[1])
					memset(&f22, 0x00, sizeof(gps_f22));	// Checksum failed - Write zeros to F22
 2ae:	7b ec       	ldi	r23, 0xCB	; 203
 2b0:	a7 2e       	mov	r10, r23
 2b2:	72 e0       	ldi	r23, 0x02	; 2
 2b4:	b7 2e       	mov	r11, r23
 2b6:	78 e7       	ldi	r23, 0x78	; 120

			case  GPSI_CHKS1B: // F00 Checksum Byte 1
				rec_checksum[1] = usart1_buffer[usart1_index];

				if (rec_checksum[0] != checksum[0] || rec_checksum[1] != checksum[1])
					memset(&f00, 0x00, sizeof(gps_f00));	// Checksum failed - Write zeros to F00
 2b8:	a6 e4       	ldi	r26, 0x46	; 70
 2ba:	b3 e0       	ldi	r27, 0x03	; 3

			case  GPSI_ID1:
				if (usart1_buffer[usart1_index] == 'F')
				{
					set_usart_state(usart1_flags, GPSI_ID2);
					rx_id[0] = 'F';
 2bc:	16 e4       	ldi	r17, 0x46	; 70
void retrieve_gps_data()
{
	// The buffer is circular, so when the loop gets to the end, it just
	// sets back to index 0 and continues until it reaches usart1_snapshot
	// This helps to prevent unwanted loss of data
	for (; usart1_index != usart1_snapshot; usart1_index = (usart1_index+1 < usart1_buffer_size ? usart1_index+1 : 0))
 2be:	75 c4       	rjmp	.+2282   	; 0xbaa <retrieve_gps_data+0x93e>
	{
		switch (get_usart_state(usart1_flags))
 2c0:	e0 91 98 03 	lds	r30, 0x0398
 2c4:	ec 7f       	andi	r30, 0xFC	; 252
 2c6:	e0 33       	cpi	r30, 0x30	; 48
 2c8:	09 f4       	brne	.+2      	; 0x2cc <retrieve_gps_data+0x60>
 2ca:	ab c2       	rjmp	.+1366   	; 0x822 <retrieve_gps_data+0x5b6>
 2cc:	40 f5       	brcc	.+80     	; 0x31e <retrieve_gps_data+0xb2>
 2ce:	e8 31       	cpi	r30, 0x18	; 24
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <retrieve_gps_data+0x68>
 2d2:	a8 c0       	rjmp	.+336    	; 0x424 <retrieve_gps_data+0x1b8>
 2d4:	90 f4       	brcc	.+36     	; 0x2fa <retrieve_gps_data+0x8e>
 2d6:	ec 30       	cpi	r30, 0x0C	; 12
 2d8:	09 f4       	brne	.+2      	; 0x2dc <retrieve_gps_data+0x70>
 2da:	6e c0       	rjmp	.+220    	; 0x3b8 <retrieve_gps_data+0x14c>
 2dc:	38 f4       	brcc	.+14     	; 0x2ec <retrieve_gps_data+0x80>
 2de:	e4 30       	cpi	r30, 0x04	; 4
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <retrieve_gps_data+0x78>
 2e2:	45 c0       	rjmp	.+138    	; 0x36e <retrieve_gps_data+0x102>
 2e4:	e8 30       	cpi	r30, 0x08	; 8
 2e6:	09 f0       	breq	.+2      	; 0x2ea <retrieve_gps_data+0x7e>
 2e8:	31 c4       	rjmp	.+2146   	; 0xb4c <retrieve_gps_data+0x8e0>
 2ea:	55 c0       	rjmp	.+170    	; 0x396 <retrieve_gps_data+0x12a>
 2ec:	e0 31       	cpi	r30, 0x10	; 16
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <retrieve_gps_data+0x86>
 2f0:	76 c0       	rjmp	.+236    	; 0x3de <retrieve_gps_data+0x172>
 2f2:	e4 31       	cpi	r30, 0x14	; 20
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <retrieve_gps_data+0x8c>
 2f6:	2a c4       	rjmp	.+2132   	; 0xb4c <retrieve_gps_data+0x8e0>
 2f8:	7c c0       	rjmp	.+248    	; 0x3f2 <retrieve_gps_data+0x186>
 2fa:	e4 32       	cpi	r30, 0x24	; 36
 2fc:	09 f4       	brne	.+2      	; 0x300 <retrieve_gps_data+0x94>
 2fe:	7a c1       	rjmp	.+756    	; 0x5f4 <retrieve_gps_data+0x388>
 300:	38 f4       	brcc	.+14     	; 0x310 <retrieve_gps_data+0xa4>
 302:	ec 31       	cpi	r30, 0x1C	; 28
 304:	09 f4       	brne	.+2      	; 0x308 <retrieve_gps_data+0x9c>
 306:	b0 c0       	rjmp	.+352    	; 0x468 <retrieve_gps_data+0x1fc>
 308:	e0 32       	cpi	r30, 0x20	; 32
 30a:	09 f0       	breq	.+2      	; 0x30e <retrieve_gps_data+0xa2>
 30c:	1f c4       	rjmp	.+2110   	; 0xb4c <retrieve_gps_data+0x8e0>
 30e:	15 c1       	rjmp	.+554    	; 0x53a <retrieve_gps_data+0x2ce>
 310:	e8 32       	cpi	r30, 0x28	; 40
 312:	09 f4       	brne	.+2      	; 0x316 <retrieve_gps_data+0xaa>
 314:	cc c1       	rjmp	.+920    	; 0x6ae <retrieve_gps_data+0x442>
 316:	ec 32       	cpi	r30, 0x2C	; 44
 318:	09 f0       	breq	.+2      	; 0x31c <retrieve_gps_data+0xb0>
 31a:	18 c4       	rjmp	.+2096   	; 0xb4c <retrieve_gps_data+0x8e0>
 31c:	25 c2       	rjmp	.+1098   	; 0x768 <retrieve_gps_data+0x4fc>
 31e:	e8 34       	cpi	r30, 0x48	; 72
 320:	09 f4       	brne	.+2      	; 0x324 <retrieve_gps_data+0xb8>
 322:	3e c3       	rjmp	.+1660   	; 0x9a0 <retrieve_gps_data+0x734>
 324:	90 f4       	brcc	.+36     	; 0x34a <retrieve_gps_data+0xde>
 326:	ec 33       	cpi	r30, 0x3C	; 60
 328:	09 f4       	brne	.+2      	; 0x32c <retrieve_gps_data+0xc0>
 32a:	00 c3       	rjmp	.+1536   	; 0x92c <retrieve_gps_data+0x6c0>
 32c:	38 f4       	brcc	.+14     	; 0x33c <retrieve_gps_data+0xd0>
 32e:	e4 33       	cpi	r30, 0x34	; 52
 330:	09 f4       	brne	.+2      	; 0x334 <retrieve_gps_data+0xc8>
 332:	d4 c2       	rjmp	.+1448   	; 0x8dc <retrieve_gps_data+0x670>
 334:	e8 33       	cpi	r30, 0x38	; 56
 336:	09 f0       	breq	.+2      	; 0x33a <retrieve_gps_data+0xce>
 338:	09 c4       	rjmp	.+2066   	; 0xb4c <retrieve_gps_data+0x8e0>
 33a:	e1 c2       	rjmp	.+1474   	; 0x8fe <retrieve_gps_data+0x692>
 33c:	e0 34       	cpi	r30, 0x40	; 64
 33e:	09 f4       	brne	.+2      	; 0x342 <retrieve_gps_data+0xd6>
 340:	06 c3       	rjmp	.+1548   	; 0x94e <retrieve_gps_data+0x6e2>
 342:	e4 34       	cpi	r30, 0x44	; 68
 344:	09 f0       	breq	.+2      	; 0x348 <retrieve_gps_data+0xdc>
 346:	02 c4       	rjmp	.+2052   	; 0xb4c <retrieve_gps_data+0x8e0>
 348:	1a c3       	rjmp	.+1588   	; 0x97e <retrieve_gps_data+0x712>
 34a:	e4 35       	cpi	r30, 0x54	; 84
 34c:	09 f4       	brne	.+2      	; 0x350 <retrieve_gps_data+0xe4>
 34e:	66 c3       	rjmp	.+1740   	; 0xa1c <retrieve_gps_data+0x7b0>
 350:	38 f4       	brcc	.+14     	; 0x360 <retrieve_gps_data+0xf4>
 352:	ec 34       	cpi	r30, 0x4C	; 76
 354:	09 f4       	brne	.+2      	; 0x358 <retrieve_gps_data+0xec>
 356:	3b c3       	rjmp	.+1654   	; 0x9ce <retrieve_gps_data+0x762>
 358:	e0 35       	cpi	r30, 0x50	; 80
 35a:	09 f0       	breq	.+2      	; 0x35e <retrieve_gps_data+0xf2>
 35c:	f7 c3       	rjmp	.+2030   	; 0xb4c <retrieve_gps_data+0x8e0>
 35e:	48 c3       	rjmp	.+1680   	; 0x9f0 <retrieve_gps_data+0x784>
 360:	e8 35       	cpi	r30, 0x58	; 88
 362:	09 f4       	brne	.+2      	; 0x366 <retrieve_gps_data+0xfa>
 364:	6c c3       	rjmp	.+1752   	; 0xa3e <retrieve_gps_data+0x7d2>
 366:	ec 35       	cpi	r30, 0x5C	; 92
 368:	09 f0       	breq	.+2      	; 0x36c <retrieve_gps_data+0x100>
 36a:	f0 c3       	rjmp	.+2016   	; 0xb4c <retrieve_gps_data+0x8e0>
 36c:	88 c3       	rjmp	.+1808   	; 0xa7e <retrieve_gps_data+0x812>
		{
			case  GPSI_UNKNOWN:
				if (usart1_buffer[usart1_index] == GPSI_START)
 36e:	e0 91 8e 03 	lds	r30, 0x038E
 372:	f0 91 8f 03 	lds	r31, 0x038F
 376:	e7 56       	subi	r30, 0x67	; 103
 378:	fc 4f       	sbci	r31, 0xFC	; 252
 37a:	e0 81       	ld	r30, Z
 37c:	e2 30       	cpi	r30, 0x02	; 2
 37e:	09 f0       	breq	.+2      	; 0x382 <retrieve_gps_data+0x116>
 380:	ee c3       	rjmp	.+2012   	; 0xb5e <retrieve_gps_data+0x8f2>
				{
					gpsi_ready = 0;
 382:	10 92 cb 09 	sts	0x09CB, r1
					set_usart_state(usart1_flags, GPSI_ID1);
 386:	f0 91 98 03 	lds	r31, 0x0398
 38a:	e0 91 98 03 	lds	r30, 0x0398
 38e:	ec 7f       	andi	r30, 0xFC	; 252
 390:	ef 27       	eor	r30, r31
 392:	e4 61       	ori	r30, 0x14	; 20
 394:	d8 c3       	rjmp	.+1968   	; 0xb46 <retrieve_gps_data+0x8da>
				}
				break;


			case GPSI_PRELIM1:
				telem.last_command = usart1_buffer[usart1_index];
 396:	e0 91 8e 03 	lds	r30, 0x038E
 39a:	f0 91 8f 03 	lds	r31, 0x038F
 39e:	e7 56       	subi	r30, 0x67	; 103
 3a0:	fc 4f       	sbci	r31, 0xFC	; 252
 3a2:	e0 81       	ld	r30, Z
 3a4:	e0 93 93 03 	sts	0x0393, r30
				set_usart_state(usart1_flags, GPSI_PRELIM2);
 3a8:	f0 91 98 03 	lds	r31, 0x0398
 3ac:	e0 91 98 03 	lds	r30, 0x0398
 3b0:	ec 7f       	andi	r30, 0xFC	; 252
 3b2:	ef 27       	eor	r30, r31
 3b4:	ec 60       	ori	r30, 0x0C	; 12
 3b6:	10 c0       	rjmp	.+32     	; 0x3d8 <retrieve_gps_data+0x16c>
				break;


			case GPSI_PRELIM2:
				telem.command_success = usart1_buffer[usart1_index];
 3b8:	e0 91 8e 03 	lds	r30, 0x038E
 3bc:	f0 91 8f 03 	lds	r31, 0x038F
 3c0:	e7 56       	subi	r30, 0x67	; 103
 3c2:	fc 4f       	sbci	r31, 0xFC	; 252
 3c4:	e0 81       	ld	r30, Z
 3c6:	e0 93 94 03 	sts	0x0394, r30
				set_usart_state(usart1_flags, GPSI_PRELIM3);
 3ca:	f0 91 98 03 	lds	r31, 0x0398
 3ce:	e0 91 98 03 	lds	r30, 0x0398
 3d2:	ec 7f       	andi	r30, 0xFC	; 252
 3d4:	ef 27       	eor	r30, r31
 3d6:	e0 61       	ori	r30, 0x10	; 16
 3d8:	e0 93 98 03 	sts	0x0398, r30
				break;
 3dc:	c5 c3       	rjmp	.+1930   	; 0xb68 <retrieve_gps_data+0x8fc>


			case GPSI_PRELIM3:
				telem.last_satellite = usart1_buffer[usart1_index];
 3de:	e0 91 8e 03 	lds	r30, 0x038E
 3e2:	f0 91 8f 03 	lds	r31, 0x038F
 3e6:	e7 56       	subi	r30, 0x67	; 103
 3e8:	fc 4f       	sbci	r31, 0xFC	; 252
 3ea:	e0 81       	ld	r30, Z
 3ec:	e0 93 95 03 	sts	0x0395, r30
 3f0:	3e c3       	rjmp	.+1660   	; 0xa6e <retrieve_gps_data+0x802>
				set_usart_state(usart1_flags, GPSI_DONE);
				break;


			case  GPSI_ID1:
				if (usart1_buffer[usart1_index] == 'F')
 3f2:	e0 91 8e 03 	lds	r30, 0x038E
 3f6:	f0 91 8f 03 	lds	r31, 0x038F
 3fa:	e7 56       	subi	r30, 0x67	; 103
 3fc:	fc 4f       	sbci	r31, 0xFC	; 252
 3fe:	e0 81       	ld	r30, Z
				{
					set_usart_state(usart1_flags, GPSI_ID2);
 400:	f0 91 98 03 	lds	r31, 0x0398
				set_usart_state(usart1_flags, GPSI_DONE);
				break;


			case  GPSI_ID1:
				if (usart1_buffer[usart1_index] == 'F')
 404:	e6 34       	cpi	r30, 0x46	; 70
 406:	09 f0       	breq	.+2      	; 0x40a <retrieve_gps_data+0x19e>
 408:	a3 c3       	rjmp	.+1862   	; 0xb50 <retrieve_gps_data+0x8e4>
				{
					set_usart_state(usart1_flags, GPSI_ID2);
 40a:	e0 91 98 03 	lds	r30, 0x0398
 40e:	ec 7f       	andi	r30, 0xFC	; 252
 410:	ef 27       	eor	r30, r31
 412:	e8 61       	ori	r30, 0x18	; 24
 414:	e0 93 98 03 	sts	0x0398, r30
					rx_id[0] = 'F';
 418:	10 93 2e 0a 	sts	0x0A2E, r17
					rem_gen_state(error, GPSI_ERR_GEN);
 41c:	e0 91 ca 09 	lds	r30, 0x09CA
 420:	eb 7f       	andi	r30, 0xFB	; 251
 422:	a0 c3       	rjmp	.+1856   	; 0xb64 <retrieve_gps_data+0x8f8>
				}
				break;


			case  GPSI_ID2:
				switch(usart1_buffer[usart1_index])
 424:	e0 91 8e 03 	lds	r30, 0x038E
 428:	f0 91 8f 03 	lds	r31, 0x038F
 42c:	e7 56       	subi	r30, 0x67	; 103
 42e:	fc 4f       	sbci	r31, 0xFC	; 252
 430:	e0 81       	ld	r30, Z
 432:	e0 33       	cpi	r30, 0x30	; 48
 434:	08 f4       	brcc	.+2      	; 0x438 <retrieve_gps_data+0x1cc>
 436:	8a c3       	rjmp	.+1812   	; 0xb4c <retrieve_gps_data+0x8e0>
 438:	e3 33       	cpi	r30, 0x33	; 51
 43a:	18 f0       	brcs	.+6      	; 0x442 <retrieve_gps_data+0x1d6>
 43c:	e9 33       	cpi	r30, 0x39	; 57
 43e:	09 f0       	breq	.+2      	; 0x442 <retrieve_gps_data+0x1d6>
 440:	85 c3       	rjmp	.+1802   	; 0xb4c <retrieve_gps_data+0x8e0>
					// Four possible valid options here
					case '0':
					case '1':
					case '2':
					case '9':
						set_usart_state(usart1_flags, GPSI_ID3);
 442:	f0 91 98 03 	lds	r31, 0x0398
 446:	e0 91 98 03 	lds	r30, 0x0398
 44a:	ec 7f       	andi	r30, 0xFC	; 252
 44c:	ef 27       	eor	r30, r31
 44e:	ec 61       	ori	r30, 0x1C	; 28
 450:	e0 93 98 03 	sts	0x0398, r30
						rx_id[1] = usart1_buffer[usart1_index];
 454:	e0 91 8e 03 	lds	r30, 0x038E
 458:	f0 91 8f 03 	lds	r31, 0x038F
 45c:	e7 56       	subi	r30, 0x67	; 103
 45e:	fc 4f       	sbci	r31, 0xFC	; 252
 460:	e0 81       	ld	r30, Z
 462:	e0 93 2f 0a 	sts	0x0A2F, r30
 466:	da cf       	rjmp	.-76     	; 0x41c <retrieve_gps_data+0x1b0>
				}
				break;


			case  GPSI_ID3:
				rx_id[2] = usart1_buffer[usart1_index];
 468:	e0 91 8e 03 	lds	r30, 0x038E
 46c:	f0 91 8f 03 	lds	r31, 0x038F
 470:	e7 56       	subi	r30, 0x67	; 103
 472:	fc 4f       	sbci	r31, 0xFC	; 252
 474:	e0 81       	ld	r30, Z
 476:	e0 93 30 0a 	sts	0x0A30, r30
				rem_gen_state(error, GPSI_ERR_GEN);
 47a:	f0 91 ca 09 	lds	r31, 0x09CA
 47e:	fb 7f       	andi	r31, 0xFB	; 251
 480:	f0 93 ca 09 	sts	0x09CA, r31
				if (rx_id[1] == '0' && rx_id[2] == '0')			// F00
 484:	00 91 2f 0a 	lds	r16, 0x0A2F
 488:	00 33       	cpi	r16, 0x30	; 48
 48a:	a9 f4       	brne	.+42     	; 0x4b6 <retrieve_gps_data+0x24a>
 48c:	e0 33       	cpi	r30, 0x30	; 48
 48e:	09 f0       	breq	.+2      	; 0x492 <retrieve_gps_data+0x226>
 490:	99 c3       	rjmp	.+1842   	; 0xbc4 <retrieve_gps_data+0x958>
					set_usart_state(usart1_flags, GPSI_S1);
 492:	f0 91 98 03 	lds	r31, 0x0398
 496:	e0 91 98 03 	lds	r30, 0x0398
 49a:	ec 7f       	andi	r30, 0xFC	; 252
 49c:	ef 27       	eor	r30, r31
 49e:	e0 62       	ori	r30, 0x20	; 32
 4a0:	07 c0       	rjmp	.+14     	; 0x4b0 <retrieve_gps_data+0x244>
				else if (rx_id[2] == '3' && rx_id[1] == '0')	// F03
					set_usart_state(usart1_flags, GPSI_S2);
 4a2:	f0 91 98 03 	lds	r31, 0x0398
 4a6:	e0 91 98 03 	lds	r30, 0x0398
 4aa:	ec 7f       	andi	r30, 0xFC	; 252
 4ac:	ef 27       	eor	r30, r31
 4ae:	e4 62       	ori	r30, 0x24	; 36
 4b0:	e0 93 98 03 	sts	0x0398, r30
 4b4:	39 c0       	rjmp	.+114    	; 0x528 <retrieve_gps_data+0x2bc>
				else if (rx_id[1] == '1' && rx_id[2] == '8')	// F18
 4b6:	01 33       	cpi	r16, 0x31	; 49
 4b8:	51 f4       	brne	.+20     	; 0x4ce <retrieve_gps_data+0x262>
 4ba:	e8 33       	cpi	r30, 0x38	; 56
 4bc:	49 f5       	brne	.+82     	; 0x510 <retrieve_gps_data+0x2a4>
					set_usart_state(usart1_flags, GPSI_S3);
 4be:	f0 91 98 03 	lds	r31, 0x0398
 4c2:	e0 91 98 03 	lds	r30, 0x0398
 4c6:	ec 7f       	andi	r30, 0xFC	; 252
 4c8:	ef 27       	eor	r30, r31
 4ca:	e8 62       	ori	r30, 0x28	; 40
 4cc:	f1 cf       	rjmp	.-30     	; 0x4b0 <retrieve_gps_data+0x244>
				else if (rx_id[1] == '2' && rx_id[2] == '2')	// F22
 4ce:	02 33       	cpi	r16, 0x32	; 50
 4d0:	99 f4       	brne	.+38     	; 0x4f8 <retrieve_gps_data+0x28c>
 4d2:	e2 33       	cpi	r30, 0x32	; 50
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <retrieve_gps_data+0x26c>
 4d6:	7a c3       	rjmp	.+1780   	; 0xbcc <retrieve_gps_data+0x960>
					set_usart_state(usart1_flags, GPSI_S4);
 4d8:	f0 91 98 03 	lds	r31, 0x0398
 4dc:	e0 91 98 03 	lds	r30, 0x0398
 4e0:	ec 7f       	andi	r30, 0xFC	; 252
 4e2:	ef 27       	eor	r30, r31
 4e4:	ec 62       	ori	r30, 0x2C	; 44
 4e6:	e4 cf       	rjmp	.-56     	; 0x4b0 <retrieve_gps_data+0x244>
				else if (rx_id[2] == '3' && rx_id[1] == '2')	// F23
					set_usart_state(usart1_flags, GPSI_S5);
 4e8:	f0 91 98 03 	lds	r31, 0x0398
 4ec:	e0 91 98 03 	lds	r30, 0x0398
 4f0:	ec 7f       	andi	r30, 0xFC	; 252
 4f2:	ef 27       	eor	r30, r31
 4f4:	e0 63       	ori	r30, 0x30	; 48
 4f6:	dc cf       	rjmp	.-72     	; 0x4b0 <retrieve_gps_data+0x244>
				else if (rx_id[1] == '9' && rx_id[2] == '9')	// f99
 4f8:	09 33       	cpi	r16, 0x39	; 57
 4fa:	51 f4       	brne	.+20     	; 0x510 <retrieve_gps_data+0x2a4>
 4fc:	e9 33       	cpi	r30, 0x39	; 57
 4fe:	41 f4       	brne	.+16     	; 0x510 <retrieve_gps_data+0x2a4>
					set_usart_state(usart1_flags, GPSI_PRELIM1);
 500:	f0 91 98 03 	lds	r31, 0x0398
 504:	e0 91 98 03 	lds	r30, 0x0398
 508:	ec 7f       	andi	r30, 0xFC	; 252
 50a:	ef 27       	eor	r30, r31
 50c:	e8 60       	ori	r30, 0x08	; 8
 50e:	d0 cf       	rjmp	.-96     	; 0x4b0 <retrieve_gps_data+0x244>
				else
				{
					set_usart_state(usart1_flags, GPSI_UNKNOWN);
 510:	00 91 98 03 	lds	r16, 0x0398
 514:	e0 91 98 03 	lds	r30, 0x0398
 518:	ec 7f       	andi	r30, 0xFC	; 252
 51a:	e0 27       	eor	r30, r16
 51c:	e4 60       	ori	r30, 0x04	; 4
 51e:	e0 93 98 03 	sts	0x0398, r30
					set_gen_state(error, GPSI_ERR_GEN);
 522:	f4 60       	ori	r31, 0x04	; 4
 524:	f0 93 ca 09 	sts	0x09CA, r31
				}

				count = 0;
 528:	10 92 82 07 	sts	0x0782, r1
 52c:	10 92 83 07 	sts	0x0783, r1
 530:	10 92 84 07 	sts	0x0784, r1
 534:	10 92 85 07 	sts	0x0785, r1
				break;
 538:	17 c3       	rjmp	.+1582   	; 0xb68 <retrieve_gps_data+0x8fc>


			case  GPSI_S1: // F00
				if (count == 0)
 53a:	40 90 82 07 	lds	r4, 0x0782
 53e:	50 90 83 07 	lds	r5, 0x0783
 542:	60 90 84 07 	lds	r6, 0x0784
 546:	70 90 85 07 	lds	r7, 0x0785
 54a:	41 14       	cp	r4, r1
 54c:	51 04       	cpc	r5, r1
 54e:	61 04       	cpc	r6, r1
 550:	71 04       	cpc	r7, r1
 552:	21 f4       	brne	.+8      	; 0x55c <retrieve_gps_data+0x2f0>
				{
					checksum[0] = 0;
 554:	10 92 2c 0a 	sts	0x0A2C, r1
					checksum[1] = 0;
 558:	10 92 2d 0a 	sts	0x0A2D, r1
				}

				((uint8ptr)&f00)[count] = usart1_buffer[usart1_index];
 55c:	e0 91 8e 03 	lds	r30, 0x038E
 560:	f0 91 8f 03 	lds	r31, 0x038F
 564:	c6 e4       	ldi	r28, 0x46	; 70
 566:	ec 2e       	mov	r14, r28
 568:	c3 e0       	ldi	r28, 0x03	; 3
 56a:	fc 2e       	mov	r15, r28
 56c:	e4 0c       	add	r14, r4
 56e:	f5 1c       	adc	r15, r5
 570:	e7 56       	subi	r30, 0x67	; 103
 572:	fc 4f       	sbci	r31, 0xFC	; 252
 574:	c0 81       	ld	r28, Z
 576:	f7 01       	movw	r30, r14
 578:	c0 83       	st	Z, r28
				checksum[count%2] = checksum[count%2]^usart1_buffer[usart1_index];
 57a:	c1 2c       	mov	r12, r1
 57c:	d1 2c       	mov	r13, r1
 57e:	76 01       	movw	r14, r12
 580:	c3 94       	inc	r12
 582:	c4 20       	and	r12, r4
 584:	d5 20       	and	r13, r5
 586:	e6 20       	and	r14, r6
 588:	f7 20       	and	r15, r7
 58a:	e0 91 8e 03 	lds	r30, 0x038E
 58e:	f0 91 8f 03 	lds	r31, 0x038F
 592:	0c e2       	ldi	r16, 0x2C	; 44
 594:	e0 2e       	mov	r14, r16
 596:	0a e0       	ldi	r16, 0x0A	; 10
 598:	f0 2e       	mov	r15, r16
 59a:	ec 0c       	add	r14, r12
 59c:	fd 1c       	adc	r15, r13
 59e:	e7 56       	subi	r30, 0x67	; 103
 5a0:	fc 4f       	sbci	r31, 0xFC	; 252
 5a2:	e7 01       	movw	r28, r14
 5a4:	08 81       	ld	r16, Y
 5a6:	e0 81       	ld	r30, Z
 5a8:	0e 27       	eor	r16, r30
 5aa:	08 83       	st	Y, r16
				count++;
 5ac:	df ef       	ldi	r29, 0xFF	; 255
 5ae:	4d 1a       	sub	r4, r29
 5b0:	5d 0a       	sbc	r5, r29
 5b2:	6d 0a       	sbc	r6, r29
 5b4:	7d 0a       	sbc	r7, r29
 5b6:	40 92 82 07 	sts	0x0782, r4
 5ba:	50 92 83 07 	sts	0x0783, r5
 5be:	60 92 84 07 	sts	0x0784, r6
 5c2:	70 92 85 07 	sts	0x0785, r7

				if (count == sizeof(gps_f00))
 5c6:	e8 e4       	ldi	r30, 0x48	; 72
 5c8:	4e 16       	cp	r4, r30
 5ca:	51 04       	cpc	r5, r1
 5cc:	61 04       	cpc	r6, r1
 5ce:	71 04       	cpc	r7, r1
 5d0:	09 f0       	breq	.+2      	; 0x5d4 <retrieve_gps_data+0x368>
 5d2:	ca c2       	rjmp	.+1428   	; 0xb68 <retrieve_gps_data+0x8fc>
				{
					count = 0;
 5d4:	10 92 82 07 	sts	0x0782, r1
 5d8:	10 92 83 07 	sts	0x0783, r1
 5dc:	10 92 84 07 	sts	0x0784, r1
 5e0:	10 92 85 07 	sts	0x0785, r1
					set_usart_state(usart1_flags, GPSI_CHKS1A);
 5e4:	f0 91 98 03 	lds	r31, 0x0398
 5e8:	e0 91 98 03 	lds	r30, 0x0398
 5ec:	ec 7f       	andi	r30, 0xFC	; 252
 5ee:	ef 27       	eor	r30, r31
 5f0:	e4 63       	ori	r30, 0x34	; 52
 5f2:	f2 ce       	rjmp	.-540    	; 0x3d8 <retrieve_gps_data+0x16c>
				}
				break;


			case  GPSI_S2: // F03
				if (count == 0)
 5f4:	40 90 82 07 	lds	r4, 0x0782
 5f8:	50 90 83 07 	lds	r5, 0x0783
 5fc:	60 90 84 07 	lds	r6, 0x0784
 600:	70 90 85 07 	lds	r7, 0x0785
 604:	41 14       	cp	r4, r1
 606:	51 04       	cpc	r5, r1
 608:	61 04       	cpc	r6, r1
 60a:	71 04       	cpc	r7, r1
 60c:	21 f4       	brne	.+8      	; 0x616 <retrieve_gps_data+0x3aa>
				{
					checksum[0] = 0;
 60e:	10 92 2c 0a 	sts	0x0A2C, r1
					checksum[1] = 0;
 612:	10 92 2d 0a 	sts	0x0A2D, r1
				}

				((uint8ptr)&f03)[count] = usart1_buffer[usart1_index];
 616:	e0 91 8e 03 	lds	r30, 0x038E
 61a:	f0 91 8f 03 	lds	r31, 0x038F
 61e:	cd ee       	ldi	r28, 0xED	; 237
 620:	ec 2e       	mov	r14, r28
 622:	c1 e0       	ldi	r28, 0x01	; 1
 624:	fc 2e       	mov	r15, r28
 626:	e4 0c       	add	r14, r4
 628:	f5 1c       	adc	r15, r5
 62a:	e7 56       	subi	r30, 0x67	; 103
 62c:	fc 4f       	sbci	r31, 0xFC	; 252
 62e:	e0 81       	ld	r30, Z
 630:	e7 01       	movw	r28, r14
 632:	e8 83       	st	Y, r30
				checksum[count%2] = checksum[count%2]^usart1_buffer[usart1_index];
 634:	c1 2c       	mov	r12, r1
 636:	d1 2c       	mov	r13, r1
 638:	76 01       	movw	r14, r12
 63a:	c3 94       	inc	r12
 63c:	c4 20       	and	r12, r4
 63e:	d5 20       	and	r13, r5
 640:	e6 20       	and	r14, r6
 642:	f7 20       	and	r15, r7
 644:	e0 91 8e 03 	lds	r30, 0x038E
 648:	f0 91 8f 03 	lds	r31, 0x038F
 64c:	0c e2       	ldi	r16, 0x2C	; 44
 64e:	e0 2e       	mov	r14, r16
 650:	0a e0       	ldi	r16, 0x0A	; 10
 652:	f0 2e       	mov	r15, r16
 654:	ec 0c       	add	r14, r12
 656:	fd 1c       	adc	r15, r13
 658:	e7 56       	subi	r30, 0x67	; 103
 65a:	fc 4f       	sbci	r31, 0xFC	; 252
 65c:	e7 01       	movw	r28, r14
 65e:	08 81       	ld	r16, Y
 660:	e0 81       	ld	r30, Z
 662:	0e 27       	eor	r16, r30
 664:	08 83       	st	Y, r16
				count++;
 666:	df ef       	ldi	r29, 0xFF	; 255
 668:	4d 1a       	sub	r4, r29
 66a:	5d 0a       	sbc	r5, r29
 66c:	6d 0a       	sbc	r6, r29
 66e:	7d 0a       	sbc	r7, r29
 670:	40 92 82 07 	sts	0x0782, r4
 674:	50 92 83 07 	sts	0x0783, r5
 678:	60 92 84 07 	sts	0x0784, r6
 67c:	70 92 85 07 	sts	0x0785, r7

				if (count == sizeof(gps_f03))
 680:	e8 ed       	ldi	r30, 0xD8	; 216
 682:	4e 16       	cp	r4, r30
 684:	51 04       	cpc	r5, r1
 686:	61 04       	cpc	r6, r1
 688:	71 04       	cpc	r7, r1
 68a:	09 f0       	breq	.+2      	; 0x68e <retrieve_gps_data+0x422>
 68c:	6d c2       	rjmp	.+1242   	; 0xb68 <retrieve_gps_data+0x8fc>
				{
					count = 0;
 68e:	10 92 82 07 	sts	0x0782, r1
 692:	10 92 83 07 	sts	0x0783, r1
 696:	10 92 84 07 	sts	0x0784, r1
 69a:	10 92 85 07 	sts	0x0785, r1
					set_usart_state(usart1_flags, GPSI_CHKS2A);
 69e:	f0 91 98 03 	lds	r31, 0x0398
 6a2:	e0 91 98 03 	lds	r30, 0x0398
 6a6:	ec 7f       	andi	r30, 0xFC	; 252
 6a8:	ef 27       	eor	r30, r31
 6aa:	ec 63       	ori	r30, 0x3C	; 60
 6ac:	95 ce       	rjmp	.-726    	; 0x3d8 <retrieve_gps_data+0x16c>
				}
				break;


			case  GPSI_S3: // F18
				if (count == 0)
 6ae:	40 90 82 07 	lds	r4, 0x0782
 6b2:	50 90 83 07 	lds	r5, 0x0783
 6b6:	60 90 84 07 	lds	r6, 0x0784
 6ba:	70 90 85 07 	lds	r7, 0x0785
 6be:	41 14       	cp	r4, r1
 6c0:	51 04       	cpc	r5, r1
 6c2:	61 04       	cpc	r6, r1
 6c4:	71 04       	cpc	r7, r1
 6c6:	21 f4       	brne	.+8      	; 0x6d0 <retrieve_gps_data+0x464>
				{
					checksum[0] = 0;
 6c8:	10 92 2c 0a 	sts	0x0A2C, r1
					checksum[1] = 0;
 6cc:	10 92 2d 0a 	sts	0x0A2D, r1
				}

				((uint8ptr)&f18)[count] = usart1_buffer[usart1_index];
 6d0:	e0 91 8e 03 	lds	r30, 0x038E
 6d4:	f0 91 8f 03 	lds	r31, 0x038F
 6d8:	cb e2       	ldi	r28, 0x2B	; 43
 6da:	ec 2e       	mov	r14, r28
 6dc:	c1 e0       	ldi	r28, 0x01	; 1
 6de:	fc 2e       	mov	r15, r28
 6e0:	e4 0c       	add	r14, r4
 6e2:	f5 1c       	adc	r15, r5
 6e4:	e7 56       	subi	r30, 0x67	; 103
 6e6:	fc 4f       	sbci	r31, 0xFC	; 252
 6e8:	e0 81       	ld	r30, Z
 6ea:	e7 01       	movw	r28, r14
 6ec:	e8 83       	st	Y, r30
				checksum[count%2] = checksum[count%2]^usart1_buffer[usart1_index];
 6ee:	c1 2c       	mov	r12, r1
 6f0:	d1 2c       	mov	r13, r1
 6f2:	76 01       	movw	r14, r12
 6f4:	c3 94       	inc	r12
 6f6:	c4 20       	and	r12, r4
 6f8:	d5 20       	and	r13, r5
 6fa:	e6 20       	and	r14, r6
 6fc:	f7 20       	and	r15, r7
 6fe:	e0 91 8e 03 	lds	r30, 0x038E
 702:	f0 91 8f 03 	lds	r31, 0x038F
 706:	0c e2       	ldi	r16, 0x2C	; 44
 708:	e0 2e       	mov	r14, r16
 70a:	0a e0       	ldi	r16, 0x0A	; 10
 70c:	f0 2e       	mov	r15, r16
 70e:	ec 0c       	add	r14, r12
 710:	fd 1c       	adc	r15, r13
 712:	e7 56       	subi	r30, 0x67	; 103
 714:	fc 4f       	sbci	r31, 0xFC	; 252
 716:	e7 01       	movw	r28, r14
 718:	08 81       	ld	r16, Y
 71a:	e0 81       	ld	r30, Z
 71c:	0e 27       	eor	r16, r30
 71e:	08 83       	st	Y, r16
				count++;
 720:	df ef       	ldi	r29, 0xFF	; 255
 722:	4d 1a       	sub	r4, r29
 724:	5d 0a       	sbc	r5, r29
 726:	6d 0a       	sbc	r6, r29
 728:	7d 0a       	sbc	r7, r29
 72a:	40 92 82 07 	sts	0x0782, r4
 72e:	50 92 83 07 	sts	0x0783, r5
 732:	60 92 84 07 	sts	0x0784, r6
 736:	70 92 85 07 	sts	0x0785, r7

				if (count == sizeof(gps_f18))
 73a:	e0 ec       	ldi	r30, 0xC0	; 192
 73c:	4e 16       	cp	r4, r30
 73e:	51 04       	cpc	r5, r1
 740:	61 04       	cpc	r6, r1
 742:	71 04       	cpc	r7, r1
 744:	09 f0       	breq	.+2      	; 0x748 <retrieve_gps_data+0x4dc>
 746:	10 c2       	rjmp	.+1056   	; 0xb68 <retrieve_gps_data+0x8fc>
				{
					count = 0;
 748:	10 92 82 07 	sts	0x0782, r1
 74c:	10 92 83 07 	sts	0x0783, r1
 750:	10 92 84 07 	sts	0x0784, r1
 754:	10 92 85 07 	sts	0x0785, r1
					set_usart_state(usart1_flags, GPSI_CHKS3A);
 758:	f0 91 98 03 	lds	r31, 0x0398
 75c:	e0 91 98 03 	lds	r30, 0x0398
 760:	ec 7f       	andi	r30, 0xFC	; 252
 762:	ef 27       	eor	r30, r31
 764:	e4 64       	ori	r30, 0x44	; 68
 766:	38 ce       	rjmp	.-912    	; 0x3d8 <retrieve_gps_data+0x16c>
				}
				break;


			case  GPSI_S4: // F22
				if (count == 0)
 768:	40 90 82 07 	lds	r4, 0x0782
 76c:	50 90 83 07 	lds	r5, 0x0783
 770:	60 90 84 07 	lds	r6, 0x0784
 774:	70 90 85 07 	lds	r7, 0x0785
 778:	41 14       	cp	r4, r1
 77a:	51 04       	cpc	r5, r1
 77c:	61 04       	cpc	r6, r1
 77e:	71 04       	cpc	r7, r1
 780:	21 f4       	brne	.+8      	; 0x78a <retrieve_gps_data+0x51e>
				{
					checksum[0] = 0;
 782:	10 92 2c 0a 	sts	0x0A2C, r1
					checksum[1] = 0;
 786:	10 92 2d 0a 	sts	0x0A2D, r1
				}

				((uint8ptr)&f22)[count] = usart1_buffer[usart1_index];
 78a:	e0 91 8e 03 	lds	r30, 0x038E
 78e:	f0 91 8f 03 	lds	r31, 0x038F
 792:	cb ec       	ldi	r28, 0xCB	; 203
 794:	ec 2e       	mov	r14, r28
 796:	c2 e0       	ldi	r28, 0x02	; 2
 798:	fc 2e       	mov	r15, r28
 79a:	e4 0c       	add	r14, r4
 79c:	f5 1c       	adc	r15, r5
 79e:	e7 56       	subi	r30, 0x67	; 103
 7a0:	fc 4f       	sbci	r31, 0xFC	; 252
 7a2:	e0 81       	ld	r30, Z
 7a4:	e7 01       	movw	r28, r14
 7a6:	e8 83       	st	Y, r30
				checksum[count%2] = checksum[count%2]^usart1_buffer[usart1_index];
 7a8:	c1 2c       	mov	r12, r1
 7aa:	d1 2c       	mov	r13, r1
 7ac:	76 01       	movw	r14, r12
 7ae:	c3 94       	inc	r12
 7b0:	c4 20       	and	r12, r4
 7b2:	d5 20       	and	r13, r5
 7b4:	e6 20       	and	r14, r6
 7b6:	f7 20       	and	r15, r7
 7b8:	e0 91 8e 03 	lds	r30, 0x038E
 7bc:	f0 91 8f 03 	lds	r31, 0x038F
 7c0:	0c e2       	ldi	r16, 0x2C	; 44
 7c2:	e0 2e       	mov	r14, r16
 7c4:	0a e0       	ldi	r16, 0x0A	; 10
 7c6:	f0 2e       	mov	r15, r16
 7c8:	ec 0c       	add	r14, r12
 7ca:	fd 1c       	adc	r15, r13
 7cc:	e7 56       	subi	r30, 0x67	; 103
 7ce:	fc 4f       	sbci	r31, 0xFC	; 252
 7d0:	e7 01       	movw	r28, r14
 7d2:	08 81       	ld	r16, Y
 7d4:	e0 81       	ld	r30, Z
 7d6:	0e 27       	eor	r16, r30
 7d8:	08 83       	st	Y, r16
				count++;
 7da:	df ef       	ldi	r29, 0xFF	; 255
 7dc:	4d 1a       	sub	r4, r29
 7de:	5d 0a       	sbc	r5, r29
 7e0:	6d 0a       	sbc	r6, r29
 7e2:	7d 0a       	sbc	r7, r29
 7e4:	40 92 82 07 	sts	0x0782, r4
 7e8:	50 92 83 07 	sts	0x0783, r5
 7ec:	60 92 84 07 	sts	0x0784, r6
 7f0:	70 92 85 07 	sts	0x0785, r7

				if (count == sizeof(gps_f22))
 7f4:	e8 e7       	ldi	r30, 0x78	; 120
 7f6:	4e 16       	cp	r4, r30
 7f8:	51 04       	cpc	r5, r1
 7fa:	61 04       	cpc	r6, r1
 7fc:	71 04       	cpc	r7, r1
 7fe:	09 f0       	breq	.+2      	; 0x802 <retrieve_gps_data+0x596>
 800:	b3 c1       	rjmp	.+870    	; 0xb68 <retrieve_gps_data+0x8fc>
				{
					count = 0;
 802:	10 92 82 07 	sts	0x0782, r1
 806:	10 92 83 07 	sts	0x0783, r1
 80a:	10 92 84 07 	sts	0x0784, r1
 80e:	10 92 85 07 	sts	0x0785, r1
					set_usart_state(usart1_flags, GPSI_CHKS4A);
 812:	f0 91 98 03 	lds	r31, 0x0398
 816:	e0 91 98 03 	lds	r30, 0x0398
 81a:	ec 7f       	andi	r30, 0xFC	; 252
 81c:	ef 27       	eor	r30, r31
 81e:	ec 64       	ori	r30, 0x4C	; 76
 820:	db cd       	rjmp	.-1098   	; 0x3d8 <retrieve_gps_data+0x16c>
				}
				break;


			case  GPSI_S5: // F23
				if (count == 0)
 822:	40 90 82 07 	lds	r4, 0x0782
 826:	50 90 83 07 	lds	r5, 0x0783
 82a:	60 90 84 07 	lds	r6, 0x0784
 82e:	70 90 85 07 	lds	r7, 0x0785
 832:	41 14       	cp	r4, r1
 834:	51 04       	cpc	r5, r1
 836:	61 04       	cpc	r6, r1
 838:	71 04       	cpc	r7, r1
 83a:	21 f4       	brne	.+8      	; 0x844 <retrieve_gps_data+0x5d8>
				{
					checksum[0] = 0;
 83c:	10 92 2c 0a 	sts	0x0A2C, r1
					checksum[1] = 0;
 840:	10 92 2d 0a 	sts	0x0A2D, r1
				}

				((uint8ptr)&f23)[count] = usart1_buffer[usart1_index];
 844:	e0 91 8e 03 	lds	r30, 0x038E
 848:	f0 91 8f 03 	lds	r31, 0x038F
 84c:	cc ec       	ldi	r28, 0xCC	; 204
 84e:	ec 2e       	mov	r14, r28
 850:	c9 e0       	ldi	r28, 0x09	; 9
 852:	fc 2e       	mov	r15, r28
 854:	e4 0c       	add	r14, r4
 856:	f5 1c       	adc	r15, r5
 858:	e7 56       	subi	r30, 0x67	; 103
 85a:	fc 4f       	sbci	r31, 0xFC	; 252
 85c:	e0 81       	ld	r30, Z
 85e:	e7 01       	movw	r28, r14
 860:	e8 83       	st	Y, r30
				checksum[count%2] = checksum[count%2]^usart1_buffer[usart1_index];
 862:	c1 2c       	mov	r12, r1
 864:	d1 2c       	mov	r13, r1
 866:	76 01       	movw	r14, r12
 868:	c3 94       	inc	r12
 86a:	c4 20       	and	r12, r4
 86c:	d5 20       	and	r13, r5
 86e:	e6 20       	and	r14, r6
 870:	f7 20       	and	r15, r7
 872:	e0 91 8e 03 	lds	r30, 0x038E
 876:	f0 91 8f 03 	lds	r31, 0x038F
 87a:	0c e2       	ldi	r16, 0x2C	; 44
 87c:	e0 2e       	mov	r14, r16
 87e:	0a e0       	ldi	r16, 0x0A	; 10
 880:	f0 2e       	mov	r15, r16
 882:	ec 0c       	add	r14, r12
 884:	fd 1c       	adc	r15, r13
 886:	e7 56       	subi	r30, 0x67	; 103
 888:	fc 4f       	sbci	r31, 0xFC	; 252
 88a:	e7 01       	movw	r28, r14
 88c:	08 81       	ld	r16, Y
 88e:	e0 81       	ld	r30, Z
 890:	0e 27       	eor	r16, r30
 892:	08 83       	st	Y, r16
				count++;
 894:	df ef       	ldi	r29, 0xFF	; 255
 896:	4d 1a       	sub	r4, r29
 898:	5d 0a       	sbc	r5, r29
 89a:	6d 0a       	sbc	r6, r29
 89c:	7d 0a       	sbc	r7, r29
 89e:	40 92 82 07 	sts	0x0782, r4
 8a2:	50 92 83 07 	sts	0x0783, r5
 8a6:	60 92 84 07 	sts	0x0784, r6
 8aa:	70 92 85 07 	sts	0x0785, r7

				if (count == sizeof(gps_f23))
 8ae:	e0 e6       	ldi	r30, 0x60	; 96
 8b0:	4e 16       	cp	r4, r30
 8b2:	51 04       	cpc	r5, r1
 8b4:	61 04       	cpc	r6, r1
 8b6:	71 04       	cpc	r7, r1
 8b8:	09 f0       	breq	.+2      	; 0x8bc <retrieve_gps_data+0x650>
 8ba:	56 c1       	rjmp	.+684    	; 0xb68 <retrieve_gps_data+0x8fc>
				{
					count = 0;
 8bc:	10 92 82 07 	sts	0x0782, r1
 8c0:	10 92 83 07 	sts	0x0783, r1
 8c4:	10 92 84 07 	sts	0x0784, r1
 8c8:	10 92 85 07 	sts	0x0785, r1
					set_usart_state(usart1_flags, GPSI_CHKS5A);
 8cc:	f0 91 98 03 	lds	r31, 0x0398
 8d0:	e0 91 98 03 	lds	r30, 0x0398
 8d4:	ec 7f       	andi	r30, 0xFC	; 252
 8d6:	ef 27       	eor	r30, r31
 8d8:	e4 65       	ori	r30, 0x54	; 84
 8da:	7e cd       	rjmp	.-1284   	; 0x3d8 <retrieve_gps_data+0x16c>
				}
				break;


			case  GPSI_CHKS1A: // F00 Checksum Byte 0
				rec_checksum[0] = usart1_buffer[usart1_index];
 8dc:	e0 91 8e 03 	lds	r30, 0x038E
 8e0:	f0 91 8f 03 	lds	r31, 0x038F
 8e4:	e7 56       	subi	r30, 0x67	; 103
 8e6:	fc 4f       	sbci	r31, 0xFC	; 252
 8e8:	e0 81       	ld	r30, Z
 8ea:	e0 93 c5 02 	sts	0x02C5, r30
				set_usart_state(usart1_flags, GPSI_CHKS1B);
 8ee:	f0 91 98 03 	lds	r31, 0x0398
 8f2:	e0 91 98 03 	lds	r30, 0x0398
 8f6:	ec 7f       	andi	r30, 0xFC	; 252
 8f8:	ef 27       	eor	r30, r31
 8fa:	e8 63       	ori	r30, 0x38	; 56
 8fc:	6d cd       	rjmp	.-1318   	; 0x3d8 <retrieve_gps_data+0x16c>
				break;


			case  GPSI_CHKS1B: // F00 Checksum Byte 1
				rec_checksum[1] = usart1_buffer[usart1_index];
 8fe:	e0 91 8e 03 	lds	r30, 0x038E
 902:	f0 91 8f 03 	lds	r31, 0x038F
 906:	e7 56       	subi	r30, 0x67	; 103
 908:	fc 4f       	sbci	r31, 0xFC	; 252
 90a:	e0 81       	ld	r30, Z
 90c:	e0 93 c6 02 	sts	0x02C6, r30

				if (rec_checksum[0] != checksum[0] || rec_checksum[1] != checksum[1])
 910:	00 91 c5 02 	lds	r16, 0x02C5
 914:	f0 91 2c 0a 	lds	r31, 0x0A2C
 918:	0f 13       	cpse	r16, r31
 91a:	05 c0       	rjmp	.+10     	; 0x926 <retrieve_gps_data+0x6ba>
 91c:	f0 91 2d 0a 	lds	r31, 0x0A2D
 920:	ef 17       	cp	r30, r31
 922:	09 f4       	brne	.+2      	; 0x926 <retrieve_gps_data+0x6ba>
 924:	a4 c0       	rjmp	.+328    	; 0xa6e <retrieve_gps_data+0x802>
					memset(&f00, 0x00, sizeof(gps_f00));	// Checksum failed - Write zeros to F00
 926:	ed 01       	movw	r28, r26
 928:	e8 e4       	ldi	r30, 0x48	; 72
 92a:	9e c0       	rjmp	.+316    	; 0xa68 <retrieve_gps_data+0x7fc>
				set_usart_state(usart1_flags, GPSI_DONE);
				break;


			case  GPSI_CHKS2A: // F03 Checksum Byte 0
				rec_checksum[0] = usart1_buffer[usart1_index];
 92c:	e0 91 8e 03 	lds	r30, 0x038E
 930:	f0 91 8f 03 	lds	r31, 0x038F
 934:	e7 56       	subi	r30, 0x67	; 103
 936:	fc 4f       	sbci	r31, 0xFC	; 252
 938:	e0 81       	ld	r30, Z
 93a:	e0 93 c5 02 	sts	0x02C5, r30
				set_usart_state(usart1_flags, GPSI_CHKS2B);
 93e:	f0 91 98 03 	lds	r31, 0x0398
 942:	e0 91 98 03 	lds	r30, 0x0398
 946:	ec 7f       	andi	r30, 0xFC	; 252
 948:	ef 27       	eor	r30, r31
 94a:	e0 64       	ori	r30, 0x40	; 64
 94c:	45 cd       	rjmp	.-1398   	; 0x3d8 <retrieve_gps_data+0x16c>
				break;


			case  GPSI_CHKS2B: // F03 Checksum Byte 1
				rec_checksum[1] = usart1_buffer[usart1_index];
 94e:	e0 91 8e 03 	lds	r30, 0x038E
 952:	f0 91 8f 03 	lds	r31, 0x038F
 956:	e7 56       	subi	r30, 0x67	; 103
 958:	fc 4f       	sbci	r31, 0xFC	; 252
 95a:	e0 81       	ld	r30, Z
 95c:	e0 93 c6 02 	sts	0x02C6, r30

				if (rec_checksum[0] != checksum[0] || rec_checksum[1] != checksum[1])
 960:	00 91 c5 02 	lds	r16, 0x02C5
 964:	f0 91 2c 0a 	lds	r31, 0x0A2C
 968:	0f 13       	cpse	r16, r31
 96a:	05 c0       	rjmp	.+10     	; 0x976 <retrieve_gps_data+0x70a>
 96c:	f0 91 2d 0a 	lds	r31, 0x0A2D
 970:	ef 17       	cp	r30, r31
 972:	09 f4       	brne	.+2      	; 0x976 <retrieve_gps_data+0x70a>
 974:	7c c0       	rjmp	.+248    	; 0xa6e <retrieve_gps_data+0x802>
					memset(&f03, 0x00, sizeof(gps_f03));	// Checksum failed - Write zeros to F03
 976:	cd ee       	ldi	r28, 0xED	; 237
 978:	d1 e0       	ldi	r29, 0x01	; 1
 97a:	e8 ed       	ldi	r30, 0xD8	; 216
 97c:	75 c0       	rjmp	.+234    	; 0xa68 <retrieve_gps_data+0x7fc>
				set_usart_state(usart1_flags, GPSI_DONE);
				break;


			case  GPSI_CHKS3A: // F18 Checksum Byte 0
				rec_checksum[0] = usart1_buffer[usart1_index];
 97e:	e0 91 8e 03 	lds	r30, 0x038E
 982:	f0 91 8f 03 	lds	r31, 0x038F
 986:	e7 56       	subi	r30, 0x67	; 103
 988:	fc 4f       	sbci	r31, 0xFC	; 252
 98a:	e0 81       	ld	r30, Z
 98c:	e0 93 c5 02 	sts	0x02C5, r30
				set_usart_state(usart1_flags, GPSI_CHKS3B);
 990:	f0 91 98 03 	lds	r31, 0x0398
 994:	e0 91 98 03 	lds	r30, 0x0398
 998:	ec 7f       	andi	r30, 0xFC	; 252
 99a:	ef 27       	eor	r30, r31
 99c:	e8 64       	ori	r30, 0x48	; 72
 99e:	1c cd       	rjmp	.-1480   	; 0x3d8 <retrieve_gps_data+0x16c>
				break;


			case  GPSI_CHKS3B: // F18 Checksum Byte 1
				rec_checksum[1] = usart1_buffer[usart1_index];
 9a0:	e0 91 8e 03 	lds	r30, 0x038E
 9a4:	f0 91 8f 03 	lds	r31, 0x038F
 9a8:	e7 56       	subi	r30, 0x67	; 103
 9aa:	fc 4f       	sbci	r31, 0xFC	; 252
 9ac:	e0 81       	ld	r30, Z
 9ae:	e0 93 c6 02 	sts	0x02C6, r30
				
				if (rec_checksum[0] != checksum[0] || rec_checksum[1] != checksum[1])
 9b2:	00 91 c5 02 	lds	r16, 0x02C5
 9b6:	f0 91 2c 0a 	lds	r31, 0x0A2C
 9ba:	0f 13       	cpse	r16, r31
 9bc:	05 c0       	rjmp	.+10     	; 0x9c8 <retrieve_gps_data+0x75c>
 9be:	f0 91 2d 0a 	lds	r31, 0x0A2D
 9c2:	ef 17       	cp	r30, r31
 9c4:	09 f4       	brne	.+2      	; 0x9c8 <retrieve_gps_data+0x75c>
 9c6:	53 c0       	rjmp	.+166    	; 0xa6e <retrieve_gps_data+0x802>
					memset(&f18, 0x00, sizeof(gps_f18));	// Checksum failed - Write zeros to F18
 9c8:	e1 01       	movw	r28, r2
 9ca:	e9 2f       	mov	r30, r25
 9cc:	4d c0       	rjmp	.+154    	; 0xa68 <retrieve_gps_data+0x7fc>
				set_usart_state(usart1_flags, GPSI_DONE);
				break;


			case  GPSI_CHKS4A: // F22 Checksum Byte 0
				rec_checksum[0] = usart1_buffer[usart1_index];
 9ce:	e0 91 8e 03 	lds	r30, 0x038E
 9d2:	f0 91 8f 03 	lds	r31, 0x038F
 9d6:	e7 56       	subi	r30, 0x67	; 103
 9d8:	fc 4f       	sbci	r31, 0xFC	; 252
 9da:	e0 81       	ld	r30, Z
 9dc:	e0 93 c5 02 	sts	0x02C5, r30
				set_usart_state(usart1_flags, GPSI_CHKS4B);
 9e0:	f0 91 98 03 	lds	r31, 0x0398
 9e4:	e0 91 98 03 	lds	r30, 0x0398
 9e8:	ec 7f       	andi	r30, 0xFC	; 252
 9ea:	ef 27       	eor	r30, r31
 9ec:	e0 65       	ori	r30, 0x50	; 80
 9ee:	f4 cc       	rjmp	.-1560   	; 0x3d8 <retrieve_gps_data+0x16c>
				break;


			case  GPSI_CHKS4B: // F22 Checksum Byte 1
				rec_checksum[1] = usart1_buffer[usart1_index];
 9f0:	e0 91 8e 03 	lds	r30, 0x038E
 9f4:	f0 91 8f 03 	lds	r31, 0x038F
 9f8:	e7 56       	subi	r30, 0x67	; 103
 9fa:	fc 4f       	sbci	r31, 0xFC	; 252
 9fc:	e0 81       	ld	r30, Z
 9fe:	e0 93 c6 02 	sts	0x02C6, r30

				if (rec_checksum[0] != checksum[0] || rec_checksum[1] != checksum[1])
 a02:	00 91 c5 02 	lds	r16, 0x02C5
 a06:	f0 91 2c 0a 	lds	r31, 0x0A2C
 a0a:	0f 13       	cpse	r16, r31
 a0c:	04 c0       	rjmp	.+8      	; 0xa16 <retrieve_gps_data+0x7aa>
 a0e:	f0 91 2d 0a 	lds	r31, 0x0A2D
 a12:	ef 17       	cp	r30, r31
 a14:	61 f1       	breq	.+88     	; 0xa6e <retrieve_gps_data+0x802>
					memset(&f22, 0x00, sizeof(gps_f22));	// Checksum failed - Write zeros to F22
 a16:	e5 01       	movw	r28, r10
 a18:	e7 2f       	mov	r30, r23
 a1a:	26 c0       	rjmp	.+76     	; 0xa68 <retrieve_gps_data+0x7fc>
				set_usart_state(usart1_flags, GPSI_DONE);
				break;


			case  GPSI_CHKS5A: // F23 Checksum Byte 0
				rec_checksum[0] = usart1_buffer[usart1_index];
 a1c:	e0 91 8e 03 	lds	r30, 0x038E
 a20:	f0 91 8f 03 	lds	r31, 0x038F
 a24:	e7 56       	subi	r30, 0x67	; 103
 a26:	fc 4f       	sbci	r31, 0xFC	; 252
 a28:	e0 81       	ld	r30, Z
 a2a:	e0 93 c5 02 	sts	0x02C5, r30
				set_usart_state(usart1_flags, GPSI_CHKS5B);
 a2e:	f0 91 98 03 	lds	r31, 0x0398
 a32:	e0 91 98 03 	lds	r30, 0x0398
 a36:	ec 7f       	andi	r30, 0xFC	; 252
 a38:	ef 27       	eor	r30, r31
 a3a:	e8 65       	ori	r30, 0x58	; 88
 a3c:	cd cc       	rjmp	.-1638   	; 0x3d8 <retrieve_gps_data+0x16c>
				break;


			case  GPSI_CHKS5B: // F23 Checksum Byte 1
				rec_checksum[1] = usart1_buffer[usart1_index];
 a3e:	e0 91 8e 03 	lds	r30, 0x038E
 a42:	f0 91 8f 03 	lds	r31, 0x038F
 a46:	e7 56       	subi	r30, 0x67	; 103
 a48:	fc 4f       	sbci	r31, 0xFC	; 252
 a4a:	e0 81       	ld	r30, Z
 a4c:	e0 93 c6 02 	sts	0x02C6, r30

				if (rec_checksum[0] != checksum[0] || rec_checksum[1] != checksum[1])
 a50:	00 91 c5 02 	lds	r16, 0x02C5
 a54:	f0 91 2c 0a 	lds	r31, 0x0A2C
 a58:	0f 13       	cpse	r16, r31
 a5a:	04 c0       	rjmp	.+8      	; 0xa64 <retrieve_gps_data+0x7f8>
 a5c:	f0 91 2d 0a 	lds	r31, 0x0A2D
 a60:	ef 17       	cp	r30, r31
 a62:	29 f0       	breq	.+10     	; 0xa6e <retrieve_gps_data+0x802>
					memset(&f23, 0x00, sizeof(gps_f23));	// Checksum failed - Write zeros to F23
 a64:	e4 01       	movw	r28, r8
 a66:	e2 2f       	mov	r30, r18
 a68:	19 92       	st	Y+, r1
 a6a:	ea 95       	dec	r30
 a6c:	e9 f7       	brne	.-6      	; 0xa68 <retrieve_gps_data+0x7fc>

				set_usart_state(usart1_flags, GPSI_DONE);
 a6e:	f0 91 98 03 	lds	r31, 0x0398
 a72:	e0 91 98 03 	lds	r30, 0x0398
 a76:	ec 7f       	andi	r30, 0xFC	; 252
 a78:	ef 27       	eor	r30, r31
 a7a:	ec 65       	ori	r30, 0x5C	; 92
 a7c:	ad cc       	rjmp	.-1702   	; 0x3d8 <retrieve_gps_data+0x16c>
				break;


			case  GPSI_DONE:
				if (usart1_buffer[usart1_index] == GPSI_END)
 a7e:	e0 91 8e 03 	lds	r30, 0x038E
 a82:	f0 91 8f 03 	lds	r31, 0x038F
 a86:	e7 56       	subi	r30, 0x67	; 103
 a88:	fc 4f       	sbci	r31, 0xFC	; 252
 a8a:	e0 81       	ld	r30, Z
 a8c:	e3 30       	cpi	r30, 0x03	; 3
 a8e:	09 f0       	breq	.+2      	; 0xa92 <retrieve_gps_data+0x826>
 a90:	5d c0       	rjmp	.+186    	; 0xb4c <retrieve_gps_data+0x8e0>
				{
					

					
					if (rx_id[1] == '0' && rx_id[2] == '0')
 a92:	e0 91 2f 0a 	lds	r30, 0x0A2F
 a96:	f0 91 30 0a 	lds	r31, 0x0A30
 a9a:	e0 33       	cpi	r30, 0x30	; 48
 a9c:	61 f4       	brne	.+24     	; 0xab6 <retrieve_gps_data+0x84a>
 a9e:	f0 33       	cpi	r31, 0x30	; 48
 aa0:	51 f4       	brne	.+20     	; 0xab6 <retrieve_gps_data+0x84a>
					{
						order = GPSI_ORDER_F00;
 aa2:	10 92 00 01 	sts	0x0100, r1

						rem_gen_state(error, GPSI_ERR_1); // F00 received ok
 aa6:	e0 91 ca 09 	lds	r30, 0x09CA
 aaa:	e7 7f       	andi	r30, 0xF7	; 247
 aac:	e0 93 ca 09 	sts	0x09CA, r30
						f00_ready = 1;
 ab0:	80 93 81 07 	sts	0x0781, r24
 ab4:	41 c0       	rjmp	.+130    	; 0xb38 <retrieve_gps_data+0x8cc>
						#endif


					}

					else if (rx_id[2] == '3' && rx_id[1] == '0')
 ab6:	f3 33       	cpi	r31, 0x33	; 51
 ab8:	69 f4       	brne	.+26     	; 0xad4 <retrieve_gps_data+0x868>
 aba:	e0 33       	cpi	r30, 0x30	; 48
 abc:	09 f0       	breq	.+2      	; 0xac0 <retrieve_gps_data+0x854>
 abe:	8a c0       	rjmp	.+276    	; 0xbd4 <retrieve_gps_data+0x968>
					{
						if (order == GPSI_ORDER_F00)
 ac0:	e0 91 00 01 	lds	r30, 0x0100
 ac4:	e1 11       	cpse	r30, r1
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <retrieve_gps_data+0x860>
							order = GPSI_ORDER_F03;
 ac8:	60 93 00 01 	sts	0x0100, r22

						rem_gen_state(error, GPSI_ERR_2); // F03 received ok
 acc:	e0 91 ca 09 	lds	r30, 0x09CA
 ad0:	ef 7e       	andi	r30, 0xEF	; 239
 ad2:	0d c0       	rjmp	.+26     	; 0xaee <retrieve_gps_data+0x882>
					}
					
					else if (rx_id[1] == '1' && rx_id[2] == '8')
 ad4:	e1 33       	cpi	r30, 0x31	; 49
 ad6:	71 f4       	brne	.+28     	; 0xaf4 <retrieve_gps_data+0x888>
 ad8:	f8 33       	cpi	r31, 0x38	; 56
 ada:	c1 f5       	brne	.+112    	; 0xb4c <retrieve_gps_data+0x8e0>
					{
						if (order == GPSI_ORDER_F03)
 adc:	e0 91 00 01 	lds	r30, 0x0100
 ae0:	e3 30       	cpi	r30, 0x03	; 3
 ae2:	11 f4       	brne	.+4      	; 0xae8 <retrieve_gps_data+0x87c>
							order = GPSI_ORDER_F18;
 ae4:	50 93 00 01 	sts	0x0100, r21

						rem_gen_state(error, GPSI_ERR_3); // F18 received ok
 ae8:	e0 91 ca 09 	lds	r30, 0x09CA
 aec:	ef 7d       	andi	r30, 0xDF	; 223
 aee:	e0 93 ca 09 	sts	0x09CA, r30
 af2:	22 c0       	rjmp	.+68     	; 0xb38 <retrieve_gps_data+0x8cc>
					}
					
					else if (rx_id[1] == '2' && rx_id[2] == '2')
 af4:	e2 33       	cpi	r30, 0x32	; 50
 af6:	d9 f4       	brne	.+54     	; 0xb2e <retrieve_gps_data+0x8c2>
 af8:	f2 33       	cpi	r31, 0x32	; 50
 afa:	09 f0       	breq	.+2      	; 0xafe <retrieve_gps_data+0x892>
 afc:	6e c0       	rjmp	.+220    	; 0xbda <retrieve_gps_data+0x96e>
					{
						if (order == GPSI_ORDER_F18)
 afe:	e0 91 00 01 	lds	r30, 0x0100
 b02:	e8 31       	cpi	r30, 0x18	; 24
 b04:	11 f4       	brne	.+4      	; 0xb0a <retrieve_gps_data+0x89e>
							order = GPSI_ORDER_F22;
 b06:	40 93 00 01 	sts	0x0100, r20

						rem_gen_state(error, GPSI_ERR_4); // F22 received ok
 b0a:	e0 91 ca 09 	lds	r30, 0x09CA
 b0e:	ef 7b       	andi	r30, 0xBF	; 191
 b10:	ee cf       	rjmp	.-36     	; 0xaee <retrieve_gps_data+0x882>
					}
					
					else if (rx_id[2] == '3' && rx_id[1] == '2')
					{
						if (order == GPSI_ORDER_F22)
 b12:	e0 91 00 01 	lds	r30, 0x0100
 b16:	e2 32       	cpi	r30, 0x22	; 34
 b18:	11 f4       	brne	.+4      	; 0xb1e <retrieve_gps_data+0x8b2>
							order = GPSI_ORDER_F23;
 b1a:	30 93 00 01 	sts	0x0100, r19

						rem_gen_state(error, GPSI_ERR_5); // F23 received ok
 b1e:	e0 91 ca 09 	lds	r30, 0x09CA
 b22:	ef 77       	andi	r30, 0x7F	; 127
 b24:	e0 93 ca 09 	sts	0x09CA, r30
						gpsi_ready = 1;		
 b28:	80 93 cb 09 	sts	0x09CB, r24
 b2c:	05 c0       	rjmp	.+10     	; 0xb38 <retrieve_gps_data+0x8cc>

					}
					
					
					else if (rx_id[1] == '9' && rx_id[2] == '9') {} // preliminary sentence
 b2e:	e9 33       	cpi	r30, 0x39	; 57
 b30:	69 f4       	brne	.+26     	; 0xb4c <retrieve_gps_data+0x8e0>
 b32:	f9 33       	cpi	r31, 0x39	; 57
 b34:	09 f0       	breq	.+2      	; 0xb38 <retrieve_gps_data+0x8cc>
 b36:	0a c0       	rjmp	.+20     	; 0xb4c <retrieve_gps_data+0x8e0>
						set_usart_state(usart1_flags, GPSI_UNKNOWN);
						set_gen_state(error, GPSI_ERR_GEN);
						break;
					}

					set_usart_state(usart1_flags, GPSI_UNKNOWN);
 b38:	f0 91 98 03 	lds	r31, 0x0398
 b3c:	e0 91 98 03 	lds	r30, 0x0398
 b40:	ec 7f       	andi	r30, 0xFC	; 252
 b42:	ef 27       	eor	r30, r31
 b44:	e4 60       	ori	r30, 0x04	; 4
 b46:	e0 93 98 03 	sts	0x0398, r30
 b4a:	68 cc       	rjmp	.-1840   	; 0x41c <retrieve_gps_data+0x1b0>
				}
				break;


			default:
				set_usart_state(usart1_flags, GPSI_UNKNOWN);
 b4c:	f0 91 98 03 	lds	r31, 0x0398
 b50:	e0 91 98 03 	lds	r30, 0x0398
 b54:	ec 7f       	andi	r30, 0xFC	; 252
 b56:	ef 27       	eor	r30, r31
 b58:	e4 60       	ori	r30, 0x04	; 4
 b5a:	e0 93 98 03 	sts	0x0398, r30
				set_gen_state(error, GPSI_ERR_GEN);
 b5e:	e0 91 ca 09 	lds	r30, 0x09CA
 b62:	e4 60       	ori	r30, 0x04	; 4
 b64:	e0 93 ca 09 	sts	0x09CA, r30
				break;
		}

		if (order == GPSI_ORDER_F23)	// All sentences received successfully
 b68:	e0 91 00 01 	lds	r30, 0x0100
 b6c:	e3 32       	cpi	r30, 0x23	; 35
 b6e:	49 f4       	brne	.+18     	; 0xb82 <retrieve_gps_data+0x916>
		{
			
			deadSecs		= 0;	// It's alive
 b70:	10 92 c8 02 	sts	0x02C8, r1
 b74:	10 92 c7 02 	sts	0x02C7, r1
			rem_gen_state(error, GPSI_ERR_DEAD);
 b78:	e0 91 ca 09 	lds	r30, 0x09CA
 b7c:	ee 7f       	andi	r30, 0xFE	; 254
 b7e:	e0 93 ca 09 	sts	0x09CA, r30
void retrieve_gps_data()
{
	// The buffer is circular, so when the loop gets to the end, it just
	// sets back to index 0 and continues until it reaches usart1_snapshot
	// This helps to prevent unwanted loss of data
	for (; usart1_index != usart1_snapshot; usart1_index = (usart1_index+1 < usart1_buffer_size ? usart1_index+1 : 0))
 b82:	e0 91 8e 03 	lds	r30, 0x038E
 b86:	f0 91 8f 03 	lds	r31, 0x038F
 b8a:	31 96       	adiw	r30, 0x01	; 1
 b8c:	e8 3e       	cpi	r30, 0xE8	; 232
 b8e:	f3 40       	sbci	r31, 0x03	; 3
 b90:	30 f4       	brcc	.+12     	; 0xb9e <retrieve_gps_data+0x932>
 b92:	e0 91 8e 03 	lds	r30, 0x038E
 b96:	f0 91 8f 03 	lds	r31, 0x038F
 b9a:	31 96       	adiw	r30, 0x01	; 1
 b9c:	02 c0       	rjmp	.+4      	; 0xba2 <retrieve_gps_data+0x936>
 b9e:	e0 e0       	ldi	r30, 0x00	; 0
 ba0:	f0 e0       	ldi	r31, 0x00	; 0
 ba2:	f0 93 8f 03 	sts	0x038F, r31
 ba6:	e0 93 8e 03 	sts	0x038E, r30
 baa:	e0 90 8e 03 	lds	r14, 0x038E
 bae:	f0 90 8f 03 	lds	r15, 0x038F
 bb2:	e0 91 01 01 	lds	r30, 0x0101
 bb6:	f0 91 02 01 	lds	r31, 0x0102
 bba:	ee 16       	cp	r14, r30
 bbc:	ff 06       	cpc	r15, r31
 bbe:	09 f0       	breq	.+2      	; 0xbc2 <retrieve_gps_data+0x956>
 bc0:	7f cb       	rjmp	.-2306   	; 0x2c0 <retrieve_gps_data+0x54>
 bc2:	13 c0       	rjmp	.+38     	; 0xbea <retrieve_gps_data+0x97e>
			case  GPSI_ID3:
				rx_id[2] = usart1_buffer[usart1_index];
				rem_gen_state(error, GPSI_ERR_GEN);
				if (rx_id[1] == '0' && rx_id[2] == '0')			// F00
					set_usart_state(usart1_flags, GPSI_S1);
				else if (rx_id[2] == '3' && rx_id[1] == '0')	// F03
 bc4:	e3 33       	cpi	r30, 0x33	; 51
 bc6:	09 f0       	breq	.+2      	; 0xbca <retrieve_gps_data+0x95e>
 bc8:	a3 cc       	rjmp	.-1722   	; 0x510 <retrieve_gps_data+0x2a4>
 bca:	6b cc       	rjmp	.-1834   	; 0x4a2 <retrieve_gps_data+0x236>
					set_usart_state(usart1_flags, GPSI_S2);
				else if (rx_id[1] == '1' && rx_id[2] == '8')	// F18
					set_usart_state(usart1_flags, GPSI_S3);
				else if (rx_id[1] == '2' && rx_id[2] == '2')	// F22
					set_usart_state(usart1_flags, GPSI_S4);
				else if (rx_id[2] == '3' && rx_id[1] == '2')	// F23
 bcc:	e3 33       	cpi	r30, 0x33	; 51
 bce:	09 f0       	breq	.+2      	; 0xbd2 <retrieve_gps_data+0x966>
 bd0:	9f cc       	rjmp	.-1730   	; 0x510 <retrieve_gps_data+0x2a4>
 bd2:	8a cc       	rjmp	.-1772   	; 0x4e8 <retrieve_gps_data+0x27c>
							order = GPSI_ORDER_F03;

						rem_gen_state(error, GPSI_ERR_2); // F03 received ok
					}
					
					else if (rx_id[1] == '1' && rx_id[2] == '8')
 bd4:	e1 33       	cpi	r30, 0x31	; 49
 bd6:	29 f4       	brne	.+10     	; 0xbe2 <retrieve_gps_data+0x976>
 bd8:	b9 cf       	rjmp	.-142    	; 0xb4c <retrieve_gps_data+0x8e0>
							order = GPSI_ORDER_F22;

						rem_gen_state(error, GPSI_ERR_4); // F22 received ok
					}
					
					else if (rx_id[2] == '3' && rx_id[1] == '2')
 bda:	f3 33       	cpi	r31, 0x33	; 51
 bdc:	09 f0       	breq	.+2      	; 0xbe0 <retrieve_gps_data+0x974>
 bde:	b6 cf       	rjmp	.-148    	; 0xb4c <retrieve_gps_data+0x8e0>
 be0:	98 cf       	rjmp	.-208    	; 0xb12 <retrieve_gps_data+0x8a6>
							order = GPSI_ORDER_F18;

						rem_gen_state(error, GPSI_ERR_3); // F18 received ok
					}
					
					else if (rx_id[1] == '2' && rx_id[2] == '2')
 be2:	e2 33       	cpi	r30, 0x32	; 50
 be4:	09 f0       	breq	.+2      	; 0xbe8 <retrieve_gps_data+0x97c>
 be6:	a3 cf       	rjmp	.-186    	; 0xb2e <retrieve_gps_data+0x8c2>
 be8:	94 cf       	rjmp	.-216    	; 0xb12 <retrieve_gps_data+0x8a6>
			deadSecs		= 0;	// It's alive
			rem_gen_state(error, GPSI_ERR_DEAD);
			
		}
	}
}
 bea:	df 91       	pop	r29
 bec:	cf 91       	pop	r28
 bee:	1f 91       	pop	r17
 bf0:	0f 91       	pop	r16
 bf2:	ff 90       	pop	r15
 bf4:	ef 90       	pop	r14
 bf6:	df 90       	pop	r13
 bf8:	cf 90       	pop	r12
 bfa:	bf 90       	pop	r11
 bfc:	af 90       	pop	r10
 bfe:	9f 90       	pop	r9
 c00:	8f 90       	pop	r8
 c02:	7f 90       	pop	r7
 c04:	6f 90       	pop	r6
 c06:	5f 90       	pop	r5
 c08:	4f 90       	pop	r4
 c0a:	3f 90       	pop	r3
 c0c:	2f 90       	pop	r2
 c0e:	08 95       	ret

00000c10 <check_pgood>:

// PGOOD is an input from the receiver on pin PA3
void check_pgood()
{

	if (getbit(PINA, PINA3)) // PGOOD pin HIGH
 c10:	89 b3       	in	r24, 0x19	; 25
 c12:	63 e0       	ldi	r22, 0x03	; 3
 c14:	0e 94 a5 00 	call	0x14a	; 0x14a <getbit>
 c18:	90 91 ca 09 	lds	r25, 0x09CA
 c1c:	88 23       	and	r24, r24
 c1e:	11 f0       	breq	.+4      	; 0xc24 <check_pgood+0x14>
		rem_gen_state(error, GPSI_ERR_PGOOD);
 c20:	9d 7f       	andi	r25, 0xFD	; 253
 c22:	01 c0       	rjmp	.+2      	; 0xc26 <check_pgood+0x16>
	else
		set_gen_state(error, GPSI_ERR_PGOOD);
 c24:	92 60       	ori	r25, 0x02	; 2
 c26:	90 93 ca 09 	sts	0x09CA, r25
 c2a:	08 95       	ret

00000c2c <check_time>:
}

// Check time since last sync with receiver 
void check_time()
{
	if (deadSecs >= RECEIVER_DEAD_TIME) 	// Receiver is dead after DEAD_TIME seconds
 c2c:	80 91 c7 02 	lds	r24, 0x02C7
 c30:	90 91 c8 02 	lds	r25, 0x02C8
 c34:	20 91 ca 09 	lds	r18, 0x09CA
 c38:	8c 32       	cpi	r24, 0x2C	; 44
 c3a:	91 40       	sbci	r25, 0x01	; 1
 c3c:	40 f0       	brcs	.+16     	; 0xc4e <check_time+0x22>
	{
		deadSecs = 100*RECEIVER_DEAD_TIME;		// avoid overflow on deadSecs
 c3e:	80 e3       	ldi	r24, 0x30	; 48
 c40:	95 e7       	ldi	r25, 0x75	; 117
 c42:	90 93 c8 02 	sts	0x02C8, r25
 c46:	80 93 c7 02 	sts	0x02C7, r24
		set_gen_state(error, GPSI_ERR_DEAD);
 c4a:	21 60       	ori	r18, 0x01	; 1
 c4c:	01 c0       	rjmp	.+2      	; 0xc50 <check_time+0x24>
	}
	else
		rem_gen_state(error, GPSI_ERR_DEAD);
 c4e:	2e 7f       	andi	r18, 0xFE	; 254
 c50:	20 93 ca 09 	sts	0x09CA, r18
 c54:	08 95       	ret

00000c56 <send>:
	}			
}


void send(char *str, int len)	// No VCP
{
 c56:	cf 93       	push	r28
 c58:	df 93       	push	r29
 c5a:	57 2f       	mov	r21, r23
	memcpy(usart0_buffer, str, len);	// copy packet to transmit buffer
 c5c:	c6 2f       	mov	r28, r22
 c5e:	d7 2f       	mov	r29, r23
 c60:	26 e8       	ldi	r18, 0x86	; 134
 c62:	37 e0       	ldi	r19, 0x07	; 7
 c64:	46 2f       	mov	r20, r22
 c66:	bc 01       	movw	r22, r24
 c68:	c9 01       	movw	r24, r18
 c6a:	0e 94 b1 07 	call	0xf62	; 0xf62 <memcpy>
	usart0_index = 0;					// reset index
 c6e:	10 92 ca 02 	sts	0x02CA, r1
 c72:	10 92 c9 02 	sts	0x02C9, r1
	usart0_complete = len;				// packet length
 c76:	d0 93 45 03 	sts	0x0345, r29
 c7a:	c0 93 44 03 	sts	0x0344, r28
// usart0
void usart0_initialize(uint32 ubrr);

inline void usart0_rx_interrupt_enable()  { UCSR0B |= (1<<RXCIE0);	}
inline void usart0_rx_interrupt_disable() { UCSR0B &= ~(1<<RXCIE0);	}
inline void usart0_tx_interrupt_enable()  { UCSR0B |= (1<<UDRIE0);	}
 c7e:	55 9a       	sbi	0x0a, 5	; 10
	usart0_tx_interrupt_enable();		// enable interrupt to start transmission
}
 c80:	df 91       	pop	r29
 c82:	cf 91       	pop	r28
 c84:	08 95       	ret

00000c86 <main>:


// Main
int main()
{
	initialize();
 c86:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <initialize>


// usart1
void usart1_initialize(uint32 ubrr);

inline void usart1_rx_interrupt_enable()  { UCSR1B |= (1<<RXCIE1);	}
 c8a:	80 91 9a 00 	lds	r24, 0x009A
 c8e:	80 68       	ori	r24, 0x80	; 128
 c90:	80 93 9a 00 	sts	0x009A, r24

	usart1_rx_interrupt_enable();

	set_usart_state(usart1_flags, GPSI_UNKNOWN);
 c94:	90 91 98 03 	lds	r25, 0x0398
 c98:	80 91 98 03 	lds	r24, 0x0398
 c9c:	8c 7f       	andi	r24, 0xFC	; 252
 c9e:	89 27       	eor	r24, r25
 ca0:	84 60       	ori	r24, 0x04	; 4
 ca2:	80 93 98 03 	sts	0x0398, r24

	for (;;)	// Loooooop
	{
		if (usart0_flags & USART_TX_COMPLETE)
		{
			usart0_flags ^= USART_TX_COMPLETE;
 ca6:	02 e0       	ldi	r16, 0x02	; 2
			check_time();
			

			// pack
			tx_packet.packet_status = error;
			tx_packet.packet_telem = telem;
 ca8:	e7 e0       	ldi	r30, 0x07	; 7
 caa:	fe 2e       	mov	r15, r30
			f00_ready = 0;
			watchdog_transmit = 0;
					
			// Transmit data
			#ifdef COMM_DEBUG
				tx_packet.packet_status = 0xFF;						// start comm byte for debug
 cac:	cf ef       	ldi	r28, 0xFF	; 255
			set_gen_state(error, GPSI_ERR_3);
			set_gen_state(error, GPSI_ERR_4);
			set_gen_state(error, GPSI_ERR_5);
			
			// trigger ADC sampling
			sample_ADC = 1;				
 cae:	d1 e0       	ldi	r29, 0x01	; 1
			tx_packet.packet_status = error;
			tx_packet.packet_telem = telem;
			if (watchdog_transmit)	// No sync with receiver - Write zeros to F00
				memset(&tx_packet.packet_f00, 0x00, sizeof(gps_f00));	
			else
				tx_packet.packet_f00 = f00;
 cb0:	18 e4       	ldi	r17, 0x48	; 72

	set_usart_state(usart1_flags, GPSI_UNKNOWN);

	for (;;)	// Loooooop
	{
		if (usart0_flags & USART_TX_COMPLETE)
 cb2:	80 91 31 0a 	lds	r24, 0x0A31
 cb6:	81 ff       	sbrs	r24, 1
 cb8:	05 c0       	rjmp	.+10     	; 0xcc4 <main+0x3e>
		{
			usart0_flags ^= USART_TX_COMPLETE;
 cba:	80 91 31 0a 	lds	r24, 0x0A31
 cbe:	80 27       	eor	r24, r16
 cc0:	80 93 31 0a 	sts	0x0A31, r24
		}
		
		if (f00_ready || watchdog_transmit)
 cc4:	80 91 81 07 	lds	r24, 0x0781
 cc8:	81 11       	cpse	r24, r1
 cca:	04 c0       	rjmp	.+8      	; 0xcd4 <main+0x4e>
 ccc:	80 91 97 03 	lds	r24, 0x0397
 cd0:	88 23       	and	r24, r24
 cd2:	d9 f1       	breq	.+118    	; 0xd4a <main+0xc4>
		{
			
			check_pgood();
 cd4:	0e 94 08 06 	call	0xc10	; 0xc10 <check_pgood>
			check_time();
 cd8:	0e 94 16 06 	call	0xc2c	; 0xc2c <check_time>
			

			// pack
			tx_packet.packet_status = error;
 cdc:	80 91 ca 09 	lds	r24, 0x09CA
 ce0:	80 93 7a 09 	sts	0x097A, r24
			tx_packet.packet_telem = telem;
 ce4:	e0 e9       	ldi	r30, 0x90	; 144
 ce6:	f3 e0       	ldi	r31, 0x03	; 3
 ce8:	ab e7       	ldi	r26, 0x7B	; 123
 cea:	b9 e0       	ldi	r27, 0x09	; 9
 cec:	8f 2d       	mov	r24, r15
 cee:	01 90       	ld	r0, Z+
 cf0:	0d 92       	st	X+, r0
 cf2:	8a 95       	dec	r24
 cf4:	e1 f7       	brne	.-8      	; 0xcee <main+0x68>
			if (watchdog_transmit)	// No sync with receiver - Write zeros to F00
 cf6:	80 91 97 03 	lds	r24, 0x0397
 cfa:	88 23       	and	r24, r24
 cfc:	41 f0       	breq	.+16     	; 0xd0e <main+0x88>
				memset(&tx_packet.packet_f00, 0x00, sizeof(gps_f00));	
 cfe:	e2 e8       	ldi	r30, 0x82	; 130
 d00:	f9 e0       	ldi	r31, 0x09	; 9
 d02:	df 01       	movw	r26, r30
 d04:	81 2f       	mov	r24, r17
 d06:	1d 92       	st	X+, r1
 d08:	8a 95       	dec	r24
 d0a:	e9 f7       	brne	.-6      	; 0xd06 <main+0x80>
 d0c:	09 c0       	rjmp	.+18     	; 0xd20 <main+0x9a>
			else
				tx_packet.packet_f00 = f00;
 d0e:	e6 e4       	ldi	r30, 0x46	; 70
 d10:	f3 e0       	ldi	r31, 0x03	; 3
 d12:	a2 e8       	ldi	r26, 0x82	; 130
 d14:	b9 e0       	ldi	r27, 0x09	; 9
 d16:	81 2f       	mov	r24, r17
 d18:	01 90       	ld	r0, Z+
 d1a:	0d 92       	st	X+, r0
 d1c:	8a 95       	dec	r24
 d1e:	e1 f7       	brne	.-8      	; 0xd18 <main+0x92>

			// reset all the triggers
			f00_ready = 0;
 d20:	10 92 81 07 	sts	0x0781, r1
			watchdog_transmit = 0;
 d24:	10 92 97 03 	sts	0x0397, r1
					
			// Transmit data
			#ifdef COMM_DEBUG
				tx_packet.packet_status = 0xFF;						// start comm byte for debug
 d28:	c0 93 7a 09 	sts	0x097A, r28
				((uint8ptr)&tx_packet.packet_f00)[71] = 0xFF;		// end comm byte for debug
 d2c:	c0 93 c9 09 	sts	0x09C9, r28
				send( (char*)&tx_packet, sizeof(tx_packet) );		// Transmit without VCP frame
 d30:	60 e5       	ldi	r22, 0x50	; 80
 d32:	70 e0       	ldi	r23, 0x00	; 0
 d34:	8a e7       	ldi	r24, 0x7A	; 122
 d36:	99 e0       	ldi	r25, 0x09	; 9
 d38:	0e 94 2b 06 	call	0xc56	; 0xc56 <send>
			// set all sentence receive errors for next receive cycle
			set_gen_state(error, GPSI_ERR_1);
			set_gen_state(error, GPSI_ERR_2);
			set_gen_state(error, GPSI_ERR_3);
			set_gen_state(error, GPSI_ERR_4);
			set_gen_state(error, GPSI_ERR_5);
 d3c:	80 91 ca 09 	lds	r24, 0x09CA
 d40:	88 6f       	ori	r24, 0xF8	; 248
 d42:	80 93 ca 09 	sts	0x09CA, r24
			
			// trigger ADC sampling
			sample_ADC = 1;				
 d46:	d0 93 43 03 	sts	0x0343, r29

		}
		
		
		if (usart1_flags & USART_RX_READY)
 d4a:	80 91 98 03 	lds	r24, 0x0398
 d4e:	80 ff       	sbrs	r24, 0
 d50:	0f c0       	rjmp	.+30     	; 0xd70 <main+0xea>
		{
			usart1_flags ^= USART_RX_READY;		// signal received
 d52:	80 91 98 03 	lds	r24, 0x0398
 d56:	8d 27       	eor	r24, r29
 d58:	80 93 98 03 	sts	0x0398, r24
			usart1_snapshot = usart1_complete;	// grab a snapshot of the current usart state in case it changes
 d5c:	80 91 eb 01 	lds	r24, 0x01EB
 d60:	90 91 ec 01 	lds	r25, 0x01EC
 d64:	90 93 02 01 	sts	0x0102, r25
 d68:	80 93 01 01 	sts	0x0101, r24
			
			// extract the data from the buffer
			retrieve_gps_data();
 d6c:	0e 94 36 01 	call	0x26c	; 0x26c <retrieve_gps_data>
		}
		
		if (sample_ADC)
 d70:	80 91 43 03 	lds	r24, 0x0343
 d74:	88 23       	and	r24, r24
 d76:	09 f4       	brne	.+2      	; 0xd7a <main+0xf4>
 d78:	9c cf       	rjmp	.-200    	; 0xcb2 <main+0x2c>
		{
			sample_ADC			= 0;
 d7a:	10 92 43 03 	sts	0x0343, r1
			telem.gps_temp		= Get_ADC_Result(ADC_THERM_GPS_CHANNEL);
 d7e:	80 e0       	ldi	r24, 0x00	; 0
 d80:	0e 94 65 00 	call	0xca	; 0xca <Get_ADC_Result>
 d84:	80 93 90 03 	sts	0x0390, r24
			telem.gpsib_temp	= Get_ADC_Result(ADC_THERM_GPSIB_CHANNEL);
 d88:	82 e0       	ldi	r24, 0x02	; 2
 d8a:	0e 94 65 00 	call	0xca	; 0xca <Get_ADC_Result>
 d8e:	80 93 91 03 	sts	0x0391, r24
			telem.radio_temp	= Get_ADC_Result(ADC_THERM_RADIO_CHANNEL);
 d92:	81 e0       	ldi	r24, 0x01	; 1
 d94:	0e 94 65 00 	call	0xca	; 0xca <Get_ADC_Result>
 d98:	80 93 92 03 	sts	0x0392, r24
 d9c:	8a cf       	rjmp	.-236    	; 0xcb2 <main+0x2c>

00000d9e <__vector_default>:
	}
}

// Catch interrupts without ISR - should never happen 
ISR(BADISR_vect)
{
 d9e:	1f 92       	push	r1
 da0:	0f 92       	push	r0
 da2:	0f b6       	in	r0, 0x3f	; 63
 da4:	0f 92       	push	r0
 da6:	11 24       	eor	r1, r1
    // user code here
}
 da8:	0f 90       	pop	r0
 daa:	0f be       	out	0x3f, r0	; 63
 dac:	0f 90       	pop	r0
 dae:	1f 90       	pop	r1
 db0:	18 95       	reti

00000db2 <__vector_12>:

// Timer1 compare interrupt service routine
ISR(TIMER1_COMPA_vect)
{
 db2:	1f 92       	push	r1
 db4:	0f 92       	push	r0
 db6:	0f b6       	in	r0, 0x3f	; 63
 db8:	0f 92       	push	r0
 dba:	11 24       	eor	r1, r1
 dbc:	5f 93       	push	r21
 dbe:	6f 93       	push	r22
 dc0:	7f 93       	push	r23
 dc2:	8f 93       	push	r24
 dc4:	9f 93       	push	r25
 dc6:	af 93       	push	r26
 dc8:	bf 93       	push	r27
	deadSecs++;					// count seconds between time syncs
 dca:	80 91 c7 02 	lds	r24, 0x02C7
 dce:	90 91 c8 02 	lds	r25, 0x02C8
 dd2:	01 96       	adiw	r24, 0x01	; 1
 dd4:	90 93 c8 02 	sts	0x02C8, r25
 dd8:	80 93 c7 02 	sts	0x02C7, r24
	
	if (deadSecs % IB_TRANSMIT_TRIGGER_TIME == 2)	// trigger transmit every <IB_TRANSMIT_TRIGGER_TIME> seconds
 ddc:	80 91 c7 02 	lds	r24, 0x02C7
 de0:	90 91 c8 02 	lds	r25, 0x02C8
 de4:	63 e0       	ldi	r22, 0x03	; 3
 de6:	70 e0       	ldi	r23, 0x00	; 0
 de8:	0e 94 7b 07 	call	0xef6	; 0xef6 <__udivmodhi4>
 dec:	02 97       	sbiw	r24, 0x02	; 2
 dee:	19 f4       	brne	.+6      	; 0xdf6 <__vector_12+0x44>
		watchdog_transmit = 1;
 df0:	81 e0       	ldi	r24, 0x01	; 1
 df2:	80 93 97 03 	sts	0x0397, r24
		if (watchdog_transmit)	
			PORTC &= ~(1<<PC1);		// led 1 ON
		else
			PORTC |= (1<<PC1);		// led 1 OFF
	#endif
}
 df6:	bf 91       	pop	r27
 df8:	af 91       	pop	r26
 dfa:	9f 91       	pop	r25
 dfc:	8f 91       	pop	r24
 dfe:	7f 91       	pop	r23
 e00:	6f 91       	pop	r22
 e02:	5f 91       	pop	r21
 e04:	0f 90       	pop	r0
 e06:	0f be       	out	0x3f, r0	; 63
 e08:	0f 90       	pop	r0
 e0a:	1f 90       	pop	r1
 e0c:	18 95       	reti

00000e0e <__vector_19>:

// uart0 transmit interrupt service routine
ISR (USART0_UDRE_vect)
{		
 e0e:	1f 92       	push	r1
 e10:	0f 92       	push	r0
 e12:	0f b6       	in	r0, 0x3f	; 63
 e14:	0f 92       	push	r0
 e16:	11 24       	eor	r1, r1
 e18:	0b b6       	in	r0, 0x3b	; 59
 e1a:	0f 92       	push	r0
 e1c:	2f 93       	push	r18
 e1e:	3f 93       	push	r19
 e20:	8f 93       	push	r24
 e22:	9f 93       	push	r25
 e24:	ef 93       	push	r30
 e26:	ff 93       	push	r31
	if (usart0_index != usart0_complete)
 e28:	20 91 c9 02 	lds	r18, 0x02C9
 e2c:	30 91 ca 02 	lds	r19, 0x02CA
 e30:	80 91 44 03 	lds	r24, 0x0344
 e34:	90 91 45 03 	lds	r25, 0x0345
 e38:	28 17       	cp	r18, r24
 e3a:	39 07       	cpc	r19, r25
 e3c:	79 f0       	breq	.+30     	; 0xe5c <__vector_19+0x4e>
	{
		UDR0 = usart0_buffer[usart0_index++];
 e3e:	80 91 c9 02 	lds	r24, 0x02C9
 e42:	90 91 ca 02 	lds	r25, 0x02CA
 e46:	fc 01       	movw	r30, r24
 e48:	ea 57       	subi	r30, 0x7A	; 122
 e4a:	f8 4f       	sbci	r31, 0xF8	; 248
 e4c:	20 81       	ld	r18, Z
 e4e:	2c b9       	out	0x0c, r18	; 12
 e50:	01 96       	adiw	r24, 0x01	; 1
 e52:	90 93 ca 02 	sts	0x02CA, r25
 e56:	80 93 c9 02 	sts	0x02C9, r24
 e5a:	06 c0       	rjmp	.+12     	; 0xe68 <__vector_19+0x5a>
void usart0_initialize(uint32 ubrr);

inline void usart0_rx_interrupt_enable()  { UCSR0B |= (1<<RXCIE0);	}
inline void usart0_rx_interrupt_disable() { UCSR0B &= ~(1<<RXCIE0);	}
inline void usart0_tx_interrupt_enable()  { UCSR0B |= (1<<UDRIE0);	}
inline void usart0_tx_interrupt_disable() { UCSR0B &= ~(1<<UDRIE0);	}
 e5c:	55 98       	cbi	0x0a, 5	; 10
	}
	else
	{
		usart0_tx_interrupt_disable();
		usart0_flags |= USART_TX_COMPLETE;
 e5e:	80 91 31 0a 	lds	r24, 0x0A31
 e62:	82 60       	ori	r24, 0x02	; 2
 e64:	80 93 31 0a 	sts	0x0A31, r24
	}
}
 e68:	ff 91       	pop	r31
 e6a:	ef 91       	pop	r30
 e6c:	9f 91       	pop	r25
 e6e:	8f 91       	pop	r24
 e70:	3f 91       	pop	r19
 e72:	2f 91       	pop	r18
 e74:	0f 90       	pop	r0
 e76:	0b be       	out	0x3b, r0	; 59
 e78:	0f 90       	pop	r0
 e7a:	0f be       	out	0x3f, r0	; 63
 e7c:	0f 90       	pop	r0
 e7e:	1f 90       	pop	r1
 e80:	18 95       	reti

00000e82 <__vector_30>:

// uart1 receive interrupt service routine
ISR (USART1_RX_vect)
{
 e82:	1f 92       	push	r1
 e84:	0f 92       	push	r0
 e86:	0f b6       	in	r0, 0x3f	; 63
 e88:	0f 92       	push	r0
 e8a:	11 24       	eor	r1, r1
 e8c:	0b b6       	in	r0, 0x3b	; 59
 e8e:	0f 92       	push	r0
 e90:	2f 93       	push	r18
 e92:	8f 93       	push	r24
 e94:	9f 93       	push	r25
 e96:	ef 93       	push	r30
 e98:	ff 93       	push	r31
	usart1_buffer[usart1_complete] = UDR1;
 e9a:	e0 91 eb 01 	lds	r30, 0x01EB
 e9e:	f0 91 ec 01 	lds	r31, 0x01EC
 ea2:	80 91 9c 00 	lds	r24, 0x009C
 ea6:	e7 56       	subi	r30, 0x67	; 103
 ea8:	fc 4f       	sbci	r31, 0xFC	; 252
 eaa:	80 83       	st	Z, r24
	usart1_complete = ((usart1_complete+1) < usart1_buffer_size ? (usart1_complete+1) : 0);
 eac:	80 91 eb 01 	lds	r24, 0x01EB
 eb0:	90 91 ec 01 	lds	r25, 0x01EC
 eb4:	01 96       	adiw	r24, 0x01	; 1
 eb6:	88 3e       	cpi	r24, 0xE8	; 232
 eb8:	93 40       	sbci	r25, 0x03	; 3
 eba:	30 f4       	brcc	.+12     	; 0xec8 <__vector_30+0x46>
 ebc:	80 91 eb 01 	lds	r24, 0x01EB
 ec0:	90 91 ec 01 	lds	r25, 0x01EC
 ec4:	01 96       	adiw	r24, 0x01	; 1
 ec6:	02 c0       	rjmp	.+4      	; 0xecc <__vector_30+0x4a>
 ec8:	80 e0       	ldi	r24, 0x00	; 0
 eca:	90 e0       	ldi	r25, 0x00	; 0
 ecc:	90 93 ec 01 	sts	0x01EC, r25
 ed0:	80 93 eb 01 	sts	0x01EB, r24
	
	usart1_flags |= USART_RX_READY;
 ed4:	80 91 98 03 	lds	r24, 0x0398
 ed8:	81 60       	ori	r24, 0x01	; 1
 eda:	80 93 98 03 	sts	0x0398, r24
}
 ede:	ff 91       	pop	r31
 ee0:	ef 91       	pop	r30
 ee2:	9f 91       	pop	r25
 ee4:	8f 91       	pop	r24
 ee6:	2f 91       	pop	r18
 ee8:	0f 90       	pop	r0
 eea:	0b be       	out	0x3b, r0	; 59
 eec:	0f 90       	pop	r0
 eee:	0f be       	out	0x3f, r0	; 63
 ef0:	0f 90       	pop	r0
 ef2:	1f 90       	pop	r1
 ef4:	18 95       	reti

00000ef6 <__udivmodhi4>:
 ef6:	aa 1b       	sub	r26, r26
 ef8:	bb 1b       	sub	r27, r27
 efa:	51 e1       	ldi	r21, 0x11	; 17
 efc:	07 c0       	rjmp	.+14     	; 0xf0c <__udivmodhi4_ep>

00000efe <__udivmodhi4_loop>:
 efe:	aa 1f       	adc	r26, r26
 f00:	bb 1f       	adc	r27, r27
 f02:	a6 17       	cp	r26, r22
 f04:	b7 07       	cpc	r27, r23
 f06:	10 f0       	brcs	.+4      	; 0xf0c <__udivmodhi4_ep>
 f08:	a6 1b       	sub	r26, r22
 f0a:	b7 0b       	sbc	r27, r23

00000f0c <__udivmodhi4_ep>:
 f0c:	88 1f       	adc	r24, r24
 f0e:	99 1f       	adc	r25, r25
 f10:	5a 95       	dec	r21
 f12:	a9 f7       	brne	.-22     	; 0xefe <__udivmodhi4_loop>
 f14:	80 95       	com	r24
 f16:	90 95       	com	r25
 f18:	bc 01       	movw	r22, r24
 f1a:	cd 01       	movw	r24, r26
 f1c:	08 95       	ret

00000f1e <__udivmodsi4>:
 f1e:	a1 e2       	ldi	r26, 0x21	; 33
 f20:	1a 2e       	mov	r1, r26
 f22:	aa 1b       	sub	r26, r26
 f24:	bb 1b       	sub	r27, r27
 f26:	fd 01       	movw	r30, r26
 f28:	0d c0       	rjmp	.+26     	; 0xf44 <__udivmodsi4_ep>

00000f2a <__udivmodsi4_loop>:
 f2a:	aa 1f       	adc	r26, r26
 f2c:	bb 1f       	adc	r27, r27
 f2e:	ee 1f       	adc	r30, r30
 f30:	ff 1f       	adc	r31, r31
 f32:	a2 17       	cp	r26, r18
 f34:	b3 07       	cpc	r27, r19
 f36:	e4 07       	cpc	r30, r20
 f38:	f5 07       	cpc	r31, r21
 f3a:	20 f0       	brcs	.+8      	; 0xf44 <__udivmodsi4_ep>
 f3c:	a2 1b       	sub	r26, r18
 f3e:	b3 0b       	sbc	r27, r19
 f40:	e4 0b       	sbc	r30, r20
 f42:	f5 0b       	sbc	r31, r21

00000f44 <__udivmodsi4_ep>:
 f44:	66 1f       	adc	r22, r22
 f46:	77 1f       	adc	r23, r23
 f48:	88 1f       	adc	r24, r24
 f4a:	99 1f       	adc	r25, r25
 f4c:	1a 94       	dec	r1
 f4e:	69 f7       	brne	.-38     	; 0xf2a <__udivmodsi4_loop>
 f50:	60 95       	com	r22
 f52:	70 95       	com	r23
 f54:	80 95       	com	r24
 f56:	90 95       	com	r25
 f58:	9b 01       	movw	r18, r22
 f5a:	ac 01       	movw	r20, r24
 f5c:	bd 01       	movw	r22, r26
 f5e:	cf 01       	movw	r24, r30
 f60:	08 95       	ret

00000f62 <memcpy>:
 f62:	fb 01       	movw	r30, r22
 f64:	dc 01       	movw	r26, r24
 f66:	02 c0       	rjmp	.+4      	; 0xf6c <memcpy+0xa>
 f68:	01 90       	ld	r0, Z+
 f6a:	0d 92       	st	X+, r0
 f6c:	41 50       	subi	r20, 0x01	; 1
 f6e:	50 40       	sbci	r21, 0x00	; 0
 f70:	d8 f7       	brcc	.-10     	; 0xf68 <memcpy+0x6>
 f72:	08 95       	ret

00000f74 <_exit>:
 f74:	f8 94       	cli

00000f76 <__stop_program>:
 f76:	ff cf       	rjmp	.-2      	; 0xf76 <__stop_program>
