
RADIOIB_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001176  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00001176  0000120a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000979  00802000  00802000  0000120a  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001987  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000330  00000000  00000000  000019b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000093c4  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000192c  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006d76  00000000  00000000  0000c9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000788  00000000  00000000  00013750  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0001f960  00000000  00000000  00013ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002bf0  00000000  00000000  00033838  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007d8  00000000  00000000  00036428  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00009423  00000000  00000000  00036c00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f3 c0       	rjmp	.+486    	; 0x1e8 <__ctors_end>
       2:	00 00       	nop
       4:	04 c6       	rjmp	.+3080   	; 0xc0e <__vector_1>
       6:	00 00       	nop
       8:	01 c1       	rjmp	.+514    	; 0x20c <__bad_interrupt>
       a:	00 00       	nop
       c:	ff c0       	rjmp	.+510    	; 0x20c <__bad_interrupt>
       e:	00 00       	nop
      10:	fd c0       	rjmp	.+506    	; 0x20c <__bad_interrupt>
      12:	00 00       	nop
      14:	fb c0       	rjmp	.+502    	; 0x20c <__bad_interrupt>
      16:	00 00       	nop
      18:	f9 c0       	rjmp	.+498    	; 0x20c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f7 c0       	rjmp	.+494    	; 0x20c <__bad_interrupt>
      1e:	00 00       	nop
      20:	f5 c0       	rjmp	.+490    	; 0x20c <__bad_interrupt>
      22:	00 00       	nop
      24:	f3 c0       	rjmp	.+486    	; 0x20c <__bad_interrupt>
      26:	00 00       	nop
      28:	f1 c0       	rjmp	.+482    	; 0x20c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ef c0       	rjmp	.+478    	; 0x20c <__bad_interrupt>
      2e:	00 00       	nop
      30:	ed c0       	rjmp	.+474    	; 0x20c <__bad_interrupt>
      32:	00 00       	nop
      34:	eb c0       	rjmp	.+470    	; 0x20c <__bad_interrupt>
      36:	00 00       	nop
      38:	11 c6       	rjmp	.+3106   	; 0xc5c <__vector_14>
      3a:	00 00       	nop
      3c:	e7 c0       	rjmp	.+462    	; 0x20c <__bad_interrupt>
      3e:	00 00       	nop
      40:	e5 c0       	rjmp	.+458    	; 0x20c <__bad_interrupt>
      42:	00 00       	nop
      44:	e3 c0       	rjmp	.+454    	; 0x20c <__bad_interrupt>
      46:	00 00       	nop
      48:	e1 c0       	rjmp	.+450    	; 0x20c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	df c0       	rjmp	.+446    	; 0x20c <__bad_interrupt>
      4e:	00 00       	nop
      50:	dd c0       	rjmp	.+442    	; 0x20c <__bad_interrupt>
      52:	00 00       	nop
      54:	db c0       	rjmp	.+438    	; 0x20c <__bad_interrupt>
      56:	00 00       	nop
      58:	d9 c0       	rjmp	.+434    	; 0x20c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d7 c0       	rjmp	.+430    	; 0x20c <__bad_interrupt>
      5e:	00 00       	nop
      60:	d5 c0       	rjmp	.+426    	; 0x20c <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c6       	rjmp	.+3170   	; 0xcc8 <__vector_25>
      66:	00 00       	nop
      68:	d1 c0       	rjmp	.+418    	; 0x20c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	cf c0       	rjmp	.+414    	; 0x20c <__bad_interrupt>
      6e:	00 00       	nop
      70:	cd c0       	rjmp	.+410    	; 0x20c <__bad_interrupt>
      72:	00 00       	nop
      74:	cb c0       	rjmp	.+406    	; 0x20c <__bad_interrupt>
      76:	00 00       	nop
      78:	c9 c0       	rjmp	.+402    	; 0x20c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c7 c0       	rjmp	.+398    	; 0x20c <__bad_interrupt>
      7e:	00 00       	nop
      80:	c5 c0       	rjmp	.+394    	; 0x20c <__bad_interrupt>
      82:	00 00       	nop
      84:	c3 c0       	rjmp	.+390    	; 0x20c <__bad_interrupt>
      86:	00 00       	nop
      88:	c1 c0       	rjmp	.+386    	; 0x20c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	bf c0       	rjmp	.+382    	; 0x20c <__bad_interrupt>
      8e:	00 00       	nop
      90:	bd c0       	rjmp	.+378    	; 0x20c <__bad_interrupt>
      92:	00 00       	nop
      94:	bb c0       	rjmp	.+374    	; 0x20c <__bad_interrupt>
      96:	00 00       	nop
      98:	b9 c0       	rjmp	.+370    	; 0x20c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	b7 c0       	rjmp	.+366    	; 0x20c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	b5 c0       	rjmp	.+362    	; 0x20c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b3 c0       	rjmp	.+358    	; 0x20c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b1 c0       	rjmp	.+354    	; 0x20c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	af c0       	rjmp	.+350    	; 0x20c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ad c0       	rjmp	.+346    	; 0x20c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ab c0       	rjmp	.+342    	; 0x20c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	a9 c0       	rjmp	.+338    	; 0x20c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a7 c0       	rjmp	.+334    	; 0x20c <__bad_interrupt>
      be:	00 00       	nop
      c0:	a5 c0       	rjmp	.+330    	; 0x20c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a3 c0       	rjmp	.+326    	; 0x20c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a1 c0       	rjmp	.+322    	; 0x20c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	9f c0       	rjmp	.+318    	; 0x20c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	9d c0       	rjmp	.+314    	; 0x20c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	9b c0       	rjmp	.+310    	; 0x20c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	99 c0       	rjmp	.+306    	; 0x20c <__bad_interrupt>
      da:	00 00       	nop
      dc:	97 c0       	rjmp	.+302    	; 0x20c <__bad_interrupt>
      de:	00 00       	nop
      e0:	95 c0       	rjmp	.+298    	; 0x20c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	93 c0       	rjmp	.+294    	; 0x20c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	91 c0       	rjmp	.+290    	; 0x20c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	8f c0       	rjmp	.+286    	; 0x20c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	8d c0       	rjmp	.+282    	; 0x20c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	8b c0       	rjmp	.+278    	; 0x20c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	89 c0       	rjmp	.+274    	; 0x20c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	87 c0       	rjmp	.+270    	; 0x20c <__bad_interrupt>
      fe:	00 00       	nop
     100:	85 c0       	rjmp	.+266    	; 0x20c <__bad_interrupt>
     102:	00 00       	nop
     104:	83 c0       	rjmp	.+262    	; 0x20c <__bad_interrupt>
     106:	00 00       	nop
     108:	81 c0       	rjmp	.+258    	; 0x20c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	7f c0       	rjmp	.+254    	; 0x20c <__bad_interrupt>
     10e:	00 00       	nop
     110:	7d c0       	rjmp	.+250    	; 0x20c <__bad_interrupt>
     112:	00 00       	nop
     114:	7b c0       	rjmp	.+246    	; 0x20c <__bad_interrupt>
     116:	00 00       	nop
     118:	79 c0       	rjmp	.+242    	; 0x20c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	77 c0       	rjmp	.+238    	; 0x20c <__bad_interrupt>
     11e:	00 00       	nop
     120:	75 c0       	rjmp	.+234    	; 0x20c <__bad_interrupt>
     122:	00 00       	nop
     124:	73 c0       	rjmp	.+230    	; 0x20c <__bad_interrupt>
     126:	00 00       	nop
     128:	71 c0       	rjmp	.+226    	; 0x20c <__bad_interrupt>
     12a:	00 00       	nop
     12c:	6f c0       	rjmp	.+222    	; 0x20c <__bad_interrupt>
     12e:	00 00       	nop
     130:	6d c0       	rjmp	.+218    	; 0x20c <__bad_interrupt>
     132:	00 00       	nop
     134:	6b c0       	rjmp	.+214    	; 0x20c <__bad_interrupt>
     136:	00 00       	nop
     138:	69 c0       	rjmp	.+210    	; 0x20c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	67 c0       	rjmp	.+206    	; 0x20c <__bad_interrupt>
     13e:	00 00       	nop
     140:	65 c0       	rjmp	.+202    	; 0x20c <__bad_interrupt>
     142:	00 00       	nop
     144:	63 c0       	rjmp	.+198    	; 0x20c <__bad_interrupt>
     146:	00 00       	nop
     148:	61 c0       	rjmp	.+194    	; 0x20c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	5f c0       	rjmp	.+190    	; 0x20c <__bad_interrupt>
     14e:	00 00       	nop
     150:	5d c0       	rjmp	.+186    	; 0x20c <__bad_interrupt>
     152:	00 00       	nop
     154:	5b c0       	rjmp	.+182    	; 0x20c <__bad_interrupt>
     156:	00 00       	nop
     158:	59 c0       	rjmp	.+178    	; 0x20c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	57 c0       	rjmp	.+174    	; 0x20c <__bad_interrupt>
     15e:	00 00       	nop
     160:	1d c6       	rjmp	.+3130   	; 0xd9c <__vector_88>
     162:	00 00       	nop
     164:	53 c0       	rjmp	.+166    	; 0x20c <__bad_interrupt>
     166:	00 00       	nop
     168:	51 c0       	rjmp	.+162    	; 0x20c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	4f c0       	rjmp	.+158    	; 0x20c <__bad_interrupt>
     16e:	00 00       	nop
     170:	4d c0       	rjmp	.+154    	; 0x20c <__bad_interrupt>
     172:	00 00       	nop
     174:	4b c0       	rjmp	.+150    	; 0x20c <__bad_interrupt>
     176:	00 00       	nop
     178:	49 c0       	rjmp	.+146    	; 0x20c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	47 c0       	rjmp	.+142    	; 0x20c <__bad_interrupt>
     17e:	00 00       	nop
     180:	45 c0       	rjmp	.+138    	; 0x20c <__bad_interrupt>
     182:	00 00       	nop
     184:	43 c0       	rjmp	.+134    	; 0x20c <__bad_interrupt>
     186:	00 00       	nop
     188:	41 c0       	rjmp	.+130    	; 0x20c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	3f c0       	rjmp	.+126    	; 0x20c <__bad_interrupt>
     18e:	00 00       	nop
     190:	3d c0       	rjmp	.+122    	; 0x20c <__bad_interrupt>
     192:	00 00       	nop
     194:	3b c0       	rjmp	.+118    	; 0x20c <__bad_interrupt>
     196:	00 00       	nop
     198:	39 c0       	rjmp	.+114    	; 0x20c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	37 c0       	rjmp	.+110    	; 0x20c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	35 c0       	rjmp	.+106    	; 0x20c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	33 c0       	rjmp	.+102    	; 0x20c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	31 c0       	rjmp	.+98     	; 0x20c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	2f c0       	rjmp	.+94     	; 0x20c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	2d c0       	rjmp	.+90     	; 0x20c <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	2b c0       	rjmp	.+86     	; 0x20c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	29 c0       	rjmp	.+82     	; 0x20c <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	27 c0       	rjmp	.+78     	; 0x20c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	25 c0       	rjmp	.+74     	; 0x20c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	23 c0       	rjmp	.+70     	; 0x20c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	21 c0       	rjmp	.+66     	; 0x20c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	1f c0       	rjmp	.+62     	; 0x20c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	1d c0       	rjmp	.+58     	; 0x20c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	1b c0       	rjmp	.+54     	; 0x20c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	19 c0       	rjmp	.+50     	; 0x20c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	17 c0       	rjmp	.+46     	; 0x20c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	15 c0       	rjmp	.+42     	; 0x20c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	13 c0       	rjmp	.+38     	; 0x20c <__bad_interrupt>
	...

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e5       	ldi	r29, 0x5F	; 95
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_clear_bss>:
     1f8:	29 e2       	ldi	r18, 0x29	; 41
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	01 c0       	rjmp	.+2      	; 0x202 <.do_clear_bss_start>

00000200 <.do_clear_bss_loop>:
     200:	1d 92       	st	X+, r1

00000202 <.do_clear_bss_start>:
     202:	a9 37       	cpi	r26, 0x79	; 121
     204:	b2 07       	cpc	r27, r18
     206:	e1 f7       	brne	.-8      	; 0x200 <.do_clear_bss_loop>
     208:	ff d1       	rcall	.+1022   	; 0x608 <main>
     20a:	b3 c7       	rjmp	.+3942   	; 0x1172 <_exit>

0000020c <__bad_interrupt>:
     20c:	f9 ce       	rjmp	.-526    	; 0x0 <__vectors>

0000020e <board_init>:
 *
 * Description  : Call all the initialization functions
 * 
 */
void board_init(void)
{
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	29 97       	sbiw	r28, 0x09	; 9
     21c:	cd bf       	out	0x3d, r28	; 61
     21e:	de bf       	out	0x3e, r29	; 62
 * 
 */
void interrupts_init (void)
{
	// Enable low level and medium level interrupts 
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM;
     220:	83 e0       	ldi	r24, 0x03	; 3
     222:	80 93 a2 00 	sts	0x00A2, r24
	
	// Set priority of low level interrupts to Round Robin scheduling
	PMIC.CTRL |= PMIC_RREN_bm;
     226:	80 91 a2 00 	lds	r24, 0x00A2
     22a:	80 68       	ori	r24, 0x80	; 128
     22c:	80 93 a2 00 	sts	0x00A2, r24
	
	// Enable global interrupts
	Enable_global_interrupt();
     230:	78 94       	sei
void board_init(void)
{

	//clock_init		();
	interrupts_init	();
	memory_init		();
     232:	31 d2       	rcall	.+1122   	; 0x696 <memory_init>
	dma_init		();
     234:	a8 d2       	rcall	.+1360   	; 0x786 <dma_init>
	serial_options.stopbits =	false;
	
	// Set baudrate, initialize and enable receive interrupt
	
	serial_options.baudrate =		RADIO_UART_BAUDRATE;
	usart_serial_init				(radio.USART, &serial_options);
     236:	00 91 38 22 	lds	r16, 0x2238
     23a:	10 91 39 22 	lds	r17, 0x2239
 */
static inline void usart_serial_init(USART_t *usart, const usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	8d 83       	std	Y+5, r24	; 0x05
     244:	9e 83       	std	Y+6, r25	; 0x06
	usart_rs232_options.paritytype   = options->paritytype;
     246:	1f 82       	std	Y+7, r1	; 0x07
     248:	18 86       	std	Y+8, r1	; 0x08
	usart_rs232_options.stopbits     = options->stopbits;
     24a:	19 86       	std	Y+9, r1	; 0x09
	usart_rs232_options.baudrate     = options->baudrate;
     24c:	40 e0       	ldi	r20, 0x00	; 0
     24e:	52 ec       	ldi	r21, 0xC2	; 194
     250:	61 e0       	ldi	r22, 0x01	; 1
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	49 83       	std	Y+1, r20	; 0x01
     256:	5a 83       	std	Y+2, r21	; 0x02
     258:	6b 83       	std	Y+3, r22	; 0x03
     25a:	7c 83       	std	Y+4, r23	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
     25c:	00 3a       	cpi	r16, 0xA0	; 160
     25e:	88 e0       	ldi	r24, 0x08	; 8
     260:	18 07       	cpc	r17, r24
     262:	09 f4       	brne	.+2      	; 0x266 <board_init+0x58>
     264:	b8 c0       	rjmp	.+368    	; 0x3d6 <board_init+0x1c8>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);	
	}
	else
#endif
#ifdef USARTC1
	if((uint16_t)usart == (uint16_t)&USARTC1) {
     266:	00 3b       	cpi	r16, 0xB0	; 176
     268:	88 e0       	ldi	r24, 0x08	; 8
     26a:	18 07       	cpc	r17, r24
     26c:	09 f4       	brne	.+2      	; 0x270 <board_init+0x62>
     26e:	bd c0       	rjmp	.+378    	; 0x3ea <board_init+0x1dc>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);	
	}
	else
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
     270:	00 3a       	cpi	r16, 0xA0	; 160
     272:	89 e0       	ldi	r24, 0x09	; 9
     274:	18 07       	cpc	r17, r24
     276:	09 f4       	brne	.+2      	; 0x27a <board_init+0x6c>
     278:	c7 c0       	rjmp	.+398    	; 0x408 <board_init+0x1fa>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);	
	}
	else
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
     27a:	00 3b       	cpi	r16, 0xB0	; 176
     27c:	89 e0       	ldi	r24, 0x09	; 9
     27e:	18 07       	cpc	r17, r24
     280:	09 f4       	brne	.+2      	; 0x284 <board_init+0x76>
     282:	cc c0       	rjmp	.+408    	; 0x41c <board_init+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);	
	}
	else
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
     284:	00 3a       	cpi	r16, 0xA0	; 160
     286:	8a e0       	ldi	r24, 0x0A	; 10
     288:	18 07       	cpc	r17, r24
     28a:	09 f4       	brne	.+2      	; 0x28e <board_init+0x80>
     28c:	cc c0       	rjmp	.+408    	; 0x426 <board_init+0x218>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);	
	}
	else
#endif
#ifdef USARTE1
	if((uint16_t)usart == (uint16_t)&USARTE1) {
     28e:	00 3b       	cpi	r16, 0xB0	; 176
     290:	8a e0       	ldi	r24, 0x0A	; 10
     292:	18 07       	cpc	r17, r24
     294:	09 f4       	brne	.+2      	; 0x298 <board_init+0x8a>
     296:	d1 c0       	rjmp	.+418    	; 0x43a <board_init+0x22c>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);	
	}
	else
#endif
#ifdef USARTF0
	if((uint16_t)usart == (uint16_t)&USARTF0) {
     298:	00 3a       	cpi	r16, 0xA0	; 160
     29a:	8b e0       	ldi	r24, 0x0B	; 11
     29c:	18 07       	cpc	r17, r24
     29e:	09 f4       	brne	.+2      	; 0x2a2 <board_init+0x94>
     2a0:	d6 c0       	rjmp	.+428    	; 0x44e <board_init+0x240>
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);	
	}
	else
#endif
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
     2a2:	00 3b       	cpi	r16, 0xB0	; 176
     2a4:	8b e0       	ldi	r24, 0x0B	; 11
     2a6:	18 07       	cpc	r17, r24
     2a8:	09 f4       	brne	.+2      	; 0x2ac <board_init+0x9e>
     2aa:	8b c0       	rjmp	.+278    	; 0x3c2 <board_init+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);	
	}
#endif
	usart_init_rs232(usart, &usart_rs232_options);
     2ac:	be 01       	movw	r22, r28
     2ae:	6f 5f       	subi	r22, 0xFF	; 255
     2b0:	7f 4f       	sbci	r23, 0xFF	; 255
     2b2:	c8 01       	movw	r24, r16
     2b4:	1f d1       	rcall	.+574    	; 0x4f4 <usart_init_rs232>
	usart_set_rx_interrupt_level	(radio.USART,USART_RXCINTLVL_LO_gc);
     2b6:	e0 91 38 22 	lds	r30, 0x2238
     2ba:	f0 91 39 22 	lds	r31, 0x2239
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum pmic_level level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) | level;
     2be:	83 81       	ldd	r24, Z+3	; 0x03
     2c0:	8f 7c       	andi	r24, 0xCF	; 207
     2c2:	80 61       	ori	r24, 0x10	; 16
     2c4:	83 83       	std	Z+3, r24	; 0x03


	serial_options.baudrate =		CDHIB_UART_BAUDRATE;
	usart_serial_init				(cdhib.USART, &serial_options);
     2c6:	00 91 1c 21 	lds	r16, 0x211C
     2ca:	10 91 1d 21 	lds	r17, 0x211D
 */
static inline void usart_serial_init(USART_t *usart, const usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     2ce:	83 e0       	ldi	r24, 0x03	; 3
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	8d 83       	std	Y+5, r24	; 0x05
     2d4:	9e 83       	std	Y+6, r25	; 0x06
	usart_rs232_options.paritytype   = options->paritytype;
     2d6:	1f 82       	std	Y+7, r1	; 0x07
     2d8:	18 86       	std	Y+8, r1	; 0x08
	usart_rs232_options.stopbits     = options->stopbits;
     2da:	19 86       	std	Y+9, r1	; 0x09
	usart_rs232_options.baudrate     = options->baudrate;
     2dc:	40 e0       	ldi	r20, 0x00	; 0
     2de:	52 ec       	ldi	r21, 0xC2	; 194
     2e0:	61 e0       	ldi	r22, 0x01	; 1
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	49 83       	std	Y+1, r20	; 0x01
     2e6:	5a 83       	std	Y+2, r21	; 0x02
     2e8:	6b 83       	std	Y+3, r22	; 0x03
     2ea:	7c 83       	std	Y+4, r23	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
     2ec:	00 3a       	cpi	r16, 0xA0	; 160
     2ee:	88 e0       	ldi	r24, 0x08	; 8
     2f0:	18 07       	cpc	r17, r24
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <board_init+0xe8>
     2f4:	75 c0       	rjmp	.+234    	; 0x3e0 <board_init+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);	
	}
	else
#endif
#ifdef USARTC1
	if((uint16_t)usart == (uint16_t)&USARTC1) {
     2f6:	00 3b       	cpi	r16, 0xB0	; 176
     2f8:	88 e0       	ldi	r24, 0x08	; 8
     2fa:	18 07       	cpc	r17, r24
     2fc:	09 f4       	brne	.+2      	; 0x300 <board_init+0xf2>
     2fe:	7a c0       	rjmp	.+244    	; 0x3f4 <board_init+0x1e6>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);	
	}
	else
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
     300:	00 3a       	cpi	r16, 0xA0	; 160
     302:	89 e0       	ldi	r24, 0x09	; 9
     304:	18 07       	cpc	r17, r24
     306:	09 f4       	brne	.+2      	; 0x30a <board_init+0xfc>
     308:	7a c0       	rjmp	.+244    	; 0x3fe <board_init+0x1f0>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);	
	}
	else
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
     30a:	00 3b       	cpi	r16, 0xB0	; 176
     30c:	89 e0       	ldi	r24, 0x09	; 9
     30e:	18 07       	cpc	r17, r24
     310:	09 f4       	brne	.+2      	; 0x314 <board_init+0x106>
     312:	7f c0       	rjmp	.+254    	; 0x412 <board_init+0x204>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);	
	}
	else
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
     314:	00 3a       	cpi	r16, 0xA0	; 160
     316:	8a e0       	ldi	r24, 0x0A	; 10
     318:	18 07       	cpc	r17, r24
     31a:	09 f4       	brne	.+2      	; 0x31e <board_init+0x110>
     31c:	89 c0       	rjmp	.+274    	; 0x430 <board_init+0x222>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);	
	}
	else
#endif
#ifdef USARTE1
	if((uint16_t)usart == (uint16_t)&USARTE1) {
     31e:	00 3b       	cpi	r16, 0xB0	; 176
     320:	8a e0       	ldi	r24, 0x0A	; 10
     322:	18 07       	cpc	r17, r24
     324:	09 f4       	brne	.+2      	; 0x328 <board_init+0x11a>
     326:	8e c0       	rjmp	.+284    	; 0x444 <board_init+0x236>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);	
	}
	else
#endif
#ifdef USARTF0
	if((uint16_t)usart == (uint16_t)&USARTF0) {
     328:	00 3a       	cpi	r16, 0xA0	; 160
     32a:	8b e0       	ldi	r24, 0x0B	; 11
     32c:	18 07       	cpc	r17, r24
     32e:	09 f4       	brne	.+2      	; 0x332 <board_init+0x124>
     330:	93 c0       	rjmp	.+294    	; 0x458 <board_init+0x24a>
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);	
	}
	else
#endif
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
     332:	00 3b       	cpi	r16, 0xB0	; 176
     334:	8b e0       	ldi	r24, 0x0B	; 11
     336:	18 07       	cpc	r17, r24
     338:	09 f4       	brne	.+2      	; 0x33c <board_init+0x12e>
     33a:	48 c0       	rjmp	.+144    	; 0x3cc <board_init+0x1be>
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);	
	}
#endif
	usart_init_rs232(usart, &usart_rs232_options);
     33c:	be 01       	movw	r22, r28
     33e:	6f 5f       	subi	r22, 0xFF	; 255
     340:	7f 4f       	sbci	r23, 0xFF	; 255
     342:	c8 01       	movw	r24, r16
     344:	d7 d0       	rcall	.+430    	; 0x4f4 <usart_init_rs232>
	usart_set_rx_interrupt_level	(cdhib.USART,USART_RXCINTLVL_LO_gc);
     346:	e0 91 1c 21 	lds	r30, 0x211C
     34a:	f0 91 1d 21 	lds	r31, 0x211D
     34e:	83 81       	ldd	r24, Z+3	; 0x03
     350:	8f 7c       	andi	r24, 0xCF	; 207
     352:	80 61       	ori	r24, 0x10	; 16
     354:	83 83       	std	Z+3, r24	; 0x03
	cdhib.USART->BAUDCTRLA = 0x02;
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	86 83       	std	Z+6, r24	; 0x06
	cdhib.USART->BAUDCTRLB = 0x96;
     35a:	86 e9       	ldi	r24, 0x96	; 150
     35c:	87 83       	std	Z+7, r24	; 0x07
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
	}
#endif
#ifdef TCC0
	else if (module == &TCC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     35e:	61 e0       	ldi	r22, 0x01	; 1
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	b6 d0       	rcall	.+364    	; 0x4d2 <sysclk_enable_module>
{
	// Enable clock to the Timer
	sysclk_enable_peripheral_clock(&TCC0);

	// Enable overflow interrupt
	TCC0.INTCTRLA = (TCC0.INTCTRLA & ~TC0_OVFINTLVL_gm ) | TC_OVFINTLVL_LO_gc;
     366:	80 91 06 08 	lds	r24, 0x0806
     36a:	8c 7f       	andi	r24, 0xFC	; 252
     36c:	81 60       	ori	r24, 0x01	; 1
     36e:	80 93 06 08 	sts	0x0806, r24

	// Set the period
	TCC0.PER = 125;
     372:	8d e7       	ldi	r24, 0x7D	; 125
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	80 93 26 08 	sts	0x0826, r24
     37a:	90 93 27 08 	sts	0x0827, r25

	// Pre-scale the 32MHz clock by 256
	TCC0.CTRLA = (TCC0.CTRLA & ~ TC0_CLKSEL_gm) | TC_CLKSEL_DIV256_gc;
     37e:	80 91 00 08 	lds	r24, 0x0800
     382:	80 7f       	andi	r24, 0xF0	; 240
     384:	86 60       	ori	r24, 0x06	; 6
     386:	80 93 00 08 	sts	0x0800, r24

	// Power 422 driver TX_EN and RX_EN I/Os
	// In both MCUs:
	// Port C, Pin 4 = PWR_TX_EN
	// Port C, Pin 5 = PWR_RX_EN 
	PORTC.DIRSET = PIN4_bm | PIN5_bm;	// Both pins are outputs
     38a:	80 e3       	ldi	r24, 0x30	; 48
     38c:	80 93 41 06 	sts	0x0641, r24
	PORTC.OUTSET = PIN5_bm;				// TX_EN active low, RX_EN Active high	
     390:	80 e2       	ldi	r24, 0x20	; 32
     392:	80 93 45 06 	sts	0x0645, r24
	
	// Data sheet says -
	// No need to init the UART I/Os - when Tx/Rx are enabled it overrides normal port operation.
	// But doesn't work without this.
	PORTC.DIRSET = PIN3_bm;	// PC3 - USARTC0 
     396:	98 e0       	ldi	r25, 0x08	; 8
     398:	90 93 41 06 	sts	0x0641, r25
	PORTC.DIRSET = PIN7_bm;	// PC7 - USARTC1 
     39c:	80 e8       	ldi	r24, 0x80	; 128
     39e:	80 93 41 06 	sts	0x0641, r24
	PORTD.DIRSET = PIN3_bm;	// PD3 - USARTD0
     3a2:	90 93 61 06 	sts	0x0661, r25
	PORTD.DIRSET = PIN7_bm;	// PD7 - USARTD1
     3a6:	80 93 61 06 	sts	0x0661, r24
	PORTE.DIRSET = PIN3_bm;	// PE3 - USARTE0
     3aa:	90 93 81 06 	sts	0x0681, r25
	PORTE.DIRSET = PIN7_bm;	// PE7 - USARTE1
     3ae:	80 93 81 06 	sts	0x0681, r24
	memory_init		();
	dma_init		();
	usart_init		();
	timers_init		();
	io_init			();
}
     3b2:	29 96       	adiw	r28, 0x09	; 9
     3b4:	cd bf       	out	0x3d, r28	; 61
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	08 95       	ret
	}
	else
#endif
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);	
     3c2:	60 e2       	ldi	r22, 0x20	; 32
     3c4:	86 e0       	ldi	r24, 0x06	; 6
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	84 d0       	rcall	.+264    	; 0x4d2 <sysclk_enable_module>
     3ca:	70 cf       	rjmp	.-288    	; 0x2ac <board_init+0x9e>
     3cc:	60 e2       	ldi	r22, 0x20	; 32
     3ce:	86 e0       	ldi	r24, 0x06	; 6
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	7f d0       	rcall	.+254    	; 0x4d2 <sysclk_enable_module>
     3d4:	b3 cf       	rjmp	.-154    	; 0x33c <board_init+0x12e>
	usart_rs232_options.stopbits     = options->stopbits;
	usart_rs232_options.baudrate     = options->baudrate;

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);	
     3d6:	60 e1       	ldi	r22, 0x10	; 16
     3d8:	83 e0       	ldi	r24, 0x03	; 3
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	7a d0       	rcall	.+244    	; 0x4d2 <sysclk_enable_module>
     3de:	66 cf       	rjmp	.-308    	; 0x2ac <board_init+0x9e>
     3e0:	60 e1       	ldi	r22, 0x10	; 16
     3e2:	83 e0       	ldi	r24, 0x03	; 3
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	75 d0       	rcall	.+234    	; 0x4d2 <sysclk_enable_module>
     3e8:	a9 cf       	rjmp	.-174    	; 0x33c <board_init+0x12e>
	}
	else
#endif
#ifdef USARTC1
	if((uint16_t)usart == (uint16_t)&USARTC1) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);	
     3ea:	60 e2       	ldi	r22, 0x20	; 32
     3ec:	83 e0       	ldi	r24, 0x03	; 3
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	70 d0       	rcall	.+224    	; 0x4d2 <sysclk_enable_module>
     3f2:	5c cf       	rjmp	.-328    	; 0x2ac <board_init+0x9e>
     3f4:	60 e2       	ldi	r22, 0x20	; 32
     3f6:	83 e0       	ldi	r24, 0x03	; 3
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	6b d0       	rcall	.+214    	; 0x4d2 <sysclk_enable_module>
     3fc:	9f cf       	rjmp	.-194    	; 0x33c <board_init+0x12e>
	}
	else
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);	
     3fe:	60 e1       	ldi	r22, 0x10	; 16
     400:	84 e0       	ldi	r24, 0x04	; 4
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	66 d0       	rcall	.+204    	; 0x4d2 <sysclk_enable_module>
     406:	9a cf       	rjmp	.-204    	; 0x33c <board_init+0x12e>
     408:	60 e1       	ldi	r22, 0x10	; 16
     40a:	84 e0       	ldi	r24, 0x04	; 4
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	61 d0       	rcall	.+194    	; 0x4d2 <sysclk_enable_module>
     410:	4d cf       	rjmp	.-358    	; 0x2ac <board_init+0x9e>
	}
	else
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);	
     412:	60 e2       	ldi	r22, 0x20	; 32
     414:	84 e0       	ldi	r24, 0x04	; 4
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	5c d0       	rcall	.+184    	; 0x4d2 <sysclk_enable_module>
     41a:	90 cf       	rjmp	.-224    	; 0x33c <board_init+0x12e>
     41c:	60 e2       	ldi	r22, 0x20	; 32
     41e:	84 e0       	ldi	r24, 0x04	; 4
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	57 d0       	rcall	.+174    	; 0x4d2 <sysclk_enable_module>
     424:	43 cf       	rjmp	.-378    	; 0x2ac <board_init+0x9e>
	}
	else
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);	
     426:	60 e1       	ldi	r22, 0x10	; 16
     428:	85 e0       	ldi	r24, 0x05	; 5
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	52 d0       	rcall	.+164    	; 0x4d2 <sysclk_enable_module>
     42e:	3e cf       	rjmp	.-388    	; 0x2ac <board_init+0x9e>
     430:	60 e1       	ldi	r22, 0x10	; 16
     432:	85 e0       	ldi	r24, 0x05	; 5
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	4d d0       	rcall	.+154    	; 0x4d2 <sysclk_enable_module>
     438:	81 cf       	rjmp	.-254    	; 0x33c <board_init+0x12e>
	}
	else
#endif
#ifdef USARTE1
	if((uint16_t)usart == (uint16_t)&USARTE1) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);	
     43a:	60 e2       	ldi	r22, 0x20	; 32
     43c:	85 e0       	ldi	r24, 0x05	; 5
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	48 d0       	rcall	.+144    	; 0x4d2 <sysclk_enable_module>
     442:	34 cf       	rjmp	.-408    	; 0x2ac <board_init+0x9e>
     444:	60 e2       	ldi	r22, 0x20	; 32
     446:	85 e0       	ldi	r24, 0x05	; 5
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	43 d0       	rcall	.+134    	; 0x4d2 <sysclk_enable_module>
     44c:	77 cf       	rjmp	.-274    	; 0x33c <board_init+0x12e>
	}
	else
#endif
#ifdef USARTF0
	if((uint16_t)usart == (uint16_t)&USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);	
     44e:	60 e1       	ldi	r22, 0x10	; 16
     450:	86 e0       	ldi	r24, 0x06	; 6
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	3e d0       	rcall	.+124    	; 0x4d2 <sysclk_enable_module>
     456:	2a cf       	rjmp	.-428    	; 0x2ac <board_init+0x9e>
     458:	60 e1       	ldi	r22, 0x10	; 16
     45a:	86 e0       	ldi	r24, 0x06	; 6
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	39 d0       	rcall	.+114    	; 0x4d2 <sysclk_enable_module>
     460:	6d cf       	rjmp	.-294    	; 0x33c <board_init+0x12e>

00000462 <clock_init>:
 * 
 */
void clock_init	(void)
{
	
	xosc_recovey = true;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 78 29 	sts	0x2978, r24
	
	// Set the source to be a 12-16Mhz crystal. Change this if using 8MHz crystal
	OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_EXTCLK_gc ;
     468:	80 ec       	ldi	r24, 0xC0	; 192
     46a:	80 93 52 00 	sts	0x0052, r24
	
	// Enable external oscillator and internal 32MHz oscillator
	OSC.CTRL |= OSC_XOSCEN_bm;
     46e:	80 91 50 00 	lds	r24, 0x0050
     472:	88 60       	ori	r24, 0x08	; 8
     474:	80 93 50 00 	sts	0x0050, r24
	OSC.CTRL |= OSC_RC32MEN_bm;
     478:	80 91 50 00 	lds	r24, 0x0050
     47c:	82 60       	ori	r24, 0x02	; 2
     47e:	80 93 50 00 	sts	0x0050, r24
	
	while( !(OSC.STATUS & OSC_RC32MRDY_bm) )	// wait until internal 32MHz oscillator is stable
     482:	80 91 51 00 	lds	r24, 0x0051
     486:	81 fd       	sbrc	r24, 1
     488:	08 c0       	rjmp	.+16     	; 0x49a <clock_init+0x38>
	
	// Switch clock source to the internal 32MHz oscillator
	ccp_write_io((uint8_t *)&CLK.CTRL, CLK_SCLKSEL_RC32M_gc);
     48a:	61 e0       	ldi	r22, 0x01	; 1
     48c:	80 e4       	ldi	r24, 0x40	; 64
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	2b d0       	rcall	.+86     	; 0x4e8 <ccp_write_io>
	
	// Enable external oscillator and internal 32MHz oscillator
	OSC.CTRL |= OSC_XOSCEN_bm;
	OSC.CTRL |= OSC_RC32MEN_bm;
	
	while( !(OSC.STATUS & OSC_RC32MRDY_bm) )	// wait until internal 32MHz oscillator is stable
     492:	80 91 51 00 	lds	r24, 0x0051
     496:	81 ff       	sbrs	r24, 1
     498:	f8 cf       	rjmp	.-16     	; 0x48a <clock_init+0x28>
 * 
 */
void switch_to_ext_osc (void)
{
	
	if (OSC.STATUS & OSC_XOSCRDY_bm) // External oscillator stable
     49a:	80 91 51 00 	lds	r24, 0x0051
     49e:	83 ff       	sbrs	r24, 3
     4a0:	17 c0       	rjmp	.+46     	; 0x4d0 <clock_init+0x6e>
	{
					
		// Configure the PLL to be external oscillator *2. Change to *4 if using 8MHz crystal
		OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | 2 ;
     4a2:	82 ec       	ldi	r24, 0xC2	; 194
     4a4:	80 93 55 00 	sts	0x0055, r24
		
		// Enable the PLL
		OSC.CTRL |= OSC_PLLEN_bm ;
     4a8:	80 91 50 00 	lds	r24, 0x0050
     4ac:	80 61       	ori	r24, 0x10	; 16
     4ae:	80 93 50 00 	sts	0x0050, r24
		// Wait until it's stable
		while( !(OSC.STATUS & OSC_PLLRDY_bm) ); 
     4b2:	80 91 51 00 	lds	r24, 0x0051
     4b6:	84 ff       	sbrs	r24, 4
     4b8:	fc cf       	rjmp	.-8      	; 0x4b2 <clock_init+0x50>
		
		// Switch system clock source to the PLL output
		ccp_write_io((uint8_t *)&CLK.CTRL, CLK_SCLKSEL_PLL_gc);
     4ba:	64 e0       	ldi	r22, 0x04	; 4
     4bc:	80 e4       	ldi	r24, 0x40	; 64
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	13 d0       	rcall	.+38     	; 0x4e8 <ccp_write_io>
	
		// Enable external oscillator fault detection
		ccp_write_io((uint8_t *)&OSC.XOSCFAIL, OSC_XOSCFDEN_bm);
     4c2:	61 e0       	ldi	r22, 0x01	; 1
     4c4:	83 e5       	ldi	r24, 0x53	; 83
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0f d0       	rcall	.+30     	; 0x4e8 <ccp_write_io>
		
		// Reset the flag
		xosc_recovey = false;
     4ca:	10 92 78 29 	sts	0x2978, r1
     4ce:	08 95       	ret
     4d0:	08 95       	ret

000004d2 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     4d2:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     4d4:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     4d6:	fc 01       	movw	r30, r24
     4d8:	e0 59       	subi	r30, 0x90	; 144
     4da:	ff 4f       	sbci	r31, 0xFF	; 255
     4dc:	60 95       	com	r22
     4de:	80 81       	ld	r24, Z
     4e0:	86 23       	and	r24, r22
     4e2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4e4:	2f bf       	out	0x3f, r18	; 63
     4e6:	08 95       	ret

000004e8 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     4e8:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     4ea:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     4ec:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     4ee:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     4f0:	60 83       	st	Z, r22
	ret                             // Return to caller
     4f2:	08 95       	ret

000004f4 <usart_init_rs232>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	ec 01       	movw	r28, r24
     4fe:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USARTC0
	if ((uintptr_t)usart == (uintptr_t)&USARTC0) {
     500:	c0 3a       	cpi	r28, 0xA0	; 160
     502:	88 e0       	ldi	r24, 0x08	; 8
     504:	d8 07       	cpc	r29, r24
     506:	09 f4       	brne	.+2      	; 0x50a <usart_init_rs232+0x16>
     508:	5c c0       	rjmp	.+184    	; 0x5c2 <usart_init_rs232+0xce>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	if ((uintptr_t)usart == (uintptr_t)&USARTC1) {
     50a:	c0 3b       	cpi	r28, 0xB0	; 176
     50c:	e8 e0       	ldi	r30, 0x08	; 8
     50e:	de 07       	cpc	r29, r30
     510:	09 f4       	brne	.+2      	; 0x514 <usart_init_rs232+0x20>
     512:	5c c0       	rjmp	.+184    	; 0x5cc <usart_init_rs232+0xd8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD0
	if ((uintptr_t)usart == (uintptr_t)&USARTD0) {
     514:	c0 3a       	cpi	r28, 0xA0	; 160
     516:	f9 e0       	ldi	r31, 0x09	; 9
     518:	df 07       	cpc	r29, r31
     51a:	09 f4       	brne	.+2      	; 0x51e <usart_init_rs232+0x2a>
     51c:	5c c0       	rjmp	.+184    	; 0x5d6 <usart_init_rs232+0xe2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTD1
	if ((uintptr_t)usart == (uintptr_t)&USARTD1) {
     51e:	c0 3b       	cpi	r28, 0xB0	; 176
     520:	89 e0       	ldi	r24, 0x09	; 9
     522:	d8 07       	cpc	r29, r24
     524:	09 f4       	brne	.+2      	; 0x528 <usart_init_rs232+0x34>
     526:	5c c0       	rjmp	.+184    	; 0x5e0 <usart_init_rs232+0xec>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
	}
#endif
#ifdef USARTE0
	if ((uintptr_t)usart == (uintptr_t)&USARTE0) {
     528:	c0 3a       	cpi	r28, 0xA0	; 160
     52a:	ea e0       	ldi	r30, 0x0A	; 10
     52c:	de 07       	cpc	r29, r30
     52e:	09 f4       	brne	.+2      	; 0x532 <usart_init_rs232+0x3e>
     530:	5c c0       	rjmp	.+184    	; 0x5ea <usart_init_rs232+0xf6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
	}
#endif
#ifdef USARTE1
	if ((uintptr_t)usart == (uintptr_t)&USARTE1) {
     532:	c0 3b       	cpi	r28, 0xB0	; 176
     534:	fa e0       	ldi	r31, 0x0A	; 10
     536:	df 07       	cpc	r29, r31
     538:	09 f4       	brne	.+2      	; 0x53c <usart_init_rs232+0x48>
     53a:	5c c0       	rjmp	.+184    	; 0x5f4 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
	}
#endif
#ifdef USARTF0
	if ((uintptr_t)usart == (uintptr_t)&USARTF0) {
     53c:	c0 3a       	cpi	r28, 0xA0	; 160
     53e:	8b e0       	ldi	r24, 0x0B	; 11
     540:	d8 07       	cpc	r29, r24
     542:	09 f4       	brne	.+2      	; 0x546 <usart_init_rs232+0x52>
     544:	5c c0       	rjmp	.+184    	; 0x5fe <usart_init_rs232+0x10a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTF1
	if ((uintptr_t)usart == (uintptr_t)&USARTF1) {
     546:	c0 3b       	cpi	r28, 0xB0	; 176
     548:	eb e0       	ldi	r30, 0x0B	; 11
     54a:	de 07       	cpc	r29, r30
     54c:	a9 f1       	breq	.+106    	; 0x5b8 <usart_init_rs232+0xc4>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     54e:	8d 81       	ldd	r24, Y+5	; 0x05
     550:	8f 73       	andi	r24, 0x3F	; 63
     552:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     554:	f8 01       	movw	r30, r16
     556:	86 81       	ldd	r24, Z+6	; 0x06
     558:	94 81       	ldd	r25, Z+4	; 0x04
     55a:	89 2b       	or	r24, r25
     55c:	90 85       	ldd	r25, Z+8	; 0x08
     55e:	99 23       	and	r25, r25
     560:	49 f1       	breq	.+82     	; 0x5b4 <usart_init_rs232+0xc0>
     562:	98 e0       	ldi	r25, 0x08	; 8
     564:	89 2b       	or	r24, r25
     566:	8d 83       	std	Y+5, r24	; 0x05
{
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     568:	f8 01       	movw	r30, r16
     56a:	00 81       	ld	r16, Z
     56c:	11 81       	ldd	r17, Z+1	; 0x01
     56e:	22 81       	ldd	r18, Z+2	; 0x02
     570:	33 81       	ldd	r19, Z+3	; 0x03
	// 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN)
	max_rate = cpu_hz / 8;
	// 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1)
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     572:	8c 81       	ldd	r24, Y+4	; 0x04
     574:	82 ff       	sbrs	r24, 2
     576:	19 c0       	rjmp	.+50     	; 0x5aa <usart_init_rs232+0xb6>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	// 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN)
	max_rate = cpu_hz / 8;
     578:	40 e9       	ldi	r20, 0x90	; 144
     57a:	50 ed       	ldi	r21, 0xD0	; 208
     57c:	63 e0       	ldi	r22, 0x03	; 3
     57e:	70 e0       	ldi	r23, 0x00	; 0
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     580:	40 17       	cp	r20, r16
     582:	51 07       	cpc	r21, r17
     584:	62 07       	cpc	r22, r18
     586:	73 07       	cpc	r23, r19
     588:	28 f0       	brcs	.+10     	; 0x594 <usart_init_rs232+0xa0>
	}

	/*
	 * Check if double speed is enabled.
	 */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     58a:	8c 81       	ldd	r24, Y+4	; 0x04
		div = (cpu_hz + baud / 2) / baud - 1;
	}

	//(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	//(usart)->BAUDCTRLA = (uint8_t)div;
	(usart)->BAUDCTRLB = 0x96;//0xD0;
     58c:	86 e9       	ldi	r24, 0x96	; 150
     58e:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = 0x02;//0x01;
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	8e 83       	std	Y+6, r24	; 0x06
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     594:	8c 81       	ldd	r24, Y+4	; 0x04
     596:	88 60       	ori	r24, 0x08	; 8
     598:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     59a:	8c 81       	ldd	r24, Y+4	; 0x04
     59c:	80 61       	ori	r24, 0x10	; 16
     59e:	8c 83       	std	Y+4, r24	; 0x04
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	08 95       	ret
	max_rate = cpu_hz / 8;
	// 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1)
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     5aa:	48 e4       	ldi	r20, 0x48	; 72
     5ac:	58 ee       	ldi	r21, 0xE8	; 232
     5ae:	61 e0       	ldi	r22, 0x01	; 1
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	e6 cf       	rjmp	.-52     	; 0x580 <usart_init_rs232+0x8c>
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	d6 cf       	rjmp	.-84     	; 0x564 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTF1
	if ((uintptr_t)usart == (uintptr_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     5b8:	60 e2       	ldi	r22, 0x20	; 32
     5ba:	86 e0       	ldi	r24, 0x06	; 6
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	89 df       	rcall	.-238    	; 0x4d2 <sysclk_enable_module>
     5c0:	c6 cf       	rjmp	.-116    	; 0x54e <usart_init_rs232+0x5a>
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USARTC0
	if ((uintptr_t)usart == (uintptr_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     5c2:	60 e1       	ldi	r22, 0x10	; 16
     5c4:	83 e0       	ldi	r24, 0x03	; 3
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	84 df       	rcall	.-248    	; 0x4d2 <sysclk_enable_module>
     5ca:	b3 cf       	rjmp	.-154    	; 0x532 <usart_init_rs232+0x3e>
	}
#endif
#ifdef USARTC1
	if ((uintptr_t)usart == (uintptr_t)&USARTC1) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     5cc:	60 e2       	ldi	r22, 0x20	; 32
     5ce:	83 e0       	ldi	r24, 0x03	; 3
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	7f df       	rcall	.-258    	; 0x4d2 <sysclk_enable_module>
     5d4:	ae cf       	rjmp	.-164    	; 0x532 <usart_init_rs232+0x3e>
	}
#endif
#ifdef USARTD0
	if ((uintptr_t)usart == (uintptr_t)&USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     5d6:	60 e1       	ldi	r22, 0x10	; 16
     5d8:	84 e0       	ldi	r24, 0x04	; 4
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	7a df       	rcall	.-268    	; 0x4d2 <sysclk_enable_module>
     5de:	ae cf       	rjmp	.-164    	; 0x53c <usart_init_rs232+0x48>
	}
#endif
#ifdef USARTD1
	if ((uintptr_t)usart == (uintptr_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     5e0:	60 e2       	ldi	r22, 0x20	; 32
     5e2:	84 e0       	ldi	r24, 0x04	; 4
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	75 df       	rcall	.-278    	; 0x4d2 <sysclk_enable_module>
     5e8:	b2 cf       	rjmp	.-156    	; 0x54e <usart_init_rs232+0x5a>
	}
#endif
#ifdef USARTE0
	if ((uintptr_t)usart == (uintptr_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     5ea:	60 e1       	ldi	r22, 0x10	; 16
     5ec:	85 e0       	ldi	r24, 0x05	; 5
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	70 df       	rcall	.-288    	; 0x4d2 <sysclk_enable_module>
     5f2:	ad cf       	rjmp	.-166    	; 0x54e <usart_init_rs232+0x5a>
	}
#endif
#ifdef USARTE1
	if ((uintptr_t)usart == (uintptr_t)&USARTE1) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     5f4:	60 e2       	ldi	r22, 0x20	; 32
     5f6:	85 e0       	ldi	r24, 0x05	; 5
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	6b df       	rcall	.-298    	; 0x4d2 <sysclk_enable_module>
     5fc:	a8 cf       	rjmp	.-176    	; 0x54e <usart_init_rs232+0x5a>
	}
#endif
#ifdef USARTF0
	if ((uintptr_t)usart == (uintptr_t)&USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     5fe:	60 e1       	ldi	r22, 0x10	; 16
     600:	86 e0       	ldi	r24, 0x06	; 6
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	66 df       	rcall	.-308    	; 0x4d2 <sysclk_enable_module>
     606:	a3 cf       	rjmp	.-186    	; 0x54e <usart_init_rs232+0x5a>

00000608 <main>:
 */
int main (void)
{

	// Init - in init.c
	board_init();
     608:	02 de       	rcall	.-1020   	; 0x20e <board_init>
			
	// Run scheduler - in scheduler.c
	scheduler();
     60a:	fe d2       	rcall	.+1532   	; 0xc08 <scheduler>
}
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	08 95       	ret

00000612 <DMA_SetPriority>:
 *
 *  \param  channel  The channel to configure.
 */
void DMA_DisableSingleShot( volatile DMA_CH_t * channel )
{
	channel->CTRLA &= ~DMA_CH_SINGLE_bm;
     612:	e0 e0       	ldi	r30, 0x00	; 0
     614:	f1 e0       	ldi	r31, 0x01	; 1
     616:	90 81       	ld	r25, Z
     618:	9c 7f       	andi	r25, 0xFC	; 252
     61a:	98 2b       	or	r25, r24
     61c:	90 83       	st	Z, r25
     61e:	08 95       	ret

00000620 <DMA_EnableChannel>:
     620:	fc 01       	movw	r30, r24
     622:	20 81       	ld	r18, Z
     624:	20 68       	ori	r18, 0x80	; 128
     626:	20 83       	st	Z, r18
     628:	08 95       	ret

0000062a <DMA_SetupBlock>:
     62a:	8f 92       	push	r8
     62c:	af 92       	push	r10
     62e:	bf 92       	push	r11
     630:	cf 92       	push	r12
     632:	ef 92       	push	r14
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	fc 01       	movw	r30, r24
     642:	60 87       	std	Z+8, r22	; 0x08
     644:	71 87       	std	Z+9, r23	; 0x09
     646:	12 86       	std	Z+10, r1	; 0x0a
     648:	04 87       	std	Z+12, r16	; 0x0c
     64a:	15 87       	std	Z+13, r17	; 0x0d
     64c:	16 86       	std	Z+14, r1	; 0x0e
     64e:	24 2b       	or	r18, r20
     650:	2e 29       	or	r18, r14
     652:	2c 29       	or	r18, r12
     654:	22 83       	std	Z+2, r18	; 0x02
     656:	a4 82       	std	Z+4, r10	; 0x04
     658:	b5 82       	std	Z+5, r11	; 0x05
     65a:	80 81       	ld	r24, Z
     65c:	8c 7d       	andi	r24, 0xDC	; 220
     65e:	88 29       	or	r24, r8
     660:	9e 85       	ldd	r25, Y+14	; 0x0e
     662:	99 23       	and	r25, r25
     664:	71 f0       	breq	.+28     	; 0x682 <DMA_SetupBlock+0x58>
     666:	80 62       	ori	r24, 0x20	; 32
     668:	80 83       	st	Z, r24
     66a:	8d 85       	ldd	r24, Y+13	; 0x0d
     66c:	86 83       	std	Z+6, r24	; 0x06
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	ef 90       	pop	r14
     678:	cf 90       	pop	r12
     67a:	bf 90       	pop	r11
     67c:	af 90       	pop	r10
     67e:	8f 90       	pop	r8
     680:	08 95       	ret
     682:	80 83       	st	Z, r24
     684:	f4 cf       	rjmp	.-24     	; 0x66e <DMA_SetupBlock+0x44>

00000686 <DMA_EnableSingleShot>:
     686:	fc 01       	movw	r30, r24
     688:	20 81       	ld	r18, Z
     68a:	24 60       	ori	r18, 0x04	; 4
     68c:	20 83       	st	Z, r18
     68e:	08 95       	ret

00000690 <DMA_SetTriggerSource>:
 *  \param  channel  The channel to configure.
 *  \param  trigger  The trigger source ID.
 */
void DMA_SetTriggerSource( volatile DMA_CH_t * channel, uint8_t trigger )
{
	channel->TRIGSRC = trigger;
     690:	fc 01       	movw	r30, r24
     692:	63 83       	std	Z+3, r22	; 0x03
     694:	08 95       	ret

00000696 <memory_init>:
	//TODO Send a message from radio saying error happened
	radio.rejected_packets = radio.rejected_packets + 1;
	cdhib.tx_data_ready = false;
	cdhib.tx_byte_count = 0;
	cdhib.dest_address = 0;
	cdhib.tx_status = 0;
     696:	2f b7       	in	r18, 0x3f	; 63
     698:	f8 94       	cli
     69a:	80 e2       	ldi	r24, 0x20	; 32
     69c:	91 e2       	ldi	r25, 0x21	; 33
     69e:	80 93 1f 22 	sts	0x221F, r24
     6a2:	90 93 20 22 	sts	0x2220, r25
     6a6:	80 93 21 22 	sts	0x2221, r24
     6aa:	90 93 22 22 	sts	0x2222, r25
     6ae:	10 92 23 22 	sts	0x2223, r1
     6b2:	2f bf       	out	0x3f, r18	; 63
     6b4:	80 ea       	ldi	r24, 0xA0	; 160
     6b6:	99 e0       	ldi	r25, 0x09	; 9
     6b8:	80 93 1c 21 	sts	0x211C, r24
     6bc:	90 93 1d 21 	sts	0x211D, r25
     6c0:	80 e1       	ldi	r24, 0x10	; 16
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	80 93 1e 21 	sts	0x211E, r24
     6c8:	90 93 1f 21 	sts	0x211F, r25
     6cc:	84 e5       	ldi	r24, 0x54	; 84
     6ce:	93 e2       	ldi	r25, 0x23	; 35
     6d0:	80 93 24 22 	sts	0x2224, r24
     6d4:	90 93 25 22 	sts	0x2225, r25
     6d8:	10 92 29 22 	sts	0x2229, r1
     6dc:	88 e0       	ldi	r24, 0x08	; 8
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	80 93 26 22 	sts	0x2226, r24
     6e4:	90 93 27 22 	sts	0x2227, r25
     6e8:	10 92 2a 22 	sts	0x222A, r1
     6ec:	10 92 2b 22 	sts	0x222B, r1
     6f0:	10 92 34 22 	sts	0x2234, r1
     6f4:	10 92 35 22 	sts	0x2235, r1
     6f8:	10 92 30 22 	sts	0x2230, r1
     6fc:	24 e6       	ldi	r18, 0x64	; 100
     6fe:	37 e2       	ldi	r19, 0x27	; 39
     700:	20 93 32 22 	sts	0x2232, r18
     704:	30 93 33 22 	sts	0x2233, r19
     708:	2a e0       	ldi	r18, 0x0A	; 10
     70a:	20 93 2c 22 	sts	0x222C, r18
     70e:	4f b7       	in	r20, 0x3f	; 63
     710:	f8 94       	cli
     712:	2c e3       	ldi	r18, 0x3C	; 60
     714:	32 e2       	ldi	r19, 0x22	; 34
     716:	20 93 3b 23 	sts	0x233B, r18
     71a:	30 93 3c 23 	sts	0x233C, r19
     71e:	20 93 3d 23 	sts	0x233D, r18
     722:	30 93 3e 23 	sts	0x233E, r19
     726:	10 92 3f 23 	sts	0x233F, r1
     72a:	4f bf       	out	0x3f, r20	; 63
     72c:	20 ea       	ldi	r18, 0xA0	; 160
     72e:	38 e0       	ldi	r19, 0x08	; 8
     730:	20 93 38 22 	sts	0x2238, r18
     734:	30 93 39 22 	sts	0x2239, r19
     738:	20 e3       	ldi	r18, 0x30	; 48
     73a:	31 e0       	ldi	r19, 0x01	; 1
     73c:	20 93 3a 22 	sts	0x223A, r18
     740:	30 93 3b 22 	sts	0x223B, r19
     744:	2c e5       	ldi	r18, 0x5C	; 92
     746:	35 e2       	ldi	r19, 0x25	; 37
     748:	20 93 40 23 	sts	0x2340, r18
     74c:	30 93 41 23 	sts	0x2341, r19
     750:	10 92 45 23 	sts	0x2345, r1
     754:	80 93 42 23 	sts	0x2342, r24
     758:	90 93 43 23 	sts	0x2343, r25
     75c:	10 92 46 23 	sts	0x2346, r1
     760:	10 92 47 23 	sts	0x2347, r1
     764:	10 92 50 23 	sts	0x2350, r1
     768:	10 92 51 23 	sts	0x2351, r1
     76c:	10 92 4c 23 	sts	0x234C, r1
     770:	10 92 4e 23 	sts	0x234E, r1
     774:	10 92 4f 23 	sts	0x234F, r1
     778:	85 e0       	ldi	r24, 0x05	; 5
     77a:	80 93 48 23 	sts	0x2348, r24
     77e:	8a ea       	ldi	r24, 0xAA	; 170
     780:	80 93 10 21 	sts	0x2110, r24
     784:	08 95       	ret

00000786 <dma_init>:
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	61 e0       	ldi	r22, 0x01	; 1
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	a0 de       	rcall	.-704    	; 0x4d2 <sysclk_enable_module>
     792:	e0 e0       	ldi	r30, 0x00	; 0
     794:	f1 e0       	ldi	r31, 0x01	; 1
     796:	80 81       	ld	r24, Z
     798:	80 68       	ori	r24, 0x80	; 128
     79a:	80 83       	st	Z, r24
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	38 df       	rcall	.-400    	; 0x612 <DMA_SetPriority>
     7a2:	ce e1       	ldi	r28, 0x1E	; 30
     7a4:	d1 e2       	ldi	r29, 0x21	; 33
     7a6:	88 81       	ld	r24, Y
     7a8:	99 81       	ldd	r25, Y+1	; 0x01
     7aa:	6d df       	rcall	.-294    	; 0x686 <DMA_EnableSingleShot>
     7ac:	6c e6       	ldi	r22, 0x6C	; 108
     7ae:	88 81       	ld	r24, Y
     7b0:	99 81       	ldd	r25, Y+1	; 0x01
     7b2:	6e df       	rcall	.-292    	; 0x690 <DMA_SetTriggerSource>
     7b4:	ca e3       	ldi	r28, 0x3A	; 58
     7b6:	d2 e2       	ldi	r29, 0x22	; 34
     7b8:	88 81       	ld	r24, Y
     7ba:	99 81       	ldd	r25, Y+1	; 0x01
     7bc:	64 df       	rcall	.-312    	; 0x686 <DMA_EnableSingleShot>
     7be:	6c e4       	ldi	r22, 0x4C	; 76
     7c0:	88 81       	ld	r24, Y
     7c2:	99 81       	ldd	r25, Y+1	; 0x01
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	63 cf       	rjmp	.-314    	; 0x690 <DMA_SetTriggerSource>

000007ca <read_CDH_receive_buff>:
     7ca:	ff 92       	push	r15
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	80 91 46 23 	lds	r24, 0x2346
     7d8:	90 91 47 23 	lds	r25, 0x2347
     7dc:	20 91 30 22 	lds	r18, 0x2230
     7e0:	21 11       	cpse	r18, r1
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <read_CDH_receive_buff+0x1e>
     7e4:	88 e0       	ldi	r24, 0x08	; 8
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	20 e2       	ldi	r18, 0x20	; 32
     7ea:	31 e2       	ldi	r19, 0x21	; 33
     7ec:	47 e0       	ldi	r20, 0x07	; 7
     7ee:	f4 2e       	mov	r15, r20
     7f0:	06 e0       	ldi	r16, 0x06	; 6
     7f2:	b8 e4       	ldi	r27, 0x48	; 72
     7f4:	a5 e0       	ldi	r26, 0x05	; 5
     7f6:	14 e0       	ldi	r17, 0x04	; 4
     7f8:	d3 e0       	ldi	r29, 0x03	; 3
     7fa:	72 e0       	ldi	r23, 0x02	; 2
     7fc:	c1 e0       	ldi	r28, 0x01	; 1
     7fe:	1e c0       	rjmp	.+60     	; 0x83c <read_CDH_receive_buff+0x72>
     800:	41 30       	cpi	r20, 0x01	; 1
     802:	09 f4       	brne	.+2      	; 0x806 <read_CDH_receive_buff+0x3c>
     804:	50 c0       	rjmp	.+160    	; 0x8a6 <read_CDH_receive_buff+0xdc>
     806:	42 30       	cpi	r20, 0x02	; 2
     808:	09 f4       	brne	.+2      	; 0x80c <read_CDH_receive_buff+0x42>
     80a:	50 c0       	rjmp	.+160    	; 0x8ac <read_CDH_receive_buff+0xe2>
     80c:	43 30       	cpi	r20, 0x03	; 3
     80e:	09 f4       	brne	.+2      	; 0x812 <read_CDH_receive_buff+0x48>
     810:	66 c0       	rjmp	.+204    	; 0x8de <read_CDH_receive_buff+0x114>
     812:	50 3c       	cpi	r21, 0xC0	; 192
     814:	09 f4       	brne	.+2      	; 0x818 <read_CDH_receive_buff+0x4e>
     816:	6e c0       	rjmp	.+220    	; 0x8f4 <read_CDH_receive_buff+0x12a>
     818:	43 30       	cpi	r20, 0x03	; 3
     81a:	68 f0       	brcs	.+26     	; 0x836 <read_CDH_receive_buff+0x6c>
     81c:	e0 91 40 23 	lds	r30, 0x2340
     820:	f0 91 41 23 	lds	r31, 0x2341
     824:	e8 0f       	add	r30, r24
     826:	f9 1f       	adc	r31, r25
     828:	50 83       	st	Z, r21
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	40 91 30 22 	lds	r20, 0x2230
     830:	46 30       	cpi	r20, 0x06	; 6
     832:	09 f4       	brne	.+2      	; 0x836 <read_CDH_receive_buff+0x6c>
     834:	77 c0       	rjmp	.+238    	; 0x924 <read_CDH_receive_buff+0x15a>
     836:	47 30       	cpi	r20, 0x07	; 7
     838:	09 f4       	brne	.+2      	; 0x83c <read_CDH_receive_buff+0x72>
     83a:	42 c0       	rjmp	.+132    	; 0x8c0 <read_CDH_receive_buff+0xf6>
     83c:	5f b7       	in	r21, 0x3f	; 63
     83e:	f8 94       	cli
     840:	40 91 23 22 	lds	r20, 0x2223
     844:	5f bf       	out	0x3f, r21	; 63
     846:	44 23       	and	r20, r20
     848:	21 f1       	breq	.+72     	; 0x892 <read_CDH_receive_buff+0xc8>
     84a:	e0 91 21 22 	lds	r30, 0x2221
     84e:	f0 91 22 22 	lds	r31, 0x2222
     852:	51 91       	ld	r21, Z+
     854:	e0 93 21 22 	sts	0x2221, r30
     858:	f0 93 22 22 	sts	0x2222, r31
     85c:	ef 51       	subi	r30, 0x1F	; 31
     85e:	f2 42       	sbci	r31, 0x22	; 34
     860:	51 f1       	breq	.+84     	; 0x8b6 <read_CDH_receive_buff+0xec>
     862:	6f b7       	in	r22, 0x3f	; 63
     864:	f8 94       	cli
     866:	40 91 23 22 	lds	r20, 0x2223
     86a:	41 50       	subi	r20, 0x01	; 1
     86c:	40 93 23 22 	sts	0x2223, r20
     870:	6f bf       	out	0x3f, r22	; 63
     872:	40 91 30 22 	lds	r20, 0x2230
     876:	50 3c       	cpi	r21, 0xC0	; 192
     878:	09 f0       	breq	.+2      	; 0x87c <read_CDH_receive_buff+0xb2>
     87a:	c2 cf       	rjmp	.-124    	; 0x800 <read_CDH_receive_buff+0x36>
     87c:	41 11       	cpse	r20, r1
     87e:	c0 cf       	rjmp	.-128    	; 0x800 <read_CDH_receive_buff+0x36>
     880:	c0 93 30 22 	sts	0x2230, r28
     884:	5f b7       	in	r21, 0x3f	; 63
     886:	f8 94       	cli
     888:	40 91 23 22 	lds	r20, 0x2223
     88c:	5f bf       	out	0x3f, r21	; 63
     88e:	41 11       	cpse	r20, r1
     890:	dc cf       	rjmp	.-72     	; 0x84a <read_CDH_receive_buff+0x80>
     892:	80 93 46 23 	sts	0x2346, r24
     896:	90 93 47 23 	sts	0x2347, r25
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	ff 90       	pop	r15
     8a4:	08 95       	ret
     8a6:	70 93 30 22 	sts	0x2230, r23
     8aa:	c8 cf       	rjmp	.-112    	; 0x83c <read_CDH_receive_buff+0x72>
     8ac:	58 34       	cpi	r21, 0x48	; 72
     8ae:	59 f1       	breq	.+86     	; 0x906 <read_CDH_receive_buff+0x13c>
     8b0:	a0 93 30 22 	sts	0x2230, r26
     8b4:	b3 cf       	rjmp	.-154    	; 0x81c <read_CDH_receive_buff+0x52>
     8b6:	20 93 21 22 	sts	0x2221, r18
     8ba:	30 93 22 22 	sts	0x2222, r19
     8be:	d1 cf       	rjmp	.-94     	; 0x862 <read_CDH_receive_buff+0x98>
     8c0:	21 e0       	ldi	r18, 0x01	; 1
     8c2:	20 93 45 23 	sts	0x2345, r18
     8c6:	03 97       	sbiw	r24, 0x03	; 3
     8c8:	20 91 4a 23 	lds	r18, 0x234A
     8cc:	30 91 4b 23 	lds	r19, 0x234B
     8d0:	2f 5f       	subi	r18, 0xFF	; 255
     8d2:	3f 4f       	sbci	r19, 0xFF	; 255
     8d4:	20 93 4a 23 	sts	0x234A, r18
     8d8:	30 93 4b 23 	sts	0x234B, r19
     8dc:	da cf       	rjmp	.-76     	; 0x892 <read_CDH_receive_buff+0xc8>
     8de:	55 36       	cpi	r21, 0x65	; 101
     8e0:	a9 f0       	breq	.+42     	; 0x90c <read_CDH_receive_buff+0x142>
     8e2:	e0 91 40 23 	lds	r30, 0x2340
     8e6:	f0 91 41 23 	lds	r31, 0x2341
     8ea:	e8 0f       	add	r30, r24
     8ec:	f9 1f       	adc	r31, r25
     8ee:	31 97       	sbiw	r30, 0x01	; 1
     8f0:	b0 83       	st	Z, r27
     8f2:	de cf       	rjmp	.-68     	; 0x8b0 <read_CDH_receive_buff+0xe6>
     8f4:	45 30       	cpi	r20, 0x05	; 5
     8f6:	09 f4       	brne	.+2      	; 0x8fa <read_CDH_receive_buff+0x130>
     8f8:	83 c0       	rjmp	.+262    	; 0xa00 <read_CDH_receive_buff+0x236>
     8fa:	44 30       	cpi	r20, 0x04	; 4
     8fc:	09 f0       	breq	.+2      	; 0x900 <read_CDH_receive_buff+0x136>
     8fe:	8c cf       	rjmp	.-232    	; 0x818 <read_CDH_receive_buff+0x4e>
     900:	f0 92 30 22 	sts	0x2230, r15
     904:	8b cf       	rjmp	.-234    	; 0x81c <read_CDH_receive_buff+0x52>
     906:	d0 93 30 22 	sts	0x2230, r29
     90a:	88 cf       	rjmp	.-240    	; 0x81c <read_CDH_receive_buff+0x52>
     90c:	10 93 30 22 	sts	0x2230, r17
     910:	e0 91 40 23 	lds	r30, 0x2340
     914:	f0 91 41 23 	lds	r31, 0x2341
     918:	b0 83       	st	Z, r27
     91a:	40 91 30 22 	lds	r20, 0x2230
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	7a cf       	rjmp	.-268    	; 0x818 <read_CDH_receive_buff+0x4e>
     924:	21 e0       	ldi	r18, 0x01	; 1
     926:	20 93 45 23 	sts	0x2345, r18
     92a:	ac 01       	movw	r20, r24
     92c:	43 50       	subi	r20, 0x03	; 3
     92e:	51 09       	sbc	r21, r1
     930:	20 91 4a 23 	lds	r18, 0x234A
     934:	30 91 4b 23 	lds	r19, 0x234B
     938:	2f 5f       	subi	r18, 0xFF	; 255
     93a:	3f 4f       	sbci	r19, 0xFF	; 255
     93c:	20 93 4a 23 	sts	0x234A, r18
     940:	30 93 4b 23 	sts	0x234B, r19
     944:	e0 91 40 23 	lds	r30, 0x2340
     948:	f0 91 41 23 	lds	r31, 0x2341
     94c:	28 e4       	ldi	r18, 0x48	; 72
     94e:	20 83       	st	Z, r18
     950:	e0 91 40 23 	lds	r30, 0x2340
     954:	f0 91 41 23 	lds	r31, 0x2341
     958:	25 e6       	ldi	r18, 0x65	; 101
     95a:	21 83       	std	Z+1, r18	; 0x01
     95c:	e0 91 40 23 	lds	r30, 0x2340
     960:	f0 91 41 23 	lds	r31, 0x2341
     964:	20 e1       	ldi	r18, 0x10	; 16
     966:	22 83       	std	Z+2, r18	; 0x02
     968:	e0 91 40 23 	lds	r30, 0x2340
     96c:	f0 91 41 23 	lds	r31, 0x2341
     970:	23 e0       	ldi	r18, 0x03	; 3
     972:	23 83       	std	Z+3, r18	; 0x03
     974:	e0 91 40 23 	lds	r30, 0x2340
     978:	f0 91 41 23 	lds	r31, 0x2341
     97c:	9c 01       	movw	r18, r24
     97e:	2b 50       	subi	r18, 0x0B	; 11
     980:	31 09       	sbc	r19, r1
     982:	34 83       	std	Z+4, r19	; 0x04
     984:	e0 91 40 23 	lds	r30, 0x2340
     988:	f0 91 41 23 	lds	r31, 0x2341
     98c:	24 2f       	mov	r18, r20
     98e:	28 50       	subi	r18, 0x08	; 8
     990:	25 83       	std	Z+5, r18	; 0x05
     992:	e0 91 40 23 	lds	r30, 0x2340
     996:	f0 91 41 23 	lds	r31, 0x2341
     99a:	22 81       	ldd	r18, Z+2	; 0x02
     99c:	33 81       	ldd	r19, Z+3	; 0x03
     99e:	32 0f       	add	r19, r18
     9a0:	23 0f       	add	r18, r19
     9a2:	64 81       	ldd	r22, Z+4	; 0x04
     9a4:	63 0f       	add	r22, r19
     9a6:	26 0f       	add	r18, r22
     9a8:	35 81       	ldd	r19, Z+5	; 0x05
     9aa:	36 0f       	add	r19, r22
     9ac:	36 83       	std	Z+6, r19	; 0x06
     9ae:	e0 91 40 23 	lds	r30, 0x2340
     9b2:	f0 91 41 23 	lds	r31, 0x2341
     9b6:	23 0f       	add	r18, r19
     9b8:	27 83       	std	Z+7, r18	; 0x07
     9ba:	60 91 40 23 	lds	r22, 0x2340
     9be:	70 91 41 23 	lds	r23, 0x2341
     9c2:	49 30       	cpi	r20, 0x09	; 9
     9c4:	51 05       	cpc	r21, r1
     9c6:	f8 f0       	brcs	.+62     	; 0xa06 <read_CDH_receive_buff+0x23c>
     9c8:	fb 01       	movw	r30, r22
     9ca:	38 96       	adiw	r30, 0x08	; 8
     9cc:	28 e0       	ldi	r18, 0x08	; 8
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	b0 e0       	ldi	r27, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	c1 91       	ld	r28, Z+
     9d6:	ac 0f       	add	r26, r28
     9d8:	ba 0f       	add	r27, r26
     9da:	2f 5f       	subi	r18, 0xFF	; 255
     9dc:	3f 4f       	sbci	r19, 0xFF	; 255
     9de:	24 17       	cp	r18, r20
     9e0:	35 07       	cpc	r19, r21
     9e2:	c0 f3       	brcs	.-16     	; 0x9d4 <read_CDH_receive_buff+0x20a>
     9e4:	fb 01       	movw	r30, r22
     9e6:	e4 0f       	add	r30, r20
     9e8:	f5 1f       	adc	r31, r21
     9ea:	a0 83       	st	Z, r26
     9ec:	e0 91 40 23 	lds	r30, 0x2340
     9f0:	f0 91 41 23 	lds	r31, 0x2341
     9f4:	e8 0f       	add	r30, r24
     9f6:	f9 1f       	adc	r31, r25
     9f8:	32 97       	sbiw	r30, 0x02	; 2
     9fa:	b0 83       	st	Z, r27
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	49 cf       	rjmp	.-366    	; 0x892 <read_CDH_receive_buff+0xc8>
     a00:	00 93 30 22 	sts	0x2230, r16
     a04:	0b cf       	rjmp	.-490    	; 0x81c <read_CDH_receive_buff+0x52>
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	ec cf       	rjmp	.-40     	; 0x9e4 <read_CDH_receive_buff+0x21a>

00000a0c <read_radio_receive_buff>:
}

void read_radio_receive_buff	(void)
{
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
	uint16_t ctr = cdhib.tx_byte_count;
     a10:	80 91 2a 22 	lds	r24, 0x222A
     a14:	90 91 2b 22 	lds	r25, 0x222B
		static inline RingBuff_Data_t RingBuffer_Remove(Receive_RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
			
			if (++Buffer->Out == &Buffer->Buffer[RECEIVE_RINGBUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;
     a18:	6c e3       	ldi	r22, 0x3C	; 60
     a1a:	72 e2       	ldi	r23, 0x22	; 34
		}
		else if(ctr == LI_HDR + AX_HDR )
		{
			if(rx_byte == FC_MSG || rx_byte == FC_CMD)
			{
				cdhib.dest_address = VCP_FC;
     a1c:	cb e0       	ldi	r28, 0x0B	; 11
			}
			else if(rx_byte == CDH_MSG || rx_byte == CDH_CMD)
			{
				cdhib.dest_address = VCP_CDHIB;
     a1e:	da e0       	ldi	r29, 0x0A	; 10
			}
			else if(rx_byte == PWB_MSG || rx_byte == PWB_CMD)
			{
				cdhib.dest_address = VCP_POWER;
     a20:	b1 e0       	ldi	r27, 0x01	; 1
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(Receive_RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     a22:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a24:	f8 94       	cli
			{
				Count = Buffer->Count;
     a26:	40 91 3f 23 	lds	r20, 0x233F
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a2a:	5f bf       	out	0x3f, r21	; 63

void read_radio_receive_buff	(void)
{
	uint16_t ctr = cdhib.tx_byte_count;
	// read only if packet not already queued to go out
	while(!RingBuffer_IsEmpty(&radio.rx_ringbuff))
     a2c:	44 23       	and	r20, r20
     a2e:	09 f4       	brne	.+2      	; 0xa32 <read_radio_receive_buff+0x26>
     a30:	4c c0       	rjmp	.+152    	; 0xaca <read_radio_receive_buff+0xbe>
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(Receive_RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     a32:	e0 91 3d 23 	lds	r30, 0x233D
     a36:	f0 91 3e 23 	lds	r31, 0x233E
     a3a:	a1 91       	ld	r26, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[RECEIVE_RINGBUFFER_SIZE])
     a3c:	e0 93 3d 23 	sts	0x233D, r30
     a40:	f0 93 3e 23 	sts	0x233E, r31
     a44:	eb 53       	subi	r30, 0x3B	; 59
     a46:	f3 42       	sbci	r31, 0x23	; 35
     a48:	09 f4       	brne	.+2      	; 0xa4c <read_radio_receive_buff+0x40>
     a4a:	7a c0       	rjmp	.+244    	; 0xb40 <read_radio_receive_buff+0x134>
			  Buffer->Out = Buffer->Buffer;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     a4c:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a4e:	f8 94       	cli
			{
				Buffer->Count--;
     a50:	40 91 3f 23 	lds	r20, 0x233F
     a54:	41 50       	subi	r20, 0x01	; 1
     a56:	40 93 3f 23 	sts	0x233F, r20
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a5a:	5f bf       	out	0x3f, r21	; 63
		{
			//cdhib.tx_status = LO_ERR;
			//send_radio_error();
		}
		
		if(ctr == 4)
     a5c:	84 30       	cpi	r24, 0x04	; 4
     a5e:	91 05       	cpc	r25, r1
     a60:	09 f4       	brne	.+2      	; 0xa64 <read_radio_receive_buff+0x58>
     a62:	58 c0       	rjmp	.+176    	; 0xb14 <read_radio_receive_buff+0x108>
		{
			//get packet size! Important
			cdhib.radio_packet_size = (rx_byte << 8);
		}
		else if(ctr == 5)
     a64:	85 30       	cpi	r24, 0x05	; 5
     a66:	91 05       	cpc	r25, r1
     a68:	09 f4       	brne	.+2      	; 0xa6c <read_radio_receive_buff+0x60>
     a6a:	5f c0       	rjmp	.+190    	; 0xb2a <read_radio_receive_buff+0x11e>
		{
			//Same deal
			cdhib.radio_packet_size = cdhib.radio_packet_size + rx_byte;
		}
		else if(ctr == LI_HDR + AX_HDR )
     a6c:	86 31       	cpi	r24, 0x16	; 22
     a6e:	91 05       	cpc	r25, r1
     a70:	09 f4       	brne	.+2      	; 0xa74 <read_radio_receive_buff+0x68>
     a72:	6b c0       	rjmp	.+214    	; 0xb4a <read_radio_receive_buff+0x13e>
				//send_radio_error();
			}
		}
			
		//Once you reach the payload
		if(cdhib.dest_address == VCP_FC)
     a74:	20 91 36 22 	lds	r18, 0x2236
     a78:	2b 30       	cpi	r18, 0x0B	; 11
     a7a:	91 f1       	breq	.+100    	; 0xae0 <read_radio_receive_buff+0xd4>
			}
		}
		else
		{
			//Direct Command, Create VCP Frame. 
			if((ctr > LI_HDR + AX_HDR) && (ctr < (cdhib.radio_packet_size + LI_HDR - AX_FTR)))
     a7c:	20 91 34 22 	lds	r18, 0x2234
     a80:	30 91 35 22 	lds	r19, 0x2235
     a84:	87 31       	cpi	r24, 0x17	; 23
     a86:	91 05       	cpc	r25, r1
     a88:	90 f0       	brcs	.+36     	; 0xaae <read_radio_receive_buff+0xa2>
     a8a:	a9 01       	movw	r20, r18
     a8c:	4a 5f       	subi	r20, 0xFA	; 250
     a8e:	5f 4f       	sbci	r21, 0xFF	; 255
     a90:	84 17       	cp	r24, r20
     a92:	95 07       	cpc	r25, r21
     a94:	60 f4       	brcc	.+24     	; 0xaae <read_radio_receive_buff+0xa2>
			{
				cdhib.radio_pre_vcp[ctr - (LI_HDR + AX_HDR + 1)] = rx_byte;
     a96:	e0 91 32 22 	lds	r30, 0x2232
     a9a:	f0 91 33 22 	lds	r31, 0x2233
     a9e:	e8 0f       	add	r30, r24
     aa0:	f9 1f       	adc	r31, r25
     aa2:	77 97       	sbiw	r30, 0x17	; 23
     aa4:	a0 83       	st	Z, r26
     aa6:	20 91 34 22 	lds	r18, 0x2234
     aaa:	30 91 35 22 	lds	r19, 0x2235
			}
		}
			
		if(ctr == (cdhib.radio_packet_size + LI_HDR + LI_FTR - 1))
     aae:	a9 01       	movw	r20, r18
     ab0:	47 5f       	subi	r20, 0xF7	; 247
     ab2:	5f 4f       	sbci	r21, 0xFF	; 255
     ab4:	48 17       	cp	r20, r24
     ab6:	59 07       	cpc	r21, r25
     ab8:	79 f0       	breq	.+30     	; 0xad8 <read_radio_receive_buff+0xcc>
		{
			cdhib.tx_data_ready = true;
		}
		ctr++;
     aba:	01 96       	adiw	r24, 0x01	; 1
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(Receive_RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     abc:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     abe:	f8 94       	cli
			{
				Count = Buffer->Count;
     ac0:	40 91 3f 23 	lds	r20, 0x233F
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ac4:	5f bf       	out	0x3f, r21	; 63

void read_radio_receive_buff	(void)
{
	uint16_t ctr = cdhib.tx_byte_count;
	// read only if packet not already queued to go out
	while(!RingBuffer_IsEmpty(&radio.rx_ringbuff))
     ac6:	41 11       	cpse	r20, r1
     ac8:	b4 cf       	rjmp	.-152    	; 0xa32 <read_radio_receive_buff+0x26>
		{
			cdhib.tx_data_ready = true;
		}
		ctr++;
	}
	cdhib.tx_byte_count = ctr;
     aca:	80 93 2a 22 	sts	0x222A, r24
     ace:	90 93 2b 22 	sts	0x222B, r25
}
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	08 95       	ret
			}
		}
			
		if(ctr == (cdhib.radio_packet_size + LI_HDR + LI_FTR - 1))
		{
			cdhib.tx_data_ready = true;
     ad8:	b0 93 29 22 	sts	0x2229, r27
		}
		ctr++;
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	ee cf       	rjmp	.-36     	; 0xabc <read_radio_receive_buff+0xb0>
     ae0:	20 91 34 22 	lds	r18, 0x2234
     ae4:	30 91 35 22 	lds	r19, 0x2235
			
		//Once you reach the payload
		if(cdhib.dest_address == VCP_FC)
		{
			//Copy entire packet over
			if((ctr >= LI_HDR + AX_HDR) && (ctr < (cdhib.radio_packet_size + LI_HDR - AX_FTR)))
     ae8:	86 31       	cpi	r24, 0x16	; 22
     aea:	91 05       	cpc	r25, r1
     aec:	00 f3       	brcs	.-64     	; 0xaae <read_radio_receive_buff+0xa2>
     aee:	a9 01       	movw	r20, r18
     af0:	4a 5f       	subi	r20, 0xFA	; 250
     af2:	5f 4f       	sbci	r21, 0xFF	; 255
     af4:	84 17       	cp	r24, r20
     af6:	95 07       	cpc	r25, r21
     af8:	d0 f6       	brcc	.-76     	; 0xaae <read_radio_receive_buff+0xa2>
			{
				cdhib.radio_pre_vcp[ctr - (LI_HDR + AX_HDR)] = rx_byte;
     afa:	e0 91 32 22 	lds	r30, 0x2232
     afe:	f0 91 33 22 	lds	r31, 0x2233
     b02:	e8 0f       	add	r30, r24
     b04:	f9 1f       	adc	r31, r25
     b06:	76 97       	sbiw	r30, 0x16	; 22
     b08:	a0 83       	st	Z, r26
     b0a:	20 91 34 22 	lds	r18, 0x2234
     b0e:	30 91 35 22 	lds	r19, 0x2235
     b12:	cd cf       	rjmp	.-102    	; 0xaae <read_radio_receive_buff+0xa2>
		}
		
		if(ctr == 4)
		{
			//get packet size! Important
			cdhib.radio_packet_size = (rx_byte << 8);
     b14:	3a 2f       	mov	r19, r26
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	20 93 34 22 	sts	0x2234, r18
     b1c:	30 93 35 22 	sts	0x2235, r19
				//send_radio_error();
			}
		}
			
		//Once you reach the payload
		if(cdhib.dest_address == VCP_FC)
     b20:	40 91 36 22 	lds	r20, 0x2236
     b24:	4b 30       	cpi	r20, 0x0B	; 11
     b26:	19 f6       	brne	.-122    	; 0xaae <read_radio_receive_buff+0xa2>
     b28:	df cf       	rjmp	.-66     	; 0xae8 <read_radio_receive_buff+0xdc>
			cdhib.radio_packet_size = (rx_byte << 8);
		}
		else if(ctr == 5)
		{
			//Same deal
			cdhib.radio_packet_size = cdhib.radio_packet_size + rx_byte;
     b2a:	20 91 34 22 	lds	r18, 0x2234
     b2e:	30 91 35 22 	lds	r19, 0x2235
     b32:	2a 0f       	add	r18, r26
     b34:	31 1d       	adc	r19, r1
     b36:	20 93 34 22 	sts	0x2234, r18
     b3a:	30 93 35 22 	sts	0x2235, r19
     b3e:	f0 cf       	rjmp	.-32     	; 0xb20 <read_radio_receive_buff+0x114>
		static inline RingBuff_Data_t RingBuffer_Remove(Receive_RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
			
			if (++Buffer->Out == &Buffer->Buffer[RECEIVE_RINGBUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;
     b40:	60 93 3d 23 	sts	0x233D, r22
     b44:	70 93 3e 23 	sts	0x233E, r23
     b48:	81 cf       	rjmp	.-254    	; 0xa4c <read_radio_receive_buff+0x40>
		}
		else if(ctr == LI_HDR + AX_HDR )
		{
			if(rx_byte == FC_MSG || rx_byte == FC_CMD)
     b4a:	a8 30       	cpi	r26, 0x08	; 8
     b4c:	79 f0       	breq	.+30     	; 0xb6c <read_radio_receive_buff+0x160>
     b4e:	a8 31       	cpi	r26, 0x18	; 24
     b50:	69 f0       	breq	.+26     	; 0xb6c <read_radio_receive_buff+0x160>
			{
				cdhib.dest_address = VCP_FC;
			}
			else if(rx_byte == CDH_MSG || rx_byte == CDH_CMD)
     b52:	a8 34       	cpi	r26, 0x48	; 72
     b54:	91 f0       	breq	.+36     	; 0xb7a <read_radio_receive_buff+0x16e>
     b56:	a8 35       	cpi	r26, 0x58	; 88
     b58:	81 f0       	breq	.+32     	; 0xb7a <read_radio_receive_buff+0x16e>
			{
				cdhib.dest_address = VCP_CDHIB;
			}
			else if(rx_byte == PWB_MSG || rx_byte == PWB_CMD)
     b5a:	a8 32       	cpi	r26, 0x28	; 40
     b5c:	89 f0       	breq	.+34     	; 0xb80 <read_radio_receive_buff+0x174>
     b5e:	a8 33       	cpi	r26, 0x38	; 56
     b60:	79 f0       	breq	.+30     	; 0xb80 <read_radio_receive_buff+0x174>
     b62:	20 91 34 22 	lds	r18, 0x2234
     b66:	30 91 35 22 	lds	r19, 0x2235
     b6a:	da cf       	rjmp	.-76     	; 0xb20 <read_radio_receive_buff+0x114>
		}
		else if(ctr == LI_HDR + AX_HDR )
		{
			if(rx_byte == FC_MSG || rx_byte == FC_CMD)
			{
				cdhib.dest_address = VCP_FC;
     b6c:	c0 93 36 22 	sts	0x2236, r28
     b70:	20 91 34 22 	lds	r18, 0x2234
     b74:	30 91 35 22 	lds	r19, 0x2235
     b78:	ba cf       	rjmp	.-140    	; 0xaee <read_radio_receive_buff+0xe2>
			}
			else if(rx_byte == CDH_MSG || rx_byte == CDH_CMD)
			{
				cdhib.dest_address = VCP_CDHIB;
     b7a:	d0 93 36 22 	sts	0x2236, r29
     b7e:	93 cf       	rjmp	.-218    	; 0xaa6 <read_radio_receive_buff+0x9a>
			}
			else if(rx_byte == PWB_MSG || rx_byte == PWB_CMD)
			{
				cdhib.dest_address = VCP_POWER;
     b80:	b0 93 36 22 	sts	0x2236, r27
     b84:	90 cf       	rjmp	.-224    	; 0xaa6 <read_radio_receive_buff+0x9a>

00000b86 <DMA_transmit>:
 *
 * Description  : Transmit data block through USART using DMA
 * 
 */
void DMA_transmit(peripheral_t*	Peripheral)
{
     b86:	8f 92       	push	r8
     b88:	9f 92       	push	r9
     b8a:	af 92       	push	r10
     b8c:	bf 92       	push	r11
     b8e:	cf 92       	push	r12
     b90:	df 92       	push	r13
     b92:	ef 92       	push	r14
     b94:	ff 92       	push	r15
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	ec 01       	movw	r28, r24
	// Set up the block transfer
	DMA_SetupBlock(	Peripheral->DMA_channel,				// DMA Channel
     ba0:	fc 01       	movw	r30, r24
     ba2:	e2 5f       	subi	r30, 0xF2	; 242
     ba4:	fe 4f       	sbci	r31, 0xFE	; 254
     ba6:	a0 80       	ld	r10, Z
     ba8:	b1 80       	ldd	r11, Z+1	; 0x01
     baa:	08 81       	ld	r16, Y
     bac:	19 81       	ldd	r17, Y+1	; 0x01
					Peripheral->tx_data,					// Source buffer address
     bae:	fc 01       	movw	r30, r24
     bb0:	e8 5f       	subi	r30, 0xF8	; 248
     bb2:	fe 4f       	sbci	r31, 0xFE	; 254
 * 
 */
void DMA_transmit(peripheral_t*	Peripheral)
{
	// Set up the block transfer
	DMA_SetupBlock(	Peripheral->DMA_channel,				// DMA Channel
     bb4:	60 81       	ld	r22, Z
     bb6:	71 81       	ldd	r23, Z+1	; 0x01
     bb8:	1f 92       	push	r1
     bba:	1f 92       	push	r1
     bbc:	81 2c       	mov	r8, r1
     bbe:	91 2c       	mov	r9, r1
     bc0:	c1 2c       	mov	r12, r1
     bc2:	d1 2c       	mov	r13, r1
     bc4:	e1 2c       	mov	r14, r1
     bc6:	f1 2c       	mov	r15, r1
     bc8:	20 e1       	ldi	r18, 0x10	; 16
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	8a 81       	ldd	r24, Y+2	; 0x02
     bd2:	9b 81       	ldd	r25, Y+3	; 0x03
     bd4:	2a dd       	rcall	.-1452   	; 0x62a <DMA_SetupBlock>
					DMA_CH_BURSTLEN_1BYTE_gc,				// 1 byte per transfer
					0,										// No repeat
					false);									// No repeat

	// Enable channel - the channel will be automatically disabled when a transfer is finished
	DMA_EnableChannel(Peripheral->DMA_channel);
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	9b 81       	ldd	r25, Y+3	; 0x03
     bda:	22 dd       	rcall	.-1468   	; 0x620 <DMA_EnableChannel>
	#ifdef DEBUG
		PORTA.OUTTGL = Peripheral->tx_LED_pin;
	#endif
		
	// Add to transmit packet count
	Peripheral->tx_packet_count++;
     bdc:	ce 5e       	subi	r28, 0xEE	; 238
     bde:	de 4f       	sbci	r29, 0xFE	; 254
     be0:	88 81       	ld	r24, Y
     be2:	99 81       	ldd	r25, Y+1	; 0x01
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	88 83       	st	Y, r24
     be8:	99 83       	std	Y+1, r25	; 0x01
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	ff 90       	pop	r15
     bf8:	ef 90       	pop	r14
     bfa:	df 90       	pop	r13
     bfc:	cf 90       	pop	r12
     bfe:	bf 90       	pop	r11
     c00:	af 90       	pop	r10
     c02:	9f 90       	pop	r9
     c04:	8f 90       	pop	r8
     c06:	08 95       	ret

00000c08 <scheduler>:
	debug_task();
#else			// Run tasks as defined in conf_scheduler.h	
   for(;;)
   {
      #ifdef Scheduler_task_1
         Scheduler_task_1();
     c08:	79 d1       	rcall	.+754    	; 0xefc <radio_task>
      #endif
      #ifdef Scheduler_task_2
         Scheduler_task_2();
     c0a:	1e d1       	rcall	.+572    	; 0xe48 <cdhib_task>
     c0c:	fd cf       	rjmp	.-6      	; 0xc08 <scheduler>

00000c0e <__vector_1>:
volatile Bool xosc_recovey;		
volatile uint16_t flag;		

/// External oscillator failure interrupt handler
ISR(OSC_XOSCF_vect)
{
     c0e:	1f 92       	push	r1
     c10:	0f 92       	push	r0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	0b b6       	in	r0, 0x3b	; 59
     c1a:	0f 92       	push	r0
     c1c:	2f 93       	push	r18
     c1e:	3f 93       	push	r19
     c20:	4f 93       	push	r20
     c22:	5f 93       	push	r21
     c24:	6f 93       	push	r22
     c26:	7f 93       	push	r23
     c28:	8f 93       	push	r24
     c2a:	9f 93       	push	r25
     c2c:	af 93       	push	r26
     c2e:	bf 93       	push	r27
     c30:	ef 93       	push	r30
     c32:	ff 93       	push	r31
	clock_init (); // Init clock and use internal 32MHz osc
     c34:	16 dc       	rcall	.-2004   	; 0x462 <clock_init>
}
     c36:	ff 91       	pop	r31
     c38:	ef 91       	pop	r30
     c3a:	bf 91       	pop	r27
     c3c:	af 91       	pop	r26
     c3e:	9f 91       	pop	r25
     c40:	8f 91       	pop	r24
     c42:	7f 91       	pop	r23
     c44:	6f 91       	pop	r22
     c46:	5f 91       	pop	r21
     c48:	4f 91       	pop	r20
     c4a:	3f 91       	pop	r19
     c4c:	2f 91       	pop	r18
     c4e:	0f 90       	pop	r0
     c50:	0b be       	out	0x3b, r0	; 59
     c52:	0f 90       	pop	r0
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	0f 90       	pop	r0
     c58:	1f 90       	pop	r1
     c5a:	18 95       	reti

00000c5c <__vector_14>:

/// Timer 1KHz interrupt handler
ISR(TCC0_OVF_vect)
{
     c5c:	1f 92       	push	r1
     c5e:	0f 92       	push	r0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
     c66:	2f 93       	push	r18
     c68:	8f 93       	push	r24
     c6a:	9f 93       	push	r25
	mSeconds++;
     c6c:	80 91 74 29 	lds	r24, 0x2974
     c70:	90 91 75 29 	lds	r25, 0x2975
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	80 93 74 29 	sts	0x2974, r24
     c7a:	90 93 75 29 	sts	0x2975, r25
	
	if (mSeconds >= 999)
     c7e:	80 91 74 29 	lds	r24, 0x2974
     c82:	90 91 75 29 	lds	r25, 0x2975
     c86:	87 3e       	cpi	r24, 0xE7	; 231
     c88:	93 40       	sbci	r25, 0x03	; 3
     c8a:	b0 f0       	brcs	.+44     	; 0xcb8 <__vector_14+0x5c>
		{
			mSeconds =		0;
     c8c:	10 92 74 29 	sts	0x2974, r1
     c90:	10 92 75 29 	sts	0x2975, r1
			
			// Advance seconds counters
			THS_Seconds_counter++;
     c94:	80 91 76 29 	lds	r24, 0x2976
     c98:	90 91 77 29 	lds	r25, 0x2977
     c9c:	01 96       	adiw	r24, 0x01	; 1
     c9e:	80 93 76 29 	sts	0x2976, r24
     ca2:	90 93 77 29 	sts	0x2977, r25
			PWR_WDOG_Seconds_counter++;
     ca6:	80 91 70 29 	lds	r24, 0x2970
     caa:	90 91 71 29 	lds	r25, 0x2971
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	80 93 70 29 	sts	0x2970, r24
     cb4:	90 93 71 29 	sts	0x2971, r25

			#ifdef DEBUG
				PORTA.OUTTGL =	PIN0_bm; // Toggle LED at 1Hz
			#endif
		}				
}
     cb8:	9f 91       	pop	r25
     cba:	8f 91       	pop	r24
     cbc:	2f 91       	pop	r18
     cbe:	0f 90       	pop	r0
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	0f 90       	pop	r0
     cc4:	1f 90       	pop	r1
     cc6:	18 95       	reti

00000cc8 <__vector_25>:


	
/// Radio USART Receive interrupt handler		
ISR(RADIO_UART_RXC_vect)
{
     cc8:	1f 92       	push	r1
     cca:	0f 92       	push	r0
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	0f 92       	push	r0
     cd0:	11 24       	eor	r1, r1
     cd2:	0b b6       	in	r0, 0x3b	; 59
     cd4:	0f 92       	push	r0
     cd6:	2f 93       	push	r18
     cd8:	8f 93       	push	r24
     cda:	9f 93       	push	r25
     cdc:	ef 93       	push	r30
     cde:	ff 93       	push	r31
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	1f 92       	push	r1
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
	flag++;
     cea:	80 91 6e 29 	lds	r24, 0x296E
     cee:	90 91 6f 29 	lds	r25, 0x296F
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	80 93 6e 29 	sts	0x296E, r24
     cf8:	90 93 6f 29 	sts	0x296F, r25
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(Receive_RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     cfc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     cfe:	f8 94       	cli
			{
				Count = Buffer->Count;
     d00:	80 91 3f 23 	lds	r24, 0x233F
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d04:	9f bf       	out	0x3f, r25	; 63
	if (RingBuffer_IsFull(&radio.rx_ringbuff))
	{
		volatile uint8_t temp = radio.USART->DATA;					// clear interrupt flag
     d06:	e0 91 38 22 	lds	r30, 0x2238
     d0a:	f0 91 39 22 	lds	r31, 0x2239
	
/// Radio USART Receive interrupt handler		
ISR(RADIO_UART_RXC_vect)
{
	flag++;
	if (RingBuffer_IsFull(&radio.rx_ringbuff))
     d0e:	8f 3f       	cpi	r24, 0xFF	; 255
     d10:	a9 f1       	breq	.+106    	; 0xd7c <__vector_25+0xb4>
		radio.rx_ringbuff_overflow++;								// buffer overflow
	}
	else
	{
		//if(radio.USART->DATA != 0xC0){
			RingBuffer_Insert(&radio.rx_ringbuff, radio.USART->DATA);	// read received byte into the ring buffer
     d12:	80 81       	ld	r24, Z
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(Receive_RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
     d14:	e0 91 3b 23 	lds	r30, 0x233B
     d18:	f0 91 3c 23 	lds	r31, 0x233C
     d1c:	80 83       	st	Z, r24
			
			if (++Buffer->In == &Buffer->Buffer[RECEIVE_RINGBUFFER_SIZE])
     d1e:	e0 91 3b 23 	lds	r30, 0x233B
     d22:	f0 91 3c 23 	lds	r31, 0x233C
     d26:	cf 01       	movw	r24, r30
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	80 93 3b 23 	sts	0x233B, r24
     d2e:	90 93 3c 23 	sts	0x233C, r25
     d32:	8b 53       	subi	r24, 0x3B	; 59
     d34:	93 42       	sbci	r25, 0x23	; 35
     d36:	69 f1       	breq	.+90     	; 0xd92 <__vector_25+0xca>
			  Buffer->In = Buffer->Buffer;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     d38:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d3a:	f8 94       	cli
			{
				Buffer->Count++;
     d3c:	80 91 3f 23 	lds	r24, 0x233F
     d40:	8f 5f       	subi	r24, 0xFF	; 255
     d42:	80 93 3f 23 	sts	0x233F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d46:	9f bf       	out	0x3f, r25	; 63
		//}
	}
	if(flag == 300){
     d48:	80 91 6e 29 	lds	r24, 0x296E
     d4c:	90 91 6f 29 	lds	r25, 0x296F
     d50:	8c 32       	cpi	r24, 0x2C	; 44
     d52:	91 40       	sbci	r25, 0x01	; 1
     d54:	21 f4       	brne	.+8      	; 0xd5e <__vector_25+0x96>
		flag = 0;
     d56:	10 92 6e 29 	sts	0x296E, r1
     d5a:	10 92 6f 29 	sts	0x296F, r1
	}

}
     d5e:	0f 90       	pop	r0
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	ff 91       	pop	r31
     d66:	ef 91       	pop	r30
     d68:	9f 91       	pop	r25
     d6a:	8f 91       	pop	r24
     d6c:	2f 91       	pop	r18
     d6e:	0f 90       	pop	r0
     d70:	0b be       	out	0x3b, r0	; 59
     d72:	0f 90       	pop	r0
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	0f 90       	pop	r0
     d78:	1f 90       	pop	r1
     d7a:	18 95       	reti
ISR(RADIO_UART_RXC_vect)
{
	flag++;
	if (RingBuffer_IsFull(&radio.rx_ringbuff))
	{
		volatile uint8_t temp = radio.USART->DATA;					// clear interrupt flag
     d7c:	80 81       	ld	r24, Z
     d7e:	89 83       	std	Y+1, r24	; 0x01
		temp++;														// Remove unused variable compiler warning
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	8f 5f       	subi	r24, 0xFF	; 255
     d84:	89 83       	std	Y+1, r24	; 0x01
		radio.rx_ringbuff_overflow++;								// buffer overflow
     d86:	80 91 44 23 	lds	r24, 0x2344
     d8a:	8f 5f       	subi	r24, 0xFF	; 255
     d8c:	80 93 44 23 	sts	0x2344, r24
     d90:	db cf       	rjmp	.-74     	; 0xd48 <__vector_25+0x80>
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
			
			if (++Buffer->In == &Buffer->Buffer[RECEIVE_RINGBUFFER_SIZE])
			  Buffer->In = Buffer->Buffer;
     d92:	8c e3       	ldi	r24, 0x3C	; 60
     d94:	92 e2       	ldi	r25, 0x22	; 34
     d96:	81 83       	std	Z+1, r24	; 0x01
     d98:	92 83       	std	Z+2, r25	; 0x02
     d9a:	ce cf       	rjmp	.-100    	; 0xd38 <__vector_25+0x70>

00000d9c <__vector_88>:

}
	
/// CDHIB USART Receive interrupt handler
ISR(CDHIB_UART_RXC_vect)
{
     d9c:	1f 92       	push	r1
     d9e:	0f 92       	push	r0
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	0f 92       	push	r0
     da4:	11 24       	eor	r1, r1
     da6:	0b b6       	in	r0, 0x3b	; 59
     da8:	0f 92       	push	r0
     daa:	2f 93       	push	r18
     dac:	8f 93       	push	r24
     dae:	9f 93       	push	r25
     db0:	ef 93       	push	r30
     db2:	ff 93       	push	r31
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	1f 92       	push	r1
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(Receive_RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     dbe:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     dc0:	f8 94       	cli
			{
				Count = Buffer->Count;
     dc2:	80 91 23 22 	lds	r24, 0x2223
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     dc6:	9f bf       	out	0x3f, r25	; 63
	if (RingBuffer_IsFull(&cdhib.rx_ringbuff))
	{
		volatile uint8_t temp = cdhib.USART->DATA;						// clear interrupt flag
     dc8:	e0 91 1c 21 	lds	r30, 0x211C
     dcc:	f0 91 1d 21 	lds	r31, 0x211D
}
	
/// CDHIB USART Receive interrupt handler
ISR(CDHIB_UART_RXC_vect)
{
	if (RingBuffer_IsFull(&cdhib.rx_ringbuff))
     dd0:	8f 3f       	cpi	r24, 0xFF	; 255
     dd2:	51 f1       	breq	.+84     	; 0xe28 <__vector_88+0x8c>
		temp++;														// Remove unused variable compiler warning
		cdhib.rx_ringbuff_overflow++;									// buffer overflow
	}
	else
	{
		RingBuffer_Insert(&cdhib.rx_ringbuff, cdhib.USART->DATA);			// read received byte into the ring buffer
     dd4:	80 81       	ld	r24, Z
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(Receive_RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
     dd6:	e0 91 1f 22 	lds	r30, 0x221F
     dda:	f0 91 20 22 	lds	r31, 0x2220
     dde:	80 83       	st	Z, r24
			
			if (++Buffer->In == &Buffer->Buffer[RECEIVE_RINGBUFFER_SIZE])
     de0:	e0 91 1f 22 	lds	r30, 0x221F
     de4:	f0 91 20 22 	lds	r31, 0x2220
     de8:	cf 01       	movw	r24, r30
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	80 93 1f 22 	sts	0x221F, r24
     df0:	90 93 20 22 	sts	0x2220, r25
     df4:	8f 51       	subi	r24, 0x1F	; 31
     df6:	92 42       	sbci	r25, 0x22	; 34
     df8:	11 f1       	breq	.+68     	; 0xe3e <__vector_88+0xa2>
			  Buffer->In = Buffer->Buffer;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     dfa:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     dfc:	f8 94       	cli
			{
				Buffer->Count++;
     dfe:	80 91 23 22 	lds	r24, 0x2223
     e02:	8f 5f       	subi	r24, 0xFF	; 255
     e04:	80 93 23 22 	sts	0x2223, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e08:	9f bf       	out	0x3f, r25	; 63
	}		
}
     e0a:	0f 90       	pop	r0
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	ff 91       	pop	r31
     e12:	ef 91       	pop	r30
     e14:	9f 91       	pop	r25
     e16:	8f 91       	pop	r24
     e18:	2f 91       	pop	r18
     e1a:	0f 90       	pop	r0
     e1c:	0b be       	out	0x3b, r0	; 59
     e1e:	0f 90       	pop	r0
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	0f 90       	pop	r0
     e24:	1f 90       	pop	r1
     e26:	18 95       	reti
/// CDHIB USART Receive interrupt handler
ISR(CDHIB_UART_RXC_vect)
{
	if (RingBuffer_IsFull(&cdhib.rx_ringbuff))
	{
		volatile uint8_t temp = cdhib.USART->DATA;						// clear interrupt flag
     e28:	80 81       	ld	r24, Z
     e2a:	89 83       	std	Y+1, r24	; 0x01
		temp++;														// Remove unused variable compiler warning
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	8f 5f       	subi	r24, 0xFF	; 255
     e30:	89 83       	std	Y+1, r24	; 0x01
		cdhib.rx_ringbuff_overflow++;									// buffer overflow
     e32:	80 91 28 22 	lds	r24, 0x2228
     e36:	8f 5f       	subi	r24, 0xFF	; 255
     e38:	80 93 28 22 	sts	0x2228, r24
     e3c:	e6 cf       	rjmp	.-52     	; 0xe0a <__vector_88+0x6e>
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
			
			if (++Buffer->In == &Buffer->Buffer[RECEIVE_RINGBUFFER_SIZE])
			  Buffer->In = Buffer->Buffer;
     e3e:	80 e2       	ldi	r24, 0x20	; 32
     e40:	91 e2       	ldi	r25, 0x21	; 33
     e42:	81 83       	std	Z+1, r24	; 0x01
     e44:	92 83       	std	Z+2, r25	; 0x02
     e46:	d9 cf       	rjmp	.-78     	; 0xdfa <__vector_88+0x5e>

00000e48 <cdhib_task>:
 * *			Construct Li-1 header on RADIO Peripheral transmit buffer
 * *			Copy packet over to that buffer. DMA transmit. 
 * 
 */
void cdhib_task	(void)
{
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	1f 92       	push	r1
     e52:	1f 92       	push	r1
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
		if (!radio.tx_data_ready)
     e58:	80 91 45 23 	lds	r24, 0x2345
     e5c:	88 23       	and	r24, r24
     e5e:	09 f4       	brne	.+2      	; 0xe62 <cdhib_task+0x1a>
     e60:	47 c0       	rjmp	.+142    	; 0xef0 <cdhib_task+0xa8>
		{
			read_CDH_receive_buff();
		}
		
		if(cdhib.tx_data_ready)
     e62:	80 91 29 22 	lds	r24, 0x2229
     e66:	88 23       	and	r24, r24
     e68:	e1 f1       	breq	.+120    	; 0xee2 <cdhib_task+0x9a>
		{
			uint8_t res;
			uint16_t size = RADIO_TRANSMIT_MESSAGE_BUFF_SIZE;
     e6a:	88 e0       	ldi	r24, 0x08	; 8
     e6c:	92 e0       	ldi	r25, 0x02	; 2
     e6e:	89 83       	std	Y+1, r24	; 0x01
     e70:	9a 83       	std	Y+2, r25	; 0x02
			cdhib.tx_byte_count = cdhib.tx_byte_count-LI_HDR-LI_FTR-AX_HDR-AX_FTR;
     e72:	80 91 2a 22 	lds	r24, 0x222A
     e76:	90 91 2b 22 	lds	r25, 0x222B
     e7a:	8c 01       	movw	r16, r24
     e7c:	0a 51       	subi	r16, 0x1A	; 26
     e7e:	11 09       	sbc	r17, r1
     e80:	00 93 2a 22 	sts	0x222A, r16
     e84:	10 93 2b 22 	sts	0x222B, r17
			if(cdhib.dest_address == VCP_FC)
     e88:	40 91 36 22 	lds	r20, 0x2236
     e8c:	4b 30       	cpi	r20, 0x0B	; 11
     e8e:	39 f0       	breq	.+14     	; 0xe9e <cdhib_task+0x56>
				res = Create_VCP_frame(cdhib.tx_data,&size,cdhib.dest_address,cdhib.radio_pre_vcp,cdhib.tx_byte_count);
			}
			else
			{
				//Direct Command
				cdhib.tx_byte_count = cdhib.tx_byte_count - 1;
     e90:	8c 01       	movw	r16, r24
     e92:	0b 51       	subi	r16, 0x1B	; 27
     e94:	11 09       	sbc	r17, r1
     e96:	00 93 2a 22 	sts	0x222A, r16
     e9a:	10 93 2b 22 	sts	0x222B, r17
				res = Create_VCP_frame(cdhib.tx_data,&size,cdhib.dest_address,cdhib.radio_pre_vcp,cdhib.tx_byte_count);
     e9e:	20 91 32 22 	lds	r18, 0x2232
     ea2:	30 91 33 22 	lds	r19, 0x2233
     ea6:	be 01       	movw	r22, r28
     ea8:	6f 5f       	subi	r22, 0xFF	; 255
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
     eac:	80 91 24 22 	lds	r24, 0x2224
     eb0:	90 91 25 22 	lds	r25, 0x2225
     eb4:	ad d0       	rcall	.+346    	; 0x1010 <Create_VCP_frame>
			}
			
			cdhib.tx_byte_count = cdhib.tx_byte_count + 5;
     eb6:	20 91 2a 22 	lds	r18, 0x222A
     eba:	30 91 2b 22 	lds	r19, 0x222B
     ebe:	2b 5f       	subi	r18, 0xFB	; 251
     ec0:	3f 4f       	sbci	r19, 0xFF	; 255
     ec2:	20 93 2a 22 	sts	0x222A, r18
     ec6:	30 93 2b 22 	sts	0x222B, r19
			if(res == VCP_TERM)
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	99 f0       	breq	.+38     	; 0xef4 <cdhib_task+0xac>
			{
				cdhib.tx_status = VCP_CREAT_ERR;
				//send_radio_error();
			}
			
			cdhib.tx_data_ready = false;
     ece:	10 92 29 22 	sts	0x2229, r1
			cdhib.tx_byte_count = 0;
     ed2:	10 92 2a 22 	sts	0x222A, r1
     ed6:	10 92 2b 22 	sts	0x222B, r1
			cdhib.dest_address = 0;
     eda:	10 92 36 22 	sts	0x2236, r1
			cdhib.tx_status = 0;
     ede:	10 92 2d 22 	sts	0x222D, r1
		}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	08 95       	ret
 */
void cdhib_task	(void)
{
		if (!radio.tx_data_ready)
		{
			read_CDH_receive_buff();
     ef0:	6c dc       	rcall	.-1832   	; 0x7ca <read_CDH_receive_buff>
     ef2:	b7 cf       	rjmp	.-146    	; 0xe62 <cdhib_task+0x1a>
			}
			
			cdhib.tx_byte_count = cdhib.tx_byte_count + 5;
			if(res == VCP_TERM)
			{
				DMA_transmit(&cdhib);
     ef4:	8c e1       	ldi	r24, 0x1C	; 28
     ef6:	91 e2       	ldi	r25, 0x21	; 33
     ef8:	46 de       	rcall	.-884    	; 0xb86 <DMA_transmit>
     efa:	e9 cf       	rjmp	.-46     	; 0xece <cdhib_task+0x86>

00000efc <radio_task>:
 * *			DMA Transmit
 * 
 */
void radio_task	(void)
{
	if(!cdhib.tx_data_ready)
     efc:	80 91 29 22 	lds	r24, 0x2229
     f00:	88 23       	and	r24, r24
     f02:	99 f0       	breq	.+38     	; 0xf2a <radio_task+0x2e>
	{
		read_radio_receive_buff();
	}
	if(radio.tx_data_ready)
     f04:	80 91 45 23 	lds	r24, 0x2345
     f08:	81 11       	cpse	r24, r1
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <radio_task+0x12>
     f0c:	08 95       	ret
	{
		DMA_transmit(&radio);
     f0e:	88 e3       	ldi	r24, 0x38	; 56
     f10:	92 e2       	ldi	r25, 0x22	; 34
     f12:	39 de       	rcall	.-910    	; 0xb86 <DMA_transmit>
		radio.tx_data_ready = false;
     f14:	10 92 45 23 	sts	0x2345, r1
		cdhib.cdh_state = 0;
     f18:	10 92 30 22 	sts	0x2230, r1
		radio.tx_byte_count = 0;
     f1c:	10 92 46 23 	sts	0x2346, r1
     f20:	10 92 47 23 	sts	0x2347, r1
		radio.tx_status = 0;
     f24:	10 92 49 23 	sts	0x2349, r1
     f28:	08 95       	ret
 */
void radio_task	(void)
{
	if(!cdhib.tx_data_ready)
	{
		read_radio_receive_buff();
     f2a:	70 dd       	rcall	.-1312   	; 0xa0c <read_radio_receive_buff>
     f2c:	eb cf       	rjmp	.-42     	; 0xf04 <radio_task+0x8>

00000f2e <append_crc16>:
 * append_crc16
 *
 * Adds a byte of data into the crc calculation.
 */
void append_crc16(uint8 character, uint16ptr crc)
{
     f2e:	fb 01       	movw	r30, r22
     f30:	20 81       	ld	r18, Z
     f32:	31 81       	ldd	r19, Z+1	; 0x01
	for (j = 0; j < 8; j++)
	{
		//*crc = (*crc >> 1) ^ (((character ^ *crc) & 0x01) ? 0x8408 : 0);
		//character >>= 1;

		if ((character ^ *crc) & 0x01) {
     f34:	a9 01       	movw	r20, r18
     f36:	48 27       	eor	r20, r24
                *crc = (*crc >> 1) ^ 0x8408;
     f38:	36 95       	lsr	r19
     f3a:	27 95       	ror	r18
	for (j = 0; j < 8; j++)
	{
		//*crc = (*crc >> 1) ^ (((character ^ *crc) & 0x01) ? 0x8408 : 0);
		//character >>= 1;

		if ((character ^ *crc) & 0x01) {
     f3c:	40 ff       	sbrs	r20, 0
     f3e:	04 c0       	rjmp	.+8      	; 0xf48 <append_crc16+0x1a>
                *crc = (*crc >> 1) ^ 0x8408;
     f40:	98 e0       	ldi	r25, 0x08	; 8
     f42:	29 27       	eor	r18, r25
     f44:	94 e8       	ldi	r25, 0x84	; 132
     f46:	39 27       	eor	r19, r25
     f48:	20 83       	st	Z, r18
     f4a:	31 83       	std	Z+1, r19	; 0x01
		}
        else {
            *crc = *crc >> 1;
		}

        character >>= 1;
     f4c:	86 95       	lsr	r24
	for (j = 0; j < 8; j++)
	{
		//*crc = (*crc >> 1) ^ (((character ^ *crc) & 0x01) ? 0x8408 : 0);
		//character >>= 1;

		if ((character ^ *crc) & 0x01) {
     f4e:	a9 01       	movw	r20, r18
     f50:	48 27       	eor	r20, r24
                *crc = (*crc >> 1) ^ 0x8408;
     f52:	36 95       	lsr	r19
     f54:	27 95       	ror	r18
	for (j = 0; j < 8; j++)
	{
		//*crc = (*crc >> 1) ^ (((character ^ *crc) & 0x01) ? 0x8408 : 0);
		//character >>= 1;

		if ((character ^ *crc) & 0x01) {
     f56:	40 ff       	sbrs	r20, 0
     f58:	04 c0       	rjmp	.+8      	; 0xf62 <append_crc16+0x34>
                *crc = (*crc >> 1) ^ 0x8408;
     f5a:	98 e0       	ldi	r25, 0x08	; 8
     f5c:	29 27       	eor	r18, r25
     f5e:	94 e8       	ldi	r25, 0x84	; 132
     f60:	39 27       	eor	r19, r25
     f62:	20 83       	st	Z, r18
     f64:	31 83       	std	Z+1, r19	; 0x01
		}
        else {
            *crc = *crc >> 1;
		}

        character >>= 1;
     f66:	68 2f       	mov	r22, r24
     f68:	66 95       	lsr	r22
	for (j = 0; j < 8; j++)
	{
		//*crc = (*crc >> 1) ^ (((character ^ *crc) & 0x01) ? 0x8408 : 0);
		//character >>= 1;

		if ((character ^ *crc) & 0x01) {
     f6a:	a9 01       	movw	r20, r18
     f6c:	46 27       	eor	r20, r22
                *crc = (*crc >> 1) ^ 0x8408;
     f6e:	c9 01       	movw	r24, r18
     f70:	96 95       	lsr	r25
     f72:	87 95       	ror	r24
	for (j = 0; j < 8; j++)
	{
		//*crc = (*crc >> 1) ^ (((character ^ *crc) & 0x01) ? 0x8408 : 0);
		//character >>= 1;

		if ((character ^ *crc) & 0x01) {
     f74:	40 ff       	sbrs	r20, 0
     f76:	04 c0       	rjmp	.+8      	; 0xf80 <append_crc16+0x52>
                *crc = (*crc >> 1) ^ 0x8408;
     f78:	28 e0       	ldi	r18, 0x08	; 8
     f7a:	82 27       	eor	r24, r18
     f7c:	24 e8       	ldi	r18, 0x84	; 132
     f7e:	92 27       	eor	r25, r18
     f80:	80 83       	st	Z, r24
     f82:	91 83       	std	Z+1, r25	; 0x01
		}
        else {
            *crc = *crc >> 1;
		}

        character >>= 1;
     f84:	46 2f       	mov	r20, r22
     f86:	46 95       	lsr	r20
	for (j = 0; j < 8; j++)
	{
		//*crc = (*crc >> 1) ^ (((character ^ *crc) & 0x01) ? 0x8408 : 0);
		//character >>= 1;

		if ((character ^ *crc) & 0x01) {
     f88:	9c 01       	movw	r18, r24
     f8a:	24 27       	eor	r18, r20
                *crc = (*crc >> 1) ^ 0x8408;
     f8c:	96 95       	lsr	r25
     f8e:	87 95       	ror	r24
	for (j = 0; j < 8; j++)
	{
		//*crc = (*crc >> 1) ^ (((character ^ *crc) & 0x01) ? 0x8408 : 0);
		//character >>= 1;

		if ((character ^ *crc) & 0x01) {
     f90:	20 ff       	sbrs	r18, 0
     f92:	04 c0       	rjmp	.+8      	; 0xf9c <append_crc16+0x6e>
                *crc = (*crc >> 1) ^ 0x8408;
     f94:	28 e0       	ldi	r18, 0x08	; 8
     f96:	82 27       	eor	r24, r18
     f98:	24 e8       	ldi	r18, 0x84	; 132
     f9a:	92 27       	eor	r25, r18
     f9c:	80 83       	st	Z, r24
     f9e:	91 83       	std	Z+1, r25	; 0x01
		}
        else {
            *crc = *crc >> 1;
		}

        character >>= 1;
     fa0:	46 95       	lsr	r20
	for (j = 0; j < 8; j++)
	{
		//*crc = (*crc >> 1) ^ (((character ^ *crc) & 0x01) ? 0x8408 : 0);
		//character >>= 1;

		if ((character ^ *crc) & 0x01) {
     fa2:	9c 01       	movw	r18, r24
     fa4:	24 27       	eor	r18, r20
                *crc = (*crc >> 1) ^ 0x8408;
     fa6:	96 95       	lsr	r25
     fa8:	87 95       	ror	r24
	for (j = 0; j < 8; j++)
	{
		//*crc = (*crc >> 1) ^ (((character ^ *crc) & 0x01) ? 0x8408 : 0);
		//character >>= 1;

		if ((character ^ *crc) & 0x01) {
     faa:	20 ff       	sbrs	r18, 0
     fac:	04 c0       	rjmp	.+8      	; 0xfb6 <append_crc16+0x88>
                *crc = (*crc >> 1) ^ 0x8408;
     fae:	28 e0       	ldi	r18, 0x08	; 8
     fb0:	82 27       	eor	r24, r18
     fb2:	24 e8       	ldi	r18, 0x84	; 132
     fb4:	92 27       	eor	r25, r18
     fb6:	80 83       	st	Z, r24
     fb8:	91 83       	std	Z+1, r25	; 0x01
		}
        else {
            *crc = *crc >> 1;
		}

        character >>= 1;
     fba:	46 95       	lsr	r20
	for (j = 0; j < 8; j++)
	{
		//*crc = (*crc >> 1) ^ (((character ^ *crc) & 0x01) ? 0x8408 : 0);
		//character >>= 1;

		if ((character ^ *crc) & 0x01) {
     fbc:	9c 01       	movw	r18, r24
     fbe:	24 27       	eor	r18, r20
                *crc = (*crc >> 1) ^ 0x8408;
     fc0:	96 95       	lsr	r25
     fc2:	87 95       	ror	r24
	for (j = 0; j < 8; j++)
	{
		//*crc = (*crc >> 1) ^ (((character ^ *crc) & 0x01) ? 0x8408 : 0);
		//character >>= 1;

		if ((character ^ *crc) & 0x01) {
     fc4:	20 ff       	sbrs	r18, 0
     fc6:	04 c0       	rjmp	.+8      	; 0xfd0 <append_crc16+0xa2>
                *crc = (*crc >> 1) ^ 0x8408;
     fc8:	28 e0       	ldi	r18, 0x08	; 8
     fca:	82 27       	eor	r24, r18
     fcc:	24 e8       	ldi	r18, 0x84	; 132
     fce:	92 27       	eor	r25, r18
     fd0:	80 83       	st	Z, r24
     fd2:	91 83       	std	Z+1, r25	; 0x01
		}
        else {
            *crc = *crc >> 1;
		}

        character >>= 1;
     fd4:	46 95       	lsr	r20
	for (j = 0; j < 8; j++)
	{
		//*crc = (*crc >> 1) ^ (((character ^ *crc) & 0x01) ? 0x8408 : 0);
		//character >>= 1;

		if ((character ^ *crc) & 0x01) {
     fd6:	9c 01       	movw	r18, r24
     fd8:	24 27       	eor	r18, r20
                *crc = (*crc >> 1) ^ 0x8408;
     fda:	96 95       	lsr	r25
     fdc:	87 95       	ror	r24
	for (j = 0; j < 8; j++)
	{
		//*crc = (*crc >> 1) ^ (((character ^ *crc) & 0x01) ? 0x8408 : 0);
		//character >>= 1;

		if ((character ^ *crc) & 0x01) {
     fde:	20 ff       	sbrs	r18, 0
     fe0:	04 c0       	rjmp	.+8      	; 0xfea <append_crc16+0xbc>
                *crc = (*crc >> 1) ^ 0x8408;
     fe2:	28 e0       	ldi	r18, 0x08	; 8
     fe4:	82 27       	eor	r24, r18
     fe6:	24 e8       	ldi	r18, 0x84	; 132
     fe8:	92 27       	eor	r25, r18
     fea:	80 83       	st	Z, r24
     fec:	91 83       	std	Z+1, r25	; 0x01
		}
        else {
            *crc = *crc >> 1;
		}

        character >>= 1;
     fee:	46 95       	lsr	r20
	for (j = 0; j < 8; j++)
	{
		//*crc = (*crc >> 1) ^ (((character ^ *crc) & 0x01) ? 0x8408 : 0);
		//character >>= 1;

		if ((character ^ *crc) & 0x01) {
     ff0:	9c 01       	movw	r18, r24
     ff2:	24 27       	eor	r18, r20
                *crc = (*crc >> 1) ^ 0x8408;
     ff4:	96 95       	lsr	r25
     ff6:	87 95       	ror	r24
	for (j = 0; j < 8; j++)
	{
		//*crc = (*crc >> 1) ^ (((character ^ *crc) & 0x01) ? 0x8408 : 0);
		//character >>= 1;

		if ((character ^ *crc) & 0x01) {
     ff8:	20 ff       	sbrs	r18, 0
     ffa:	07 c0       	rjmp	.+14     	; 0x100a <append_crc16+0xdc>
                *crc = (*crc >> 1) ^ 0x8408;
     ffc:	28 e0       	ldi	r18, 0x08	; 8
     ffe:	82 27       	eor	r24, r18
    1000:	24 e8       	ldi	r18, 0x84	; 132
    1002:	92 27       	eor	r25, r18
    1004:	80 83       	st	Z, r24
    1006:	91 83       	std	Z+1, r25	; 0x01
    1008:	08 95       	ret
		}
        else {
            *crc = *crc >> 1;
    100a:	80 83       	st	Z, r24
    100c:	91 83       	std	Z+1, r25	; 0x01
    100e:	08 95       	ret

00001010 <Create_VCP_frame>:
 *				  including VCP address, CRC calculation and KISS escaping
 * 
 * \return				VCP status flags
 */
uint8_t Create_VCP_frame(uint8ptr dst, uint16ptr dst_size, uint8 addr, uint8ptr src, uint16 src_size)
{
    1010:	5f 92       	push	r5
    1012:	6f 92       	push	r6
    1014:	7f 92       	push	r7
    1016:	8f 92       	push	r8
    1018:	9f 92       	push	r9
    101a:	af 92       	push	r10
    101c:	bf 92       	push	r11
    101e:	cf 92       	push	r12
    1020:	df 92       	push	r13
    1022:	ef 92       	push	r14
    1024:	ff 92       	push	r15
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	1f 92       	push	r1
    1030:	1f 92       	push	r1
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	7c 01       	movw	r14, r24
    1038:	6b 01       	movw	r12, r22
    103a:	54 2e       	mov	r5, r20
    103c:	49 01       	movw	r8, r18
	uint16_t crc = CRC16_INIT_VALUE;
    103e:	19 82       	std	Y+1, r1	; 0x01
    1040:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t src_index = 0;
	uint16_t dst_index = 0;
	uint16_t payload_size;
	
	// Check for invalid buffers
	if (dst == NULL || src == NULL)
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	09 f4       	brne	.+2      	; 0x1048 <Create_VCP_frame+0x38>
    1046:	71 c0       	rjmp	.+226    	; 0x112a <Create_VCP_frame+0x11a>
    1048:	21 15       	cp	r18, r1
    104a:	31 05       	cpc	r19, r1
    104c:	09 f4       	brne	.+2      	; 0x1050 <Create_VCP_frame+0x40>
    104e:	6d c0       	rjmp	.+218    	; 0x112a <Create_VCP_frame+0x11a>
		return VCP_NULL_ERR;
	// Check for invalid VCP address	
	if (addr > VCP_FC && addr != VCP_SUN_SENSOR)
    1050:	8b e0       	ldi	r24, 0x0B	; 11
    1052:	84 17       	cp	r24, r20
    1054:	b0 f4       	brcc	.+44     	; 0x1082 <Create_VCP_frame+0x72>
    1056:	a8 e3       	ldi	r26, 0x38	; 56
    1058:	4a 17       	cp	r20, r26
    105a:	99 f0       	breq	.+38     	; 0x1082 <Create_VCP_frame+0x72>
		return VCP_ADDR_ERR;		
    105c:	86 e0       	ldi	r24, 0x06	; 6
	*dst_size = dst_index;
	
	// All good
	return VCP_TERM;

}
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	df 90       	pop	r13
    1070:	cf 90       	pop	r12
    1072:	bf 90       	pop	r11
    1074:	af 90       	pop	r10
    1076:	9f 90       	pop	r9
    1078:	8f 90       	pop	r8
    107a:	7f 90       	pop	r7
    107c:	6f 90       	pop	r6
    107e:	5f 90       	pop	r5
    1080:	08 95       	ret
	// Check for invalid VCP address	
	if (addr > VCP_FC && addr != VCP_SUN_SENSOR)
		return VCP_ADDR_ERR;		
		
	// Calculate CRC:
	append_crc16(addr, (uint16ptr)&crc);
    1082:	be 01       	movw	r22, r28
    1084:	6f 5f       	subi	r22, 0xFF	; 255
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	85 2d       	mov	r24, r5
    108a:	51 df       	rcall	.-350    	; 0xf2e <append_crc16>
	for (src_index = 0; src_index < src_size; src_index++)
    108c:	01 15       	cp	r16, r1
    108e:	11 05       	cpc	r17, r1
    1090:	09 f4       	brne	.+2      	; 0x1094 <Create_VCP_frame+0x84>
    1092:	5d c0       	rjmp	.+186    	; 0x114e <Create_VCP_frame+0x13e>
    1094:	34 01       	movw	r6, r8
 * Description  : This function takes a full packet and packages it into a VCP frame,
 *				  including VCP address, CRC calculation and KISS escaping
 * 
 * \return				VCP status flags
 */
uint8_t Create_VCP_frame(uint8ptr dst, uint16ptr dst_size, uint8 addr, uint8ptr src, uint16 src_size)
    1096:	58 01       	movw	r10, r16
    1098:	a8 0c       	add	r10, r8
    109a:	b9 1c       	adc	r11, r9
		
	// Calculate CRC:
	append_crc16(addr, (uint16ptr)&crc);
	for (src_index = 0; src_index < src_size; src_index++)
	{
		append_crc16(src[src_index], (uint16ptr)&crc);
    109c:	be 01       	movw	r22, r28
    109e:	6f 5f       	subi	r22, 0xFF	; 255
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255
    10a2:	f3 01       	movw	r30, r6
    10a4:	81 91       	ld	r24, Z+
    10a6:	3f 01       	movw	r6, r30
    10a8:	42 df       	rcall	.-380    	; 0xf2e <append_crc16>
	if (addr > VCP_FC && addr != VCP_SUN_SENSOR)
		return VCP_ADDR_ERR;		
		
	// Calculate CRC:
	append_crc16(addr, (uint16ptr)&crc);
	for (src_index = 0; src_index < src_size; src_index++)
    10aa:	6a 14       	cp	r6, r10
    10ac:	7b 04       	cpc	r7, r11
    10ae:	b1 f7       	brne	.-20     	; 0x109c <Create_VCP_frame+0x8c>
	{
		append_crc16(src[src_index], (uint16ptr)&crc);
	}
	
	// Add CRC to the end of the source buffer
	src[src_index++] = ((crc >> 8) & 0xFF);
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	9a 81       	ldd	r25, Y+2	; 0x02
    10b4:	d3 01       	movw	r26, r6
    10b6:	9c 93       	st	X, r25
	src[src_index++] = (crc & 0xFF);
    10b8:	11 96       	adiw	r26, 0x01	; 1
    10ba:	8c 93       	st	X, r24
    10bc:	0e 5f       	subi	r16, 0xFE	; 254
    10be:	1f 4f       	sbci	r17, 0xFF	; 255
	
	
	// Build KISS Frame:
	
	// Start the frame with FEND
	dst[dst_index++] =					FEND;
    10c0:	80 ec       	ldi	r24, 0xC0	; 192
    10c2:	f7 01       	movw	r30, r14
    10c4:	80 83       	st	Z, r24
	// then insert VCP address
	dst[dst_index++] =					addr;
    10c6:	51 82       	std	Z+1, r5	; 0x01
	
	// Copy src to dst and Escape when necessary
	for (src_index = 0; src_index < payload_size; src_index++ )
    10c8:	01 15       	cp	r16, r1
    10ca:	11 05       	cpc	r17, r1
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <Create_VCP_frame+0xc0>
    10ce:	4c c0       	rjmp	.+152    	; 0x1168 <Create_VCP_frame+0x158>
 *				  including VCP address, CRC calculation and KISS escaping
 * 
 * \return				VCP status flags
 */
uint8_t Create_VCP_frame(uint8ptr dst, uint16ptr dst_size, uint8 addr, uint8ptr src, uint16 src_size)
{
    10d0:	42 e0       	ldi	r20, 0x02	; 2
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
			dst[dst_index++] =			TFEND;
		}
		else if (src[src_index] == FESC)
		{
			dst[dst_index++] =			FESC;
			dst[dst_index++] =			TFESC;
    10d8:	7d ed       	ldi	r23, 0xDD	; 221
	// Copy src to dst and Escape when necessary
	for (src_index = 0; src_index < payload_size; src_index++ )
	{
		if (src[src_index] == FEND)
		{
			dst[dst_index++] =			FESC;
    10da:	6b ed       	ldi	r22, 0xDB	; 219
			dst[dst_index++] =			TFEND;
    10dc:	3c ed       	ldi	r19, 0xDC	; 220
    10de:	10 c0       	rjmp	.+32     	; 0x1100 <Create_VCP_frame+0xf0>
		}
		else if (src[src_index] == FESC)
		{
			dst[dst_index++] =			FESC;
    10e0:	20 83       	st	Z, r18
		if (src[src_index] == FEND)
		{
			dst[dst_index++] =			FESC;
			dst[dst_index++] =			TFEND;
		}
		else if (src[src_index] == FESC)
    10e2:	2b 3d       	cpi	r18, 0xDB	; 219
    10e4:	21 f1       	breq	.+72     	; 0x112e <Create_VCP_frame+0x11e>
			dst[dst_index++] =			FESC;
			dst[dst_index++] =			TFESC;
		}
		else
		{
			dst[dst_index++] =			src[src_index];
    10e6:	4f 5f       	subi	r20, 0xFF	; 255
    10e8:	5f 4f       	sbci	r21, 0xFF	; 255
		}
		
		// Check if the frame fits in the dst buffer 
		if (dst_index >= *dst_size - 1)
    10ea:	d6 01       	movw	r26, r12
    10ec:	ed 91       	ld	r30, X+
    10ee:	fc 91       	ld	r31, X
    10f0:	31 97       	sbiw	r30, 0x01	; 1
    10f2:	4e 17       	cp	r20, r30
    10f4:	5f 07       	cpc	r21, r31
    10f6:	b8 f4       	brcc	.+46     	; 0x1126 <Create_VCP_frame+0x116>
	dst[dst_index++] =					FEND;
	// then insert VCP address
	dst[dst_index++] =					addr;
	
	// Copy src to dst and Escape when necessary
	for (src_index = 0; src_index < payload_size; src_index++ )
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	80 17       	cp	r24, r16
    10fc:	91 07       	cpc	r25, r17
    10fe:	d8 f4       	brcc	.+54     	; 0x1136 <Create_VCP_frame+0x126>
	{
		if (src[src_index] == FEND)
    1100:	d4 01       	movw	r26, r8
    1102:	2d 91       	ld	r18, X+
    1104:	4d 01       	movw	r8, r26
		{
			dst[dst_index++] =			FESC;
    1106:	f7 01       	movw	r30, r14
    1108:	e4 0f       	add	r30, r20
    110a:	f5 1f       	adc	r31, r21
	dst[dst_index++] =					addr;
	
	// Copy src to dst and Escape when necessary
	for (src_index = 0; src_index < payload_size; src_index++ )
	{
		if (src[src_index] == FEND)
    110c:	20 3c       	cpi	r18, 0xC0	; 192
    110e:	41 f7       	brne	.-48     	; 0x10e0 <Create_VCP_frame+0xd0>
		{
			dst[dst_index++] =			FESC;
    1110:	60 83       	st	Z, r22
			dst[dst_index++] =			TFEND;
    1112:	31 83       	std	Z+1, r19	; 0x01
    1114:	4e 5f       	subi	r20, 0xFE	; 254
    1116:	5f 4f       	sbci	r21, 0xFF	; 255
		{
			dst[dst_index++] =			src[src_index];
		}
		
		// Check if the frame fits in the dst buffer 
		if (dst_index >= *dst_size - 1)
    1118:	d6 01       	movw	r26, r12
    111a:	ed 91       	ld	r30, X+
    111c:	fc 91       	ld	r31, X
    111e:	31 97       	sbiw	r30, 0x01	; 1
    1120:	4e 17       	cp	r20, r30
    1122:	5f 07       	cpc	r21, r31
    1124:	48 f3       	brcs	.-46     	; 0x10f8 <Create_VCP_frame+0xe8>
			return VCP_OVR_ERR;
    1126:	83 e0       	ldi	r24, 0x03	; 3
    1128:	9a cf       	rjmp	.-204    	; 0x105e <Create_VCP_frame+0x4e>
	uint16_t dst_index = 0;
	uint16_t payload_size;
	
	// Check for invalid buffers
	if (dst == NULL || src == NULL)
		return VCP_NULL_ERR;
    112a:	85 e0       	ldi	r24, 0x05	; 5
    112c:	98 cf       	rjmp	.-208    	; 0x105e <Create_VCP_frame+0x4e>
			dst[dst_index++] =			TFEND;
		}
		else if (src[src_index] == FESC)
		{
			dst[dst_index++] =			FESC;
			dst[dst_index++] =			TFESC;
    112e:	71 83       	std	Z+1, r23	; 0x01
    1130:	4e 5f       	subi	r20, 0xFE	; 254
    1132:	5f 4f       	sbci	r21, 0xFF	; 255
    1134:	da cf       	rjmp	.-76     	; 0x10ea <Create_VCP_frame+0xda>
    1136:	ca 01       	movw	r24, r20
    1138:	01 96       	adiw	r24, 0x01	; 1
		if (dst_index >= *dst_size - 1)
			return VCP_OVR_ERR;
	}
	
	// End the frame with FEND
	dst[dst_index++] =					FEND;
    113a:	f7 01       	movw	r30, r14
    113c:	e4 0f       	add	r30, r20
    113e:	f5 1f       	adc	r31, r21
    1140:	20 ec       	ldi	r18, 0xC0	; 192
    1142:	20 83       	st	Z, r18
	
	// Save the frame size
	*dst_size = dst_index;
    1144:	f6 01       	movw	r30, r12
    1146:	80 83       	st	Z, r24
    1148:	91 83       	std	Z+1, r25	; 0x01
	
	// All good
	return VCP_TERM;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	88 cf       	rjmp	.-240    	; 0x105e <Create_VCP_frame+0x4e>
	{
		append_crc16(src[src_index], (uint16ptr)&crc);
	}
	
	// Add CRC to the end of the source buffer
	src[src_index++] = ((crc >> 8) & 0xFF);
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02
    1152:	d4 01       	movw	r26, r8
    1154:	9c 93       	st	X, r25
	src[src_index++] = (crc & 0xFF);
    1156:	11 96       	adiw	r26, 0x01	; 1
    1158:	8c 93       	st	X, r24
	
	
	// Build KISS Frame:
	
	// Start the frame with FEND
	dst[dst_index++] =					FEND;
    115a:	80 ec       	ldi	r24, 0xC0	; 192
    115c:	f7 01       	movw	r30, r14
    115e:	80 83       	st	Z, r24
	// then insert VCP address
	dst[dst_index++] =					addr;
    1160:	51 82       	std	Z+1, r5	; 0x01
		append_crc16(src[src_index], (uint16ptr)&crc);
	}
	
	// Add CRC to the end of the source buffer
	src[src_index++] = ((crc >> 8) & 0xFF);
	src[src_index++] = (crc & 0xFF);
    1162:	02 e0       	ldi	r16, 0x02	; 2
    1164:	10 e0       	ldi	r17, 0x00	; 0
    1166:	b4 cf       	rjmp	.-152    	; 0x10d0 <Create_VCP_frame+0xc0>
	dst[dst_index++] =					FEND;
	// then insert VCP address
	dst[dst_index++] =					addr;
	
	// Copy src to dst and Escape when necessary
	for (src_index = 0; src_index < payload_size; src_index++ )
    1168:	83 e0       	ldi	r24, 0x03	; 3
    116a:	90 e0       	ldi	r25, 0x00	; 0
	// Build KISS Frame:
	
	// Start the frame with FEND
	dst[dst_index++] =					FEND;
	// then insert VCP address
	dst[dst_index++] =					addr;
    116c:	42 e0       	ldi	r20, 0x02	; 2
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	e4 cf       	rjmp	.-56     	; 0x113a <Create_VCP_frame+0x12a>

00001172 <_exit>:
    1172:	f8 94       	cli

00001174 <__stop_program>:
    1174:	ff cf       	rjmp	.-2      	; 0x1174 <__stop_program>
