
CDHIB_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00002f4c  00002fe0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000cba  00802000  00802000  00002fe0  2**0
                  ALLOC
  3 .stab         00000768  00000000  00000000  00002fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  00003748  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00003853  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000498  00000000  00000000  00003888  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a4b6  00000000  00000000  00003d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001448  00000000  00000000  0000e1d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006b25  00000000  00000000  0000f61e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000108c  00000000  00000000  00016144  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00020038  00000000  00000000  000171d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002235  00000000  00000000  00037208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003a8  00000000  00000000  0003943d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00009255  00000000  00000000  000397e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f3 c0       	rjmp	.+486    	; 0x1e8 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 6e 0f 	jmp	0x1edc	; 0x1edc <__vector_1>
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	ee c0       	rjmp	.+476    	; 0x20e <__bad_interrupt>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__vector_14>
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__vector_25>
      68:	d2 c0       	rjmp	.+420    	; 0x20e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 30 10 	jmp	0x2060	; 0x2060 <__vector_28>
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	be c0       	rjmp	.+380    	; 0x20e <__bad_interrupt>
      92:	00 00       	nop
      94:	bc c0       	rjmp	.+376    	; 0x20e <__bad_interrupt>
      96:	00 00       	nop
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	b8 c0       	rjmp	.+368    	; 0x20e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a0 c0       	rjmp	.+320    	; 0x20e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	9e c0       	rjmp	.+316    	; 0x20e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	9a c0       	rjmp	.+308    	; 0x20e <__bad_interrupt>
      da:	00 00       	nop
      dc:	98 c0       	rjmp	.+304    	; 0x20e <__bad_interrupt>
      de:	00 00       	nop
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	94 c0       	rjmp	.+296    	; 0x20e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__vector_58>
      ec:	90 c0       	rjmp	.+288    	; 0x20e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	8e c0       	rjmp	.+284    	; 0x20e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	0c 94 81 10 	jmp	0x2102	; 0x2102 <__vector_61>
      f8:	8a c0       	rjmp	.+276    	; 0x20e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	88 c0       	rjmp	.+272    	; 0x20e <__bad_interrupt>
      fe:	00 00       	nop
     100:	86 c0       	rjmp	.+268    	; 0x20e <__bad_interrupt>
     102:	00 00       	nop
     104:	84 c0       	rjmp	.+264    	; 0x20e <__bad_interrupt>
     106:	00 00       	nop
     108:	82 c0       	rjmp	.+260    	; 0x20e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	80 c0       	rjmp	.+256    	; 0x20e <__bad_interrupt>
     10e:	00 00       	nop
     110:	7e c0       	rjmp	.+252    	; 0x20e <__bad_interrupt>
     112:	00 00       	nop
     114:	7c c0       	rjmp	.+248    	; 0x20e <__bad_interrupt>
     116:	00 00       	nop
     118:	7a c0       	rjmp	.+244    	; 0x20e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	78 c0       	rjmp	.+240    	; 0x20e <__bad_interrupt>
     11e:	00 00       	nop
     120:	76 c0       	rjmp	.+236    	; 0x20e <__bad_interrupt>
     122:	00 00       	nop
     124:	74 c0       	rjmp	.+232    	; 0x20e <__bad_interrupt>
     126:	00 00       	nop
     128:	72 c0       	rjmp	.+228    	; 0x20e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	70 c0       	rjmp	.+224    	; 0x20e <__bad_interrupt>
     12e:	00 00       	nop
     130:	6e c0       	rjmp	.+220    	; 0x20e <__bad_interrupt>
     132:	00 00       	nop
     134:	6c c0       	rjmp	.+216    	; 0x20e <__bad_interrupt>
     136:	00 00       	nop
     138:	6a c0       	rjmp	.+212    	; 0x20e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	68 c0       	rjmp	.+208    	; 0x20e <__bad_interrupt>
     13e:	00 00       	nop
     140:	66 c0       	rjmp	.+204    	; 0x20e <__bad_interrupt>
     142:	00 00       	nop
     144:	64 c0       	rjmp	.+200    	; 0x20e <__bad_interrupt>
     146:	00 00       	nop
     148:	62 c0       	rjmp	.+196    	; 0x20e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	60 c0       	rjmp	.+192    	; 0x20e <__bad_interrupt>
     14e:	00 00       	nop
     150:	5e c0       	rjmp	.+188    	; 0x20e <__bad_interrupt>
     152:	00 00       	nop
     154:	5c c0       	rjmp	.+184    	; 0x20e <__bad_interrupt>
     156:	00 00       	nop
     158:	5a c0       	rjmp	.+180    	; 0x20e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	58 c0       	rjmp	.+176    	; 0x20e <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__vector_88>
     164:	54 c0       	rjmp	.+168    	; 0x20e <__bad_interrupt>
     166:	00 00       	nop
     168:	52 c0       	rjmp	.+164    	; 0x20e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	50 c0       	rjmp	.+160    	; 0x20e <__bad_interrupt>
     16e:	00 00       	nop
     170:	4e c0       	rjmp	.+156    	; 0x20e <__bad_interrupt>
     172:	00 00       	nop
     174:	4c c0       	rjmp	.+152    	; 0x20e <__bad_interrupt>
     176:	00 00       	nop
     178:	4a c0       	rjmp	.+148    	; 0x20e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	48 c0       	rjmp	.+144    	; 0x20e <__bad_interrupt>
     17e:	00 00       	nop
     180:	46 c0       	rjmp	.+140    	; 0x20e <__bad_interrupt>
     182:	00 00       	nop
     184:	44 c0       	rjmp	.+136    	; 0x20e <__bad_interrupt>
     186:	00 00       	nop
     188:	42 c0       	rjmp	.+132    	; 0x20e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	40 c0       	rjmp	.+128    	; 0x20e <__bad_interrupt>
     18e:	00 00       	nop
     190:	3e c0       	rjmp	.+124    	; 0x20e <__bad_interrupt>
     192:	00 00       	nop
     194:	3c c0       	rjmp	.+120    	; 0x20e <__bad_interrupt>
     196:	00 00       	nop
     198:	3a c0       	rjmp	.+116    	; 0x20e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	38 c0       	rjmp	.+112    	; 0x20e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	36 c0       	rjmp	.+108    	; 0x20e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	34 c0       	rjmp	.+104    	; 0x20e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	32 c0       	rjmp	.+100    	; 0x20e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	30 c0       	rjmp	.+96     	; 0x20e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	2e c0       	rjmp	.+92     	; 0x20e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	2c c0       	rjmp	.+88     	; 0x20e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	2a c0       	rjmp	.+84     	; 0x20e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	28 c0       	rjmp	.+80     	; 0x20e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	26 c0       	rjmp	.+76     	; 0x20e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	24 c0       	rjmp	.+72     	; 0x20e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	22 c0       	rjmp	.+68     	; 0x20e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	20 c0       	rjmp	.+64     	; 0x20e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	1e c0       	rjmp	.+60     	; 0x20e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	1c c0       	rjmp	.+56     	; 0x20e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	1a c0       	rjmp	.+52     	; 0x20e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	18 c0       	rjmp	.+48     	; 0x20e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	16 c0       	rjmp	.+44     	; 0x20e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	14 c0       	rjmp	.+40     	; 0x20e <__bad_interrupt>
	...

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e3       	ldi	r29, 0x3F	; 63
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_clear_bss>:
     1f8:	2c e2       	ldi	r18, 0x2C	; 44
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	01 c0       	rjmp	.+2      	; 0x202 <.do_clear_bss_start>

00000200 <.do_clear_bss_loop>:
     200:	1d 92       	st	X+, r1

00000202 <.do_clear_bss_start>:
     202:	aa 3b       	cpi	r26, 0xBA	; 186
     204:	b2 07       	cpc	r27, r18
     206:	e1 f7       	brne	.-8      	; 0x200 <.do_clear_bss_loop>
     208:	02 d7       	rcall	.+3588   	; 0x100e <main>
     20a:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <usart_set_rx_interrupt_level>:
 * \param usart Pointer to the USART module.
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum pmic_level level)
{
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	00 d0       	rcall	.+0      	; 0x216 <usart_set_rx_interrupt_level+0x6>
     216:	1f 92       	push	r1
     218:	cd b7       	in	r28, 0x3d	; 61
     21a:	de b7       	in	r29, 0x3e	; 62
     21c:	89 83       	std	Y+1, r24	; 0x01
     21e:	9a 83       	std	Y+2, r25	; 0x02
     220:	6b 83       	std	Y+3, r22	; 0x03
     222:	7c 83       	std	Y+4, r23	; 0x04
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) | level;
     224:	89 81       	ldd	r24, Y+1	; 0x01
     226:	9a 81       	ldd	r25, Y+2	; 0x02
     228:	fc 01       	movw	r30, r24
     22a:	83 81       	ldd	r24, Z+3	; 0x03
     22c:	98 2f       	mov	r25, r24
     22e:	9f 7c       	andi	r25, 0xCF	; 207
     230:	8b 81       	ldd	r24, Y+3	; 0x03
     232:	29 2f       	mov	r18, r25
     234:	28 2b       	or	r18, r24
     236:	89 81       	ldd	r24, Y+1	; 0x01
     238:	9a 81       	ldd	r25, Y+2	; 0x02
     23a:	fc 01       	movw	r30, r24
     23c:	23 83       	std	Z+3, r18	; 0x03
}
     23e:	24 96       	adiw	r28, 0x04	; 4
     240:	cd bf       	out	0x3d, r28	; 61
     242:	de bf       	out	0x3e, r29	; 62
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	08 95       	ret

0000024a <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	1f 92       	push	r1
     250:	1f 92       	push	r1
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
     256:	89 83       	std	Y+1, r24	; 0x01
     258:	9a 83       	std	Y+2, r25	; 0x02
	if (module == NULL) {
     25a:	89 81       	ldd	r24, Y+1	; 0x01
     25c:	9a 81       	ldd	r25, Y+2	; 0x02
     25e:	00 97       	sbiw	r24, 0x00	; 0
     260:	09 f4       	brne	.+2      	; 0x264 <sysclk_enable_peripheral_clock+0x1a>
     262:	74 c1       	rjmp	.+744    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     264:	89 81       	ldd	r24, Y+1	; 0x01
     266:	9a 81       	ldd	r25, Y+2	; 0x02
     268:	80 3c       	cpi	r24, 0xC0	; 192
     26a:	91 05       	cpc	r25, r1
     26c:	29 f4       	brne	.+10     	; 0x278 <sysclk_enable_peripheral_clock+0x2e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     26e:	60 e1       	ldi	r22, 0x10	; 16
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	a8 d3       	rcall	.+1872   	; 0x9c6 <sysclk_enable_module>
     276:	6a c1       	rjmp	.+724    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     278:	89 81       	ldd	r24, Y+1	; 0x01
     27a:	9a 81       	ldd	r25, Y+2	; 0x02
     27c:	81 15       	cp	r24, r1
     27e:	24 e0       	ldi	r18, 0x04	; 4
     280:	92 07       	cpc	r25, r18
     282:	29 f4       	brne	.+10     	; 0x28e <sysclk_enable_peripheral_clock+0x44>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     284:	64 e0       	ldi	r22, 0x04	; 4
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	9d d3       	rcall	.+1850   	; 0x9c6 <sysclk_enable_module>
     28c:	5f c1       	rjmp	.+702    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	9a 81       	ldd	r25, Y+2	; 0x02
     292:	80 38       	cpi	r24, 0x80	; 128
     294:	21 e0       	ldi	r18, 0x01	; 1
     296:	92 07       	cpc	r25, r18
     298:	29 f4       	brne	.+10     	; 0x2a4 <sysclk_enable_peripheral_clock+0x5a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     29a:	62 e0       	ldi	r22, 0x02	; 2
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	92 d3       	rcall	.+1828   	; 0x9c6 <sysclk_enable_module>
     2a2:	54 c1       	rjmp	.+680    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	9a 81       	ldd	r25, Y+2	; 0x02
     2a8:	81 15       	cp	r24, r1
     2aa:	21 e0       	ldi	r18, 0x01	; 1
     2ac:	92 07       	cpc	r25, r18
     2ae:	29 f4       	brne	.+10     	; 0x2ba <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	87 d3       	rcall	.+1806   	; 0x9c6 <sysclk_enable_module>
     2b8:	49 c1       	rjmp	.+658    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     2ba:	89 81       	ldd	r24, Y+1	; 0x01
     2bc:	9a 81       	ldd	r25, Y+2	; 0x02
     2be:	80 38       	cpi	r24, 0x80	; 128
     2c0:	23 e0       	ldi	r18, 0x03	; 3
     2c2:	92 07       	cpc	r25, r18
     2c4:	29 f4       	brne	.+10     	; 0x2d0 <sysclk_enable_peripheral_clock+0x86>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     2c6:	61 e0       	ldi	r22, 0x01	; 1
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	7c d3       	rcall	.+1784   	; 0x9c6 <sysclk_enable_module>
     2ce:	3e c1       	rjmp	.+636    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	9a 81       	ldd	r25, Y+2	; 0x02
     2d4:	80 39       	cpi	r24, 0x90	; 144
     2d6:	23 e0       	ldi	r18, 0x03	; 3
     2d8:	92 07       	cpc	r25, r18
     2da:	29 f4       	brne	.+10     	; 0x2e6 <sysclk_enable_peripheral_clock+0x9c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     2dc:	61 e0       	ldi	r22, 0x01	; 1
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	71 d3       	rcall	.+1762   	; 0x9c6 <sysclk_enable_module>
     2e4:	33 c1       	rjmp	.+614    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ea:	81 15       	cp	r24, r1
     2ec:	22 e0       	ldi	r18, 0x02	; 2
     2ee:	92 07       	cpc	r25, r18
     2f0:	29 f4       	brne	.+10     	; 0x2fc <sysclk_enable_peripheral_clock+0xb2>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     2f2:	62 e0       	ldi	r22, 0x02	; 2
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	66 d3       	rcall	.+1740   	; 0x9c6 <sysclk_enable_module>
     2fa:	28 c1       	rjmp	.+592    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	9a 81       	ldd	r25, Y+2	; 0x02
     300:	80 34       	cpi	r24, 0x40	; 64
     302:	22 e0       	ldi	r18, 0x02	; 2
     304:	92 07       	cpc	r25, r18
     306:	29 f4       	brne	.+10     	; 0x312 <sysclk_enable_peripheral_clock+0xc8>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     308:	62 e0       	ldi	r22, 0x02	; 2
     30a:	82 e0       	ldi	r24, 0x02	; 2
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	5b d3       	rcall	.+1718   	; 0x9c6 <sysclk_enable_module>
     310:	1d c1       	rjmp	.+570    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	else if (module == &DACA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
	}
#endif
#ifdef DACB
	else if (module == &DACB) {
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	9a 81       	ldd	r25, Y+2	; 0x02
     316:	80 32       	cpi	r24, 0x20	; 32
     318:	23 e0       	ldi	r18, 0x03	; 3
     31a:	92 07       	cpc	r25, r18
     31c:	29 f4       	brne	.+10     	; 0x328 <sysclk_enable_peripheral_clock+0xde>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     31e:	64 e0       	ldi	r22, 0x04	; 4
     320:	82 e0       	ldi	r24, 0x02	; 2
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	50 d3       	rcall	.+1696   	; 0x9c6 <sysclk_enable_module>
     326:	12 c1       	rjmp	.+548    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef TCC0
	else if (module == &TCC0) {
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	9a 81       	ldd	r25, Y+2	; 0x02
     32c:	81 15       	cp	r24, r1
     32e:	28 e0       	ldi	r18, 0x08	; 8
     330:	92 07       	cpc	r25, r18
     332:	29 f4       	brne	.+10     	; 0x33e <sysclk_enable_peripheral_clock+0xf4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     334:	61 e0       	ldi	r22, 0x01	; 1
     336:	83 e0       	ldi	r24, 0x03	; 3
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	45 d3       	rcall	.+1674   	; 0x9c6 <sysclk_enable_module>
     33c:	07 c1       	rjmp	.+526    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	9a 81       	ldd	r25, Y+2	; 0x02
     342:	81 15       	cp	r24, r1
     344:	29 e0       	ldi	r18, 0x09	; 9
     346:	92 07       	cpc	r25, r18
     348:	29 f4       	brne	.+10     	; 0x354 <sysclk_enable_peripheral_clock+0x10a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     34a:	61 e0       	ldi	r22, 0x01	; 1
     34c:	84 e0       	ldi	r24, 0x04	; 4
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	3a d3       	rcall	.+1652   	; 0x9c6 <sysclk_enable_module>
     352:	fc c0       	rjmp	.+504    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	9a 81       	ldd	r25, Y+2	; 0x02
     358:	81 15       	cp	r24, r1
     35a:	2a e0       	ldi	r18, 0x0A	; 10
     35c:	92 07       	cpc	r25, r18
     35e:	29 f4       	brne	.+10     	; 0x36a <sysclk_enable_peripheral_clock+0x120>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     360:	61 e0       	ldi	r22, 0x01	; 1
     362:	85 e0       	ldi	r24, 0x05	; 5
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	2f d3       	rcall	.+1630   	; 0x9c6 <sysclk_enable_module>
     368:	f1 c0       	rjmp	.+482    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     36a:	89 81       	ldd	r24, Y+1	; 0x01
     36c:	9a 81       	ldd	r25, Y+2	; 0x02
     36e:	81 15       	cp	r24, r1
     370:	2b e0       	ldi	r18, 0x0B	; 11
     372:	92 07       	cpc	r25, r18
     374:	29 f4       	brne	.+10     	; 0x380 <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	86 e0       	ldi	r24, 0x06	; 6
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	24 d3       	rcall	.+1608   	; 0x9c6 <sysclk_enable_module>
     37e:	e6 c0       	rjmp	.+460    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     380:	89 81       	ldd	r24, Y+1	; 0x01
     382:	9a 81       	ldd	r25, Y+2	; 0x02
     384:	80 34       	cpi	r24, 0x40	; 64
     386:	28 e0       	ldi	r18, 0x08	; 8
     388:	92 07       	cpc	r25, r18
     38a:	29 f4       	brne	.+10     	; 0x396 <sysclk_enable_peripheral_clock+0x14c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     38c:	62 e0       	ldi	r22, 0x02	; 2
     38e:	83 e0       	ldi	r24, 0x03	; 3
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	19 d3       	rcall	.+1586   	; 0x9c6 <sysclk_enable_module>
     394:	db c0       	rjmp	.+438    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	9a 81       	ldd	r25, Y+2	; 0x02
     39a:	80 34       	cpi	r24, 0x40	; 64
     39c:	29 e0       	ldi	r18, 0x09	; 9
     39e:	92 07       	cpc	r25, r18
     3a0:	29 f4       	brne	.+10     	; 0x3ac <sysclk_enable_peripheral_clock+0x162>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     3a2:	62 e0       	ldi	r22, 0x02	; 2
     3a4:	84 e0       	ldi	r24, 0x04	; 4
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	0e d3       	rcall	.+1564   	; 0x9c6 <sysclk_enable_module>
     3aa:	d0 c0       	rjmp	.+416    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     3ac:	89 81       	ldd	r24, Y+1	; 0x01
     3ae:	9a 81       	ldd	r25, Y+2	; 0x02
     3b0:	80 34       	cpi	r24, 0x40	; 64
     3b2:	2a e0       	ldi	r18, 0x0A	; 10
     3b4:	92 07       	cpc	r25, r18
     3b6:	29 f4       	brne	.+10     	; 0x3c2 <sysclk_enable_peripheral_clock+0x178>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     3b8:	62 e0       	ldi	r22, 0x02	; 2
     3ba:	85 e0       	ldi	r24, 0x05	; 5
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	03 d3       	rcall	.+1542   	; 0x9c6 <sysclk_enable_module>
     3c0:	c5 c0       	rjmp	.+394    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	else if (module == &TCF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
     3c4:	9a 81       	ldd	r25, Y+2	; 0x02
     3c6:	80 39       	cpi	r24, 0x90	; 144
     3c8:	28 e0       	ldi	r18, 0x08	; 8
     3ca:	92 07       	cpc	r25, r18
     3cc:	29 f4       	brne	.+10     	; 0x3d8 <sysclk_enable_peripheral_clock+0x18e>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     3ce:	64 e0       	ldi	r22, 0x04	; 4
     3d0:	83 e0       	ldi	r24, 0x03	; 3
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	f8 d2       	rcall	.+1520   	; 0x9c6 <sysclk_enable_module>
     3d6:	ba c0       	rjmp	.+372    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     3d8:	89 81       	ldd	r24, Y+1	; 0x01
     3da:	9a 81       	ldd	r25, Y+2	; 0x02
     3dc:	80 39       	cpi	r24, 0x90	; 144
     3de:	29 e0       	ldi	r18, 0x09	; 9
     3e0:	92 07       	cpc	r25, r18
     3e2:	29 f4       	brne	.+10     	; 0x3ee <sysclk_enable_peripheral_clock+0x1a4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     3e4:	64 e0       	ldi	r22, 0x04	; 4
     3e6:	84 e0       	ldi	r24, 0x04	; 4
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	ed d2       	rcall	.+1498   	; 0x9c6 <sysclk_enable_module>
     3ec:	af c0       	rjmp	.+350    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     3ee:	89 81       	ldd	r24, Y+1	; 0x01
     3f0:	9a 81       	ldd	r25, Y+2	; 0x02
     3f2:	80 39       	cpi	r24, 0x90	; 144
     3f4:	2a e0       	ldi	r18, 0x0A	; 10
     3f6:	92 07       	cpc	r25, r18
     3f8:	29 f4       	brne	.+10     	; 0x404 <sysclk_enable_peripheral_clock+0x1ba>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     3fa:	64 e0       	ldi	r22, 0x04	; 4
     3fc:	85 e0       	ldi	r24, 0x05	; 5
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	e2 d2       	rcall	.+1476   	; 0x9c6 <sysclk_enable_module>
     402:	a4 c0       	rjmp	.+328    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	9a 81       	ldd	r25, Y+2	; 0x02
     408:	80 39       	cpi	r24, 0x90	; 144
     40a:	2b e0       	ldi	r18, 0x0B	; 11
     40c:	92 07       	cpc	r25, r18
     40e:	29 f4       	brne	.+10     	; 0x41a <sysclk_enable_peripheral_clock+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     410:	64 e0       	ldi	r22, 0x04	; 4
     412:	86 e0       	ldi	r24, 0x06	; 6
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	d7 d2       	rcall	.+1454   	; 0x9c6 <sysclk_enable_module>
     418:	99 c0       	rjmp	.+306    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     41a:	89 81       	ldd	r24, Y+1	; 0x01
     41c:	9a 81       	ldd	r25, Y+2	; 0x02
     41e:	80 3c       	cpi	r24, 0xC0	; 192
     420:	28 e0       	ldi	r18, 0x08	; 8
     422:	92 07       	cpc	r25, r18
     424:	29 f4       	brne	.+10     	; 0x430 <sysclk_enable_peripheral_clock+0x1e6>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     426:	68 e0       	ldi	r22, 0x08	; 8
     428:	83 e0       	ldi	r24, 0x03	; 3
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	cc d2       	rcall	.+1432   	; 0x9c6 <sysclk_enable_module>
     42e:	8e c0       	rjmp	.+284    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	9a 81       	ldd	r25, Y+2	; 0x02
     434:	80 3c       	cpi	r24, 0xC0	; 192
     436:	29 e0       	ldi	r18, 0x09	; 9
     438:	92 07       	cpc	r25, r18
     43a:	29 f4       	brne	.+10     	; 0x446 <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     43c:	68 e0       	ldi	r22, 0x08	; 8
     43e:	84 e0       	ldi	r24, 0x04	; 4
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	c1 d2       	rcall	.+1410   	; 0x9c6 <sysclk_enable_module>
     444:	83 c0       	rjmp	.+262    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	9a 81       	ldd	r25, Y+2	; 0x02
     44a:	80 3c       	cpi	r24, 0xC0	; 192
     44c:	2a e0       	ldi	r18, 0x0A	; 10
     44e:	92 07       	cpc	r25, r18
     450:	29 f4       	brne	.+10     	; 0x45c <sysclk_enable_peripheral_clock+0x212>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     452:	68 e0       	ldi	r22, 0x08	; 8
     454:	85 e0       	ldi	r24, 0x05	; 5
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	b6 d2       	rcall	.+1388   	; 0x9c6 <sysclk_enable_module>
     45a:	78 c0       	rjmp	.+240    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	9a 81       	ldd	r25, Y+2	; 0x02
     460:	80 3c       	cpi	r24, 0xC0	; 192
     462:	2b e0       	ldi	r18, 0x0B	; 11
     464:	92 07       	cpc	r25, r18
     466:	29 f4       	brne	.+10     	; 0x472 <sysclk_enable_peripheral_clock+0x228>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     468:	68 e0       	ldi	r22, 0x08	; 8
     46a:	86 e0       	ldi	r24, 0x06	; 6
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	ab d2       	rcall	.+1366   	; 0x9c6 <sysclk_enable_module>
     470:	6d c0       	rjmp	.+218    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	9a 81       	ldd	r25, Y+2	; 0x02
     476:	80 3a       	cpi	r24, 0xA0	; 160
     478:	28 e0       	ldi	r18, 0x08	; 8
     47a:	92 07       	cpc	r25, r18
     47c:	29 f4       	brne	.+10     	; 0x488 <sysclk_enable_peripheral_clock+0x23e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     47e:	60 e1       	ldi	r22, 0x10	; 16
     480:	83 e0       	ldi	r24, 0x03	; 3
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	a0 d2       	rcall	.+1344   	; 0x9c6 <sysclk_enable_module>
     486:	62 c0       	rjmp	.+196    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	9a 81       	ldd	r25, Y+2	; 0x02
     48c:	80 3a       	cpi	r24, 0xA0	; 160
     48e:	29 e0       	ldi	r18, 0x09	; 9
     490:	92 07       	cpc	r25, r18
     492:	29 f4       	brne	.+10     	; 0x49e <sysclk_enable_peripheral_clock+0x254>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     494:	60 e1       	ldi	r22, 0x10	; 16
     496:	84 e0       	ldi	r24, 0x04	; 4
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	95 d2       	rcall	.+1322   	; 0x9c6 <sysclk_enable_module>
     49c:	57 c0       	rjmp	.+174    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     49e:	89 81       	ldd	r24, Y+1	; 0x01
     4a0:	9a 81       	ldd	r25, Y+2	; 0x02
     4a2:	80 3a       	cpi	r24, 0xA0	; 160
     4a4:	2a e0       	ldi	r18, 0x0A	; 10
     4a6:	92 07       	cpc	r25, r18
     4a8:	29 f4       	brne	.+10     	; 0x4b4 <sysclk_enable_peripheral_clock+0x26a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     4aa:	60 e1       	ldi	r22, 0x10	; 16
     4ac:	85 e0       	ldi	r24, 0x05	; 5
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	8a d2       	rcall	.+1300   	; 0x9c6 <sysclk_enable_module>
     4b2:	4c c0       	rjmp	.+152    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	80 3a       	cpi	r24, 0xA0	; 160
     4ba:	2b e0       	ldi	r18, 0x0B	; 11
     4bc:	92 07       	cpc	r25, r18
     4be:	29 f4       	brne	.+10     	; 0x4ca <sysclk_enable_peripheral_clock+0x280>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     4c0:	60 e1       	ldi	r22, 0x10	; 16
     4c2:	86 e0       	ldi	r24, 0x06	; 6
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	7f d2       	rcall	.+1278   	; 0x9c6 <sysclk_enable_module>
     4c8:	41 c0       	rjmp	.+130    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     4ca:	89 81       	ldd	r24, Y+1	; 0x01
     4cc:	9a 81       	ldd	r25, Y+2	; 0x02
     4ce:	80 3b       	cpi	r24, 0xB0	; 176
     4d0:	28 e0       	ldi	r18, 0x08	; 8
     4d2:	92 07       	cpc	r25, r18
     4d4:	29 f4       	brne	.+10     	; 0x4e0 <sysclk_enable_peripheral_clock+0x296>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     4d6:	60 e2       	ldi	r22, 0x20	; 32
     4d8:	83 e0       	ldi	r24, 0x03	; 3
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	74 d2       	rcall	.+1256   	; 0x9c6 <sysclk_enable_module>
     4de:	36 c0       	rjmp	.+108    	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     4e0:	89 81       	ldd	r24, Y+1	; 0x01
     4e2:	9a 81       	ldd	r25, Y+2	; 0x02
     4e4:	80 3b       	cpi	r24, 0xB0	; 176
     4e6:	29 e0       	ldi	r18, 0x09	; 9
     4e8:	92 07       	cpc	r25, r18
     4ea:	29 f4       	brne	.+10     	; 0x4f6 <sysclk_enable_peripheral_clock+0x2ac>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     4ec:	60 e2       	ldi	r22, 0x20	; 32
     4ee:	84 e0       	ldi	r24, 0x04	; 4
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	69 d2       	rcall	.+1234   	; 0x9c6 <sysclk_enable_module>
     4f4:	2b c0       	rjmp	.+86     	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	9a 81       	ldd	r25, Y+2	; 0x02
     4fa:	80 3b       	cpi	r24, 0xB0	; 176
     4fc:	2a e0       	ldi	r18, 0x0A	; 10
     4fe:	92 07       	cpc	r25, r18
     500:	29 f4       	brne	.+10     	; 0x50c <sysclk_enable_peripheral_clock+0x2c2>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     502:	60 e2       	ldi	r22, 0x20	; 32
     504:	85 e0       	ldi	r24, 0x05	; 5
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	5e d2       	rcall	.+1212   	; 0x9c6 <sysclk_enable_module>
     50a:	20 c0       	rjmp	.+64     	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	9a 81       	ldd	r25, Y+2	; 0x02
     510:	80 3b       	cpi	r24, 0xB0	; 176
     512:	2b e0       	ldi	r18, 0x0B	; 11
     514:	92 07       	cpc	r25, r18
     516:	29 f4       	brne	.+10     	; 0x522 <sysclk_enable_peripheral_clock+0x2d8>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     518:	60 e2       	ldi	r22, 0x20	; 32
     51a:	86 e0       	ldi	r24, 0x06	; 6
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	53 d2       	rcall	.+1190   	; 0x9c6 <sysclk_enable_module>
     520:	15 c0       	rjmp	.+42     	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	9a 81       	ldd	r25, Y+2	; 0x02
     526:	80 38       	cpi	r24, 0x80	; 128
     528:	24 e0       	ldi	r18, 0x04	; 4
     52a:	92 07       	cpc	r25, r18
     52c:	29 f4       	brne	.+10     	; 0x538 <sysclk_enable_peripheral_clock+0x2ee>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     52e:	60 e4       	ldi	r22, 0x40	; 64
     530:	83 e0       	ldi	r24, 0x03	; 3
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	48 d2       	rcall	.+1168   	; 0x9c6 <sysclk_enable_module>
     536:	0a c0       	rjmp	.+20     	; 0x54c <sysclk_enable_peripheral_clock+0x302>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	9a 81       	ldd	r25, Y+2	; 0x02
     53c:	80 3a       	cpi	r24, 0xA0	; 160
     53e:	24 e0       	ldi	r18, 0x04	; 4
     540:	92 07       	cpc	r25, r18
     542:	21 f4       	brne	.+8      	; 0x54c <sysclk_enable_peripheral_clock+0x302>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     544:	60 e4       	ldi	r22, 0x40	; 64
     546:	85 e0       	ldi	r24, 0x05	; 5
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	3d d2       	rcall	.+1146   	; 0x9c6 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	08 95       	ret

00000556 <usart_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param baud_rate   Baud rate for communication with slave device in Hz.
 *
 */
static inline void usart_serial_init(USART_t *usart, const usart_serial_options_t *options)
{
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
     55e:	2d 97       	sbiw	r28, 0x0d	; 13
     560:	cd bf       	out	0x3d, r28	; 61
     562:	de bf       	out	0x3e, r29	; 62
     564:	8a 87       	std	Y+10, r24	; 0x0a
     566:	9b 87       	std	Y+11, r25	; 0x0b
     568:	6c 87       	std	Y+12, r22	; 0x0c
     56a:	7d 87       	std	Y+13, r23	; 0x0d
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     56c:	8c 85       	ldd	r24, Y+12	; 0x0c
     56e:	9d 85       	ldd	r25, Y+13	; 0x0d
     570:	fc 01       	movw	r30, r24
     572:	84 81       	ldd	r24, Z+4	; 0x04
     574:	95 81       	ldd	r25, Z+5	; 0x05
     576:	8d 83       	std	Y+5, r24	; 0x05
     578:	9e 83       	std	Y+6, r25	; 0x06
	usart_rs232_options.paritytype   = options->paritytype;
     57a:	8c 85       	ldd	r24, Y+12	; 0x0c
     57c:	9d 85       	ldd	r25, Y+13	; 0x0d
     57e:	fc 01       	movw	r30, r24
     580:	86 81       	ldd	r24, Z+6	; 0x06
     582:	97 81       	ldd	r25, Z+7	; 0x07
     584:	8f 83       	std	Y+7, r24	; 0x07
     586:	98 87       	std	Y+8, r25	; 0x08
	usart_rs232_options.stopbits     = options->stopbits;
     588:	8c 85       	ldd	r24, Y+12	; 0x0c
     58a:	9d 85       	ldd	r25, Y+13	; 0x0d
     58c:	fc 01       	movw	r30, r24
     58e:	80 85       	ldd	r24, Z+8	; 0x08
     590:	89 87       	std	Y+9, r24	; 0x09
	usart_rs232_options.baudrate     = options->baudrate;
     592:	8c 85       	ldd	r24, Y+12	; 0x0c
     594:	9d 85       	ldd	r25, Y+13	; 0x0d
     596:	fc 01       	movw	r30, r24
     598:	80 81       	ld	r24, Z
     59a:	91 81       	ldd	r25, Z+1	; 0x01
     59c:	a2 81       	ldd	r26, Z+2	; 0x02
     59e:	b3 81       	ldd	r27, Z+3	; 0x03
     5a0:	89 83       	std	Y+1, r24	; 0x01
     5a2:	9a 83       	std	Y+2, r25	; 0x02
     5a4:	ab 83       	std	Y+3, r26	; 0x03
     5a6:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
     5a8:	8a 85       	ldd	r24, Y+10	; 0x0a
     5aa:	9b 85       	ldd	r25, Y+11	; 0x0b
     5ac:	80 3a       	cpi	r24, 0xA0	; 160
     5ae:	f8 e0       	ldi	r31, 0x08	; 8
     5b0:	9f 07       	cpc	r25, r31
     5b2:	29 f4       	brne	.+10     	; 0x5be <usart_serial_init+0x68>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);	
     5b4:	60 e1       	ldi	r22, 0x10	; 16
     5b6:	83 e0       	ldi	r24, 0x03	; 3
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	05 d2       	rcall	.+1034   	; 0x9c6 <sysclk_enable_module>
     5bc:	4c c0       	rjmp	.+152    	; 0x656 <usart_serial_init+0x100>
	}
	else
#endif
#ifdef USARTC1
	if((uint16_t)usart == (uint16_t)&USARTC1) {
     5be:	8a 85       	ldd	r24, Y+10	; 0x0a
     5c0:	9b 85       	ldd	r25, Y+11	; 0x0b
     5c2:	80 3b       	cpi	r24, 0xB0	; 176
     5c4:	28 e0       	ldi	r18, 0x08	; 8
     5c6:	92 07       	cpc	r25, r18
     5c8:	29 f4       	brne	.+10     	; 0x5d4 <usart_serial_init+0x7e>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);	
     5ca:	60 e2       	ldi	r22, 0x20	; 32
     5cc:	83 e0       	ldi	r24, 0x03	; 3
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	fa d1       	rcall	.+1012   	; 0x9c6 <sysclk_enable_module>
     5d2:	41 c0       	rjmp	.+130    	; 0x656 <usart_serial_init+0x100>
	}
	else
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
     5d4:	8a 85       	ldd	r24, Y+10	; 0x0a
     5d6:	9b 85       	ldd	r25, Y+11	; 0x0b
     5d8:	80 3a       	cpi	r24, 0xA0	; 160
     5da:	e9 e0       	ldi	r30, 0x09	; 9
     5dc:	9e 07       	cpc	r25, r30
     5de:	29 f4       	brne	.+10     	; 0x5ea <usart_serial_init+0x94>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);	
     5e0:	60 e1       	ldi	r22, 0x10	; 16
     5e2:	84 e0       	ldi	r24, 0x04	; 4
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	ef d1       	rcall	.+990    	; 0x9c6 <sysclk_enable_module>
     5e8:	36 c0       	rjmp	.+108    	; 0x656 <usart_serial_init+0x100>
	}
	else
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
     5ea:	8a 85       	ldd	r24, Y+10	; 0x0a
     5ec:	9b 85       	ldd	r25, Y+11	; 0x0b
     5ee:	80 3b       	cpi	r24, 0xB0	; 176
     5f0:	f9 e0       	ldi	r31, 0x09	; 9
     5f2:	9f 07       	cpc	r25, r31
     5f4:	29 f4       	brne	.+10     	; 0x600 <usart_serial_init+0xaa>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);	
     5f6:	60 e2       	ldi	r22, 0x20	; 32
     5f8:	84 e0       	ldi	r24, 0x04	; 4
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	e4 d1       	rcall	.+968    	; 0x9c6 <sysclk_enable_module>
     5fe:	2b c0       	rjmp	.+86     	; 0x656 <usart_serial_init+0x100>
	}
	else
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
     600:	8a 85       	ldd	r24, Y+10	; 0x0a
     602:	9b 85       	ldd	r25, Y+11	; 0x0b
     604:	80 3a       	cpi	r24, 0xA0	; 160
     606:	2a e0       	ldi	r18, 0x0A	; 10
     608:	92 07       	cpc	r25, r18
     60a:	29 f4       	brne	.+10     	; 0x616 <usart_serial_init+0xc0>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);	
     60c:	60 e1       	ldi	r22, 0x10	; 16
     60e:	85 e0       	ldi	r24, 0x05	; 5
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	d9 d1       	rcall	.+946    	; 0x9c6 <sysclk_enable_module>
     614:	20 c0       	rjmp	.+64     	; 0x656 <usart_serial_init+0x100>
	}
	else
#endif
#ifdef USARTE1
	if((uint16_t)usart == (uint16_t)&USARTE1) {
     616:	8a 85       	ldd	r24, Y+10	; 0x0a
     618:	9b 85       	ldd	r25, Y+11	; 0x0b
     61a:	80 3b       	cpi	r24, 0xB0	; 176
     61c:	ea e0       	ldi	r30, 0x0A	; 10
     61e:	9e 07       	cpc	r25, r30
     620:	29 f4       	brne	.+10     	; 0x62c <usart_serial_init+0xd6>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);	
     622:	60 e2       	ldi	r22, 0x20	; 32
     624:	85 e0       	ldi	r24, 0x05	; 5
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	ce d1       	rcall	.+924    	; 0x9c6 <sysclk_enable_module>
     62a:	15 c0       	rjmp	.+42     	; 0x656 <usart_serial_init+0x100>
	}
	else
#endif
#ifdef USARTF0
	if((uint16_t)usart == (uint16_t)&USARTF0) {
     62c:	8a 85       	ldd	r24, Y+10	; 0x0a
     62e:	9b 85       	ldd	r25, Y+11	; 0x0b
     630:	80 3a       	cpi	r24, 0xA0	; 160
     632:	fb e0       	ldi	r31, 0x0B	; 11
     634:	9f 07       	cpc	r25, r31
     636:	29 f4       	brne	.+10     	; 0x642 <usart_serial_init+0xec>
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);	
     638:	60 e1       	ldi	r22, 0x10	; 16
     63a:	86 e0       	ldi	r24, 0x06	; 6
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	c3 d1       	rcall	.+902    	; 0x9c6 <sysclk_enable_module>
     640:	0a c0       	rjmp	.+20     	; 0x656 <usart_serial_init+0x100>
	}
	else
#endif
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
     642:	8a 85       	ldd	r24, Y+10	; 0x0a
     644:	9b 85       	ldd	r25, Y+11	; 0x0b
     646:	80 3b       	cpi	r24, 0xB0	; 176
     648:	2b e0       	ldi	r18, 0x0B	; 11
     64a:	92 07       	cpc	r25, r18
     64c:	21 f4       	brne	.+8      	; 0x656 <usart_serial_init+0x100>
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);	
     64e:	60 e2       	ldi	r22, 0x20	; 32
     650:	86 e0       	ldi	r24, 0x06	; 6
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	b8 d1       	rcall	.+880    	; 0x9c6 <sysclk_enable_module>
	}
#endif
	usart_init_rs232(usart, &usart_rs232_options);
     656:	8a 85       	ldd	r24, Y+10	; 0x0a
     658:	9b 85       	ldd	r25, Y+11	; 0x0b
     65a:	9e 01       	movw	r18, r28
     65c:	2f 5f       	subi	r18, 0xFF	; 255
     65e:	3f 4f       	sbci	r19, 0xFF	; 255
     660:	b9 01       	movw	r22, r18
     662:	e4 d2       	rcall	.+1480   	; 0xc2c <usart_init_rs232>
}
     664:	2d 96       	adiw	r28, 0x0d	; 13
     666:	cd bf       	out	0x3d, r28	; 61
     668:	de bf       	out	0x3e, r29	; 62
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <board_init>:
 *
 * Description  : Call all the initialization functions
 * 
 */
void board_init(void)
{
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62

	//clock_init		();
	interrupts_init	();
     678:	c8 d0       	rcall	.+400    	; 0x80a <interrupts_init>
	memory_init		();
     67a:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <memory_init>
	dma_init		();
     67e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <dma_init>
	usart_init		();
     682:	37 d0       	rcall	.+110    	; 0x6f2 <usart_init>
	timers_init		();
     684:	07 d1       	rcall	.+526    	; 0x894 <timers_init>
	io_init			();
     686:	d7 d0       	rcall	.+430    	; 0x836 <io_init>
	cdhib_init		();
     688:	2a d1       	rcall	.+596    	; 0x8de <cdhib_init>
}
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <clock_init>:
 *
 * Description  : Initialize the main system clock
 * 
 */
void clock_init	(void)
{
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
	
	xosc_recovey = true;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	80 93 b9 2c 	sts	0x2CB9, r24
	
	// Set the source to be a 12-16Mhz crystal. Change this if using 8MHz crystal
	OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_EXTCLK_gc ;
     69e:	80 e5       	ldi	r24, 0x50	; 80
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	20 ec       	ldi	r18, 0xC0	; 192
     6a4:	fc 01       	movw	r30, r24
     6a6:	22 83       	std	Z+2, r18	; 0x02
	
	// Enable external oscillator and internal 32MHz oscillator
	OSC.CTRL |= OSC_XOSCEN_bm;
     6a8:	80 e5       	ldi	r24, 0x50	; 80
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	20 e5       	ldi	r18, 0x50	; 80
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	f9 01       	movw	r30, r18
     6b2:	20 81       	ld	r18, Z
     6b4:	28 60       	ori	r18, 0x08	; 8
     6b6:	fc 01       	movw	r30, r24
     6b8:	20 83       	st	Z, r18
	OSC.CTRL |= OSC_RC32MEN_bm;
     6ba:	80 e5       	ldi	r24, 0x50	; 80
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	20 e5       	ldi	r18, 0x50	; 80
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	f9 01       	movw	r30, r18
     6c4:	20 81       	ld	r18, Z
     6c6:	22 60       	ori	r18, 0x02	; 2
     6c8:	fc 01       	movw	r30, r24
     6ca:	20 83       	st	Z, r18
	
	while( !(OSC.STATUS & OSC_RC32MRDY_bm) )	// wait until internal 32MHz oscillator is stable
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <clock_init+0x46>
	
	// Switch clock source to the internal 32MHz oscillator
	ccp_write_io((uint8_t *)&CLK.CTRL, CLK_SCLKSEL_RC32M_gc);
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	80 e4       	ldi	r24, 0x40	; 64
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	9b d1       	rcall	.+822    	; 0xa0c <ccp_write_io>
	
	// Enable external oscillator and internal 32MHz oscillator
	OSC.CTRL |= OSC_XOSCEN_bm;
	OSC.CTRL |= OSC_RC32MEN_bm;
	
	while( !(OSC.STATUS & OSC_RC32MRDY_bm) )	// wait until internal 32MHz oscillator is stable
     6d6:	80 e5       	ldi	r24, 0x50	; 80
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	fc 01       	movw	r30, r24
     6dc:	81 81       	ldd	r24, Z+1	; 0x01
     6de:	88 2f       	mov	r24, r24
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	82 70       	andi	r24, 0x02	; 2
     6e4:	99 27       	eor	r25, r25
     6e6:	00 97       	sbiw	r24, 0x00	; 0
     6e8:	91 f3       	breq	.-28     	; 0x6ce <clock_init+0x3e>
	
	// Switch clock source to the internal 32MHz oscillator
	ccp_write_io((uint8_t *)&CLK.CTRL, CLK_SCLKSEL_RC32M_gc);
		
	// Try to switch to external oscillator if ready	
	switch_to_ext_osc ();	
     6ea:	1a d1       	rcall	.+564    	; 0x920 <switch_to_ext_osc>

}
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <usart_init>:
  * *	8N1 (8 data bits, No Parity, 1 Stop bit)
  * *	Enable receive interrupt
  * 
  */
 void usart_init (void)
{
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	cd b7       	in	r28, 0x3d	; 61
     6f8:	de b7       	in	r29, 0x3e	; 62
     6fa:	29 97       	sbiw	r28, 0x09	; 9
     6fc:	cd bf       	out	0x3d, r28	; 61
     6fe:	de bf       	out	0x3e, r29	; 62
	
	usart_serial_options_t		serial_options;	

	// 8 data bits, No parity, 1 stop bit
	serial_options.charlength = USART_CHSIZE_8BIT_gc;
     700:	83 e0       	ldi	r24, 0x03	; 3
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	8d 83       	std	Y+5, r24	; 0x05
     706:	9e 83       	std	Y+6, r25	; 0x06
	serial_options.paritytype = USART_PMODE_DISABLED_gc;
     708:	1f 82       	std	Y+7, r1	; 0x07
     70a:	18 86       	std	Y+8, r1	; 0x08
	serial_options.stopbits =	false;
     70c:	19 86       	std	Y+9, r1	; 0x09
	
	// Set baudrate, initialize and enable receive interrupt
	serial_options.baudrate =		POWER_UART_BAUDRATE;
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	92 ec       	ldi	r25, 0xC2	; 194
     712:	a1 e0       	ldi	r26, 0x01	; 1
     714:	b0 e0       	ldi	r27, 0x00	; 0
     716:	89 83       	std	Y+1, r24	; 0x01
     718:	9a 83       	std	Y+2, r25	; 0x02
     71a:	ab 83       	std	Y+3, r26	; 0x03
     71c:	bc 83       	std	Y+4, r27	; 0x04
	usart_serial_init				(power.USART, &serial_options);
     71e:	80 91 70 21 	lds	r24, 0x2170
     722:	90 91 71 21 	lds	r25, 0x2171
     726:	9e 01       	movw	r18, r28
     728:	2f 5f       	subi	r18, 0xFF	; 255
     72a:	3f 4f       	sbci	r19, 0xFF	; 255
     72c:	b9 01       	movw	r22, r18
     72e:	13 df       	rcall	.-474    	; 0x556 <usart_serial_init>
	usart_set_rx_interrupt_level	(power.USART,USART_RXCINTLVL_LO_gc);
     730:	80 91 70 21 	lds	r24, 0x2170
     734:	90 91 71 21 	lds	r25, 0x2171
     738:	60 e1       	ldi	r22, 0x10	; 16
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	69 dd       	rcall	.-1326   	; 0x210 <usart_set_rx_interrupt_level>
	
	serial_options.baudrate =		GPS_UART_BAUDRATE;
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	92 ec       	ldi	r25, 0xC2	; 194
     742:	a1 e0       	ldi	r26, 0x01	; 1
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	89 83       	std	Y+1, r24	; 0x01
     748:	9a 83       	std	Y+2, r25	; 0x02
     74a:	ab 83       	std	Y+3, r26	; 0x03
     74c:	bc 83       	std	Y+4, r27	; 0x04
	usart_serial_init				(gps.USART,	&serial_options);
     74e:	80 91 01 20 	lds	r24, 0x2001
     752:	90 91 02 20 	lds	r25, 0x2002
     756:	9e 01       	movw	r18, r28
     758:	2f 5f       	subi	r18, 0xFF	; 255
     75a:	3f 4f       	sbci	r19, 0xFF	; 255
     75c:	b9 01       	movw	r22, r18
     75e:	fb de       	rcall	.-522    	; 0x556 <usart_serial_init>
	usart_set_rx_interrupt_level	(gps.USART,USART_RXCINTLVL_LO_gc);
     760:	80 91 01 20 	lds	r24, 0x2001
     764:	90 91 02 20 	lds	r25, 0x2002
     768:	60 e1       	ldi	r22, 0x10	; 16
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	51 dd       	rcall	.-1374   	; 0x210 <usart_set_rx_interrupt_level>
	
	serial_options.baudrate =		RADIO_UART_BAUDRATE;
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	92 ec       	ldi	r25, 0xC2	; 194
     772:	a1 e0       	ldi	r26, 0x01	; 1
     774:	b0 e0       	ldi	r27, 0x00	; 0
     776:	89 83       	std	Y+1, r24	; 0x01
     778:	9a 83       	std	Y+2, r25	; 0x02
     77a:	ab 83       	std	Y+3, r26	; 0x03
     77c:	bc 83       	std	Y+4, r27	; 0x04
	usart_serial_init				(radio.USART, &serial_options);
     77e:	80 91 67 27 	lds	r24, 0x2767
     782:	90 91 68 27 	lds	r25, 0x2768
     786:	9e 01       	movw	r18, r28
     788:	2f 5f       	subi	r18, 0xFF	; 255
     78a:	3f 4f       	sbci	r19, 0xFF	; 255
     78c:	b9 01       	movw	r22, r18
     78e:	e3 de       	rcall	.-570    	; 0x556 <usart_serial_init>
	usart_set_rx_interrupt_level	(radio.USART,USART_RXCINTLVL_LO_gc);
     790:	80 91 67 27 	lds	r24, 0x2767
     794:	90 91 68 27 	lds	r25, 0x2768
     798:	60 e1       	ldi	r22, 0x10	; 16
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	39 dd       	rcall	.-1422   	; 0x210 <usart_set_rx_interrupt_level>

	serial_options.baudrate =		FC_UART_BAUDRATE;
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	92 ec       	ldi	r25, 0xC2	; 194
     7a2:	a1 e0       	ldi	r26, 0x01	; 1
     7a4:	b0 e0       	ldi	r27, 0x00	; 0
     7a6:	89 83       	std	Y+1, r24	; 0x01
     7a8:	9a 83       	std	Y+2, r25	; 0x02
     7aa:	ab 83       	std	Y+3, r26	; 0x03
     7ac:	bc 83       	std	Y+4, r27	; 0x04
	usart_serial_init				(fc.USART, &serial_options);
     7ae:	80 91 47 28 	lds	r24, 0x2847
     7b2:	90 91 48 28 	lds	r25, 0x2848
     7b6:	9e 01       	movw	r18, r28
     7b8:	2f 5f       	subi	r18, 0xFF	; 255
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	b9 01       	movw	r22, r18
     7be:	cb de       	rcall	.-618    	; 0x556 <usart_serial_init>
	usart_set_rx_interrupt_level	(fc.USART,USART_RXCINTLVL_LO_gc);
     7c0:	80 91 47 28 	lds	r24, 0x2847
     7c4:	90 91 48 28 	lds	r25, 0x2848
     7c8:	60 e1       	ldi	r22, 0x10	; 16
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	21 dd       	rcall	.-1470   	; 0x210 <usart_set_rx_interrupt_level>
	usart_serial_init				(star.USART, &serial_options);
	usart_set_rx_interrupt_level	(star.USART,USART_RXCINTLVL_LO_gc);
	#endif
	
	#ifdef SUN_UART
	serial_options.baudrate =		SUN_UART_BAUDRATE;
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	91 ee       	ldi	r25, 0xE1	; 225
     7d2:	a0 e0       	ldi	r26, 0x00	; 0
     7d4:	b0 e0       	ldi	r27, 0x00	; 0
     7d6:	89 83       	std	Y+1, r24	; 0x01
     7d8:	9a 83       	std	Y+2, r25	; 0x02
     7da:	ab 83       	std	Y+3, r26	; 0x03
     7dc:	bc 83       	std	Y+4, r27	; 0x04
	usart_serial_init				(sun.USART, &serial_options);
     7de:	80 91 7a 24 	lds	r24, 0x247A
     7e2:	90 91 7b 24 	lds	r25, 0x247B
     7e6:	9e 01       	movw	r18, r28
     7e8:	2f 5f       	subi	r18, 0xFF	; 255
     7ea:	3f 4f       	sbci	r19, 0xFF	; 255
     7ec:	b9 01       	movw	r22, r18
     7ee:	b3 de       	rcall	.-666    	; 0x556 <usart_serial_init>
	usart_set_rx_interrupt_level	(sun.USART,USART_RXCINTLVL_LO_gc);
     7f0:	80 91 7a 24 	lds	r24, 0x247A
     7f4:	90 91 7b 24 	lds	r25, 0x247B
     7f8:	60 e1       	ldi	r22, 0x10	; 16
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	09 dd       	rcall	.-1518   	; 0x210 <usart_set_rx_interrupt_level>
	#endif
	
}	
     7fe:	29 96       	adiw	r28, 0x09	; 9
     800:	cd bf       	out	0x3d, r28	; 61
     802:	de bf       	out	0x3e, r29	; 62
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <interrupts_init>:
 *
 * Description  : Initialize and enable global interrupts
 * 
 */
void interrupts_init (void)
{
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
	// Enable low level and medium level interrupts 
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM;
     812:	80 ea       	ldi	r24, 0xA0	; 160
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	23 e0       	ldi	r18, 0x03	; 3
     818:	fc 01       	movw	r30, r24
     81a:	22 83       	std	Z+2, r18	; 0x02
	
	// Set priority of low level interrupts to Round Robin scheduling
	PMIC.CTRL |= PMIC_RREN_bm;
     81c:	80 ea       	ldi	r24, 0xA0	; 160
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	20 ea       	ldi	r18, 0xA0	; 160
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	f9 01       	movw	r30, r18
     826:	22 81       	ldd	r18, Z+2	; 0x02
     828:	20 68       	ori	r18, 0x80	; 128
     82a:	fc 01       	movw	r30, r24
     82c:	22 83       	std	Z+2, r18	; 0x02
	
	// Enable global interrupts
	Enable_global_interrupt();
     82e:	78 94       	sei
}
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	08 95       	ret

00000836 <io_init>:
 *
 * Description  : Initialize I/Os
 * 
 */
void io_init (void)
{
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62

	// Power 422 driver TX_EN and RX_EN I/Os
	// In both MCUs:
	// Port C, Pin 4 = PWR_TX_EN
	// Port C, Pin 5 = PWR_RX_EN 
	PORTC.DIRSET = PIN4_bm | PIN5_bm;	// Both pins are outputs
     83e:	80 e4       	ldi	r24, 0x40	; 64
     840:	96 e0       	ldi	r25, 0x06	; 6
     842:	20 e3       	ldi	r18, 0x30	; 48
     844:	fc 01       	movw	r30, r24
     846:	21 83       	std	Z+1, r18	; 0x01
	PORTC.OUTSET = PIN5_bm;				// TX_EN active low, RX_EN Active high	
     848:	80 e4       	ldi	r24, 0x40	; 64
     84a:	96 e0       	ldi	r25, 0x06	; 6
     84c:	20 e2       	ldi	r18, 0x20	; 32
     84e:	fc 01       	movw	r30, r24
     850:	25 83       	std	Z+5, r18	; 0x05
	
	// Data sheet says -
	// No need to init the UART I/Os - when Tx/Rx are enabled it overrides normal port operation.
	// But doesn't work without this.
	PORTC.DIRSET = PIN3_bm;	// PC3 - USARTC0 
     852:	80 e4       	ldi	r24, 0x40	; 64
     854:	96 e0       	ldi	r25, 0x06	; 6
     856:	28 e0       	ldi	r18, 0x08	; 8
     858:	fc 01       	movw	r30, r24
     85a:	21 83       	std	Z+1, r18	; 0x01
	PORTC.DIRSET = PIN7_bm;	// PC7 - USARTC1 
     85c:	80 e4       	ldi	r24, 0x40	; 64
     85e:	96 e0       	ldi	r25, 0x06	; 6
     860:	20 e8       	ldi	r18, 0x80	; 128
     862:	fc 01       	movw	r30, r24
     864:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN3_bm;	// PD3 - USARTD0
     866:	80 e6       	ldi	r24, 0x60	; 96
     868:	96 e0       	ldi	r25, 0x06	; 6
     86a:	28 e0       	ldi	r18, 0x08	; 8
     86c:	fc 01       	movw	r30, r24
     86e:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN7_bm;	// PD7 - USARTD1
     870:	80 e6       	ldi	r24, 0x60	; 96
     872:	96 e0       	ldi	r25, 0x06	; 6
     874:	20 e8       	ldi	r18, 0x80	; 128
     876:	fc 01       	movw	r30, r24
     878:	21 83       	std	Z+1, r18	; 0x01
	PORTE.DIRSET = PIN3_bm;	// PE3 - USARTE0
     87a:	80 e8       	ldi	r24, 0x80	; 128
     87c:	96 e0       	ldi	r25, 0x06	; 6
     87e:	28 e0       	ldi	r18, 0x08	; 8
     880:	fc 01       	movw	r30, r24
     882:	21 83       	std	Z+1, r18	; 0x01
	PORTE.DIRSET = PIN7_bm;	// PE7 - USARTE1
     884:	80 e8       	ldi	r24, 0x80	; 128
     886:	96 e0       	ldi	r25, 0x06	; 6
     888:	20 e8       	ldi	r18, 0x80	; 128
     88a:	fc 01       	movw	r30, r24
     88c:	21 83       	std	Z+1, r18	; 0x01

		PORTD.DIRSET = PIN7_bm;		// Clock out
		PORTCFG.CLKEVOUT = 0x02;
	#endif
	
}
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <timers_init>:
 *
 * Description  : Initialize Timers. 32000000 / 125 / 256 = 1000	=> 1KHz Interrupt.
 * 
 */
void timers_init (void)
{
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
	// Enable clock to the Timer
	sysclk_enable_peripheral_clock(&TCC0);
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	98 e0       	ldi	r25, 0x08	; 8
     8a0:	d4 dc       	rcall	.-1624   	; 0x24a <sysclk_enable_peripheral_clock>

	// Enable overflow interrupt
	TCC0.INTCTRLA = (TCC0.INTCTRLA & ~TC0_OVFINTLVL_gm ) | TC_OVFINTLVL_LO_gc;
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	98 e0       	ldi	r25, 0x08	; 8
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	38 e0       	ldi	r19, 0x08	; 8
     8aa:	f9 01       	movw	r30, r18
     8ac:	26 81       	ldd	r18, Z+6	; 0x06
     8ae:	2c 7f       	andi	r18, 0xFC	; 252
     8b0:	21 60       	ori	r18, 0x01	; 1
     8b2:	fc 01       	movw	r30, r24
     8b4:	26 83       	std	Z+6, r18	; 0x06

	// Set the period
	TCC0.PER = 125;
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	98 e0       	ldi	r25, 0x08	; 8
     8ba:	2d e7       	ldi	r18, 0x7D	; 125
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	fc 01       	movw	r30, r24
     8c0:	26 a3       	std	Z+38, r18	; 0x26
     8c2:	37 a3       	std	Z+39, r19	; 0x27

	// Pre-scale the 32MHz clock by 256
	TCC0.CTRLA = (TCC0.CTRLA & ~ TC0_CLKSEL_gm) | TC_CLKSEL_DIV256_gc;
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	98 e0       	ldi	r25, 0x08	; 8
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	38 e0       	ldi	r19, 0x08	; 8
     8cc:	f9 01       	movw	r30, r18
     8ce:	20 81       	ld	r18, Z
     8d0:	20 7f       	andi	r18, 0xF0	; 240
     8d2:	26 60       	ori	r18, 0x06	; 6
     8d4:	fc 01       	movw	r30, r24
     8d6:	20 83       	st	Z, r18

	// 32000000 / 125 / 256 = 1000	=> 1KHz Interrupt.
}
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <cdhib_init>:
 *
 * Description  : Initialize THS and CDHIB values
 * 
 */
void cdhib_init	(void)
{
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	de b7       	in	r29, 0x3e	; 62
	// THS
	THS_interval_seconds =				DEFAULT_THS_INTERVAL_SECONDS;
     8e6:	8c e3       	ldi	r24, 0x3C	; 60
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	80 93 36 28 	sts	0x2836, r24
     8ee:	90 93 37 28 	sts	0x2837, r25
	Commanded_THS_interval_seconds =	DEFAULT_THS_INTERVAL_SECONDS;
     8f2:	8c e3       	ldi	r24, 0x3C	; 60
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	80 93 80 29 	sts	0x2980, r24
     8fa:	90 93 81 29 	sts	0x2981, r25
	External_THS_trigger =				true;	// set to true to trigger beacon on power up
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	80 93 6f 21 	sts	0x216F, r24
	
	// ACK packet
	ACK[0] = 0x41;
     904:	81 e4       	ldi	r24, 0x41	; 65
     906:	80 93 82 29 	sts	0x2982, r24
	ACK[1] = 0x43;
     90a:	83 e4       	ldi	r24, 0x43	; 67
     90c:	80 93 83 29 	sts	0x2983, r24
	ACK[2] = 0x4B;
     910:	8b e4       	ldi	r24, 0x4B	; 75
     912:	80 93 84 29 	sts	0x2984, r24
	
	// PWR_NOOP packet
	PWR_NOOP[0] = NOOP_COMMAND;
     916:	10 92 00 20 	sts	0x2000, r1
}
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <switch_to_ext_osc>:
 *
 * Description  : Check if external oscillator is present and stable and switch the system source to the external oscillator and PLL
 * 
 */
void switch_to_ext_osc (void)
{
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	cd b7       	in	r28, 0x3d	; 61
     926:	de b7       	in	r29, 0x3e	; 62
	
	if (OSC.STATUS & OSC_XOSCRDY_bm) // External oscillator stable
     928:	80 e5       	ldi	r24, 0x50	; 80
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	fc 01       	movw	r30, r24
     92e:	81 81       	ldd	r24, Z+1	; 0x01
     930:	88 2f       	mov	r24, r24
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	88 70       	andi	r24, 0x08	; 8
     936:	99 27       	eor	r25, r25
     938:	00 97       	sbiw	r24, 0x00	; 0
     93a:	19 f1       	breq	.+70     	; 0x982 <switch_to_ext_osc+0x62>
	{
					
		// Configure the PLL to be external oscillator *2. Change to *4 if using 8MHz crystal
		OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | 2 ;
     93c:	80 e5       	ldi	r24, 0x50	; 80
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	22 ec       	ldi	r18, 0xC2	; 194
     942:	fc 01       	movw	r30, r24
     944:	25 83       	std	Z+5, r18	; 0x05
		
		// Enable the PLL
		OSC.CTRL |= OSC_PLLEN_bm ;
     946:	80 e5       	ldi	r24, 0x50	; 80
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	20 e5       	ldi	r18, 0x50	; 80
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	f9 01       	movw	r30, r18
     950:	20 81       	ld	r18, Z
     952:	20 61       	ori	r18, 0x10	; 16
     954:	fc 01       	movw	r30, r24
     956:	20 83       	st	Z, r18
		// Wait until it's stable
		while( !(OSC.STATUS & OSC_PLLRDY_bm) ); 
     958:	00 00       	nop
     95a:	80 e5       	ldi	r24, 0x50	; 80
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	fc 01       	movw	r30, r24
     960:	81 81       	ldd	r24, Z+1	; 0x01
     962:	88 2f       	mov	r24, r24
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	80 71       	andi	r24, 0x10	; 16
     968:	99 27       	eor	r25, r25
     96a:	00 97       	sbiw	r24, 0x00	; 0
     96c:	b1 f3       	breq	.-20     	; 0x95a <switch_to_ext_osc+0x3a>
		
		// Switch system clock source to the PLL output
		ccp_write_io((uint8_t *)&CLK.CTRL, CLK_SCLKSEL_PLL_gc);
     96e:	64 e0       	ldi	r22, 0x04	; 4
     970:	80 e4       	ldi	r24, 0x40	; 64
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	4b d0       	rcall	.+150    	; 0xa0c <ccp_write_io>
	
		// Enable external oscillator fault detection
		ccp_write_io((uint8_t *)&OSC.XOSCFAIL, OSC_XOSCFDEN_bm);
     976:	61 e0       	ldi	r22, 0x01	; 1
     978:	83 e5       	ldi	r24, 0x53	; 83
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	47 d0       	rcall	.+142    	; 0xa0c <ccp_write_io>
		
		// Reset the flag
		xosc_recovey = false;
     97e:	10 92 b9 2c 	sts	0x2CB9, r1
	}	
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <cpu_irq_save>:
		
		if (!need_rc2mhz) {
			osc_disable(OSC_ID_RC2MHZ);
		}
	}
}
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	1f 92       	push	r1
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	8f e3       	ldi	r24, 0x3F	; 63
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	fc 01       	movw	r30, r24
     998:	80 81       	ld	r24, Z
     99a:	89 83       	std	Y+1, r24	; 0x01
     99c:	f8 94       	cli
     99e:	89 81       	ldd	r24, Y+1	; 0x01
     9a0:	0f 90       	pop	r0
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <cpu_irq_restore>:
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	1f 92       	push	r1
     9ae:	cd b7       	in	r28, 0x3d	; 61
     9b0:	de b7       	in	r29, 0x3e	; 62
     9b2:	89 83       	std	Y+1, r24	; 0x01
     9b4:	8f e3       	ldi	r24, 0x3F	; 63
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	29 81       	ldd	r18, Y+1	; 0x01
     9ba:	fc 01       	movw	r30, r24
     9bc:	20 83       	st	Z, r18
     9be:	0f 90       	pop	r0
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <sysclk_enable_module+0x6>
     9cc:	1f 92       	push	r1
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	8a 83       	std	Y+2, r24	; 0x02
     9d4:	9b 83       	std	Y+3, r25	; 0x03
     9d6:	6c 83       	std	Y+4, r22	; 0x04
	irqflags_t flags = cpu_irq_save();
     9d8:	d7 df       	rcall	.-82     	; 0x988 <cpu_irq_save>
     9da:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     9dc:	8a 81       	ldd	r24, Y+2	; 0x02
     9de:	9b 81       	ldd	r25, Y+3	; 0x03
     9e0:	80 59       	subi	r24, 0x90	; 144
     9e2:	9f 4f       	sbci	r25, 0xFF	; 255
     9e4:	2a 81       	ldd	r18, Y+2	; 0x02
     9e6:	3b 81       	ldd	r19, Y+3	; 0x03
     9e8:	20 59       	subi	r18, 0x90	; 144
     9ea:	3f 4f       	sbci	r19, 0xFF	; 255
     9ec:	f9 01       	movw	r30, r18
     9ee:	20 81       	ld	r18, Z
     9f0:	32 2f       	mov	r19, r18
     9f2:	2c 81       	ldd	r18, Y+4	; 0x04
     9f4:	20 95       	com	r18
     9f6:	23 23       	and	r18, r19
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
     9fc:	89 81       	ldd	r24, Y+1	; 0x01
     9fe:	d4 df       	rcall	.-88     	; 0x9a8 <cpu_irq_restore>
}
     a00:	24 96       	adiw	r28, 0x04	; 4
     a02:	cd bf       	out	0x3d, r28	; 61
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	08 95       	ret

00000a0c <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     a0c:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     a0e:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     a10:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     a12:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     a14:	60 83       	st	Z, r22
	ret                             // Return to caller
     a16:	08 95       	ret

00000a18 <usart_rx_enable>:
 */
uint8_t usart_getchar(USART_t *usart)
{
	while (usart_rx_is_complete(usart) == false);
	return ((uint8_t) (usart)->DATA);
}
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	1f 92       	push	r1
     a1e:	1f 92       	push	r1
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
     a24:	89 83       	std	Y+1, r24	; 0x01
     a26:	9a 83       	std	Y+2, r25	; 0x02
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	9a 81       	ldd	r25, Y+2	; 0x02
     a2c:	fc 01       	movw	r30, r24
     a2e:	84 81       	ldd	r24, Z+4	; 0x04
     a30:	28 2f       	mov	r18, r24
     a32:	20 61       	ori	r18, 0x10	; 16
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	9a 81       	ldd	r25, Y+2	; 0x02
     a38:	fc 01       	movw	r30, r24
     a3a:	24 83       	std	Z+4, r18	; 0x04
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	08 95       	ret

00000a46 <usart_format_set>:
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	27 97       	sbiw	r28, 0x07	; 7
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	de bf       	out	0x3e, r29	; 62
     a54:	89 83       	std	Y+1, r24	; 0x01
     a56:	9a 83       	std	Y+2, r25	; 0x02
     a58:	6b 83       	std	Y+3, r22	; 0x03
     a5a:	7c 83       	std	Y+4, r23	; 0x04
     a5c:	4d 83       	std	Y+5, r20	; 0x05
     a5e:	5e 83       	std	Y+6, r21	; 0x06
     a60:	2f 83       	std	Y+7, r18	; 0x07
     a62:	9b 81       	ldd	r25, Y+3	; 0x03
     a64:	8d 81       	ldd	r24, Y+5	; 0x05
     a66:	98 2b       	or	r25, r24
     a68:	8f 81       	ldd	r24, Y+7	; 0x07
     a6a:	88 23       	and	r24, r24
     a6c:	11 f0       	breq	.+4      	; 0xa72 <usart_format_set+0x2c>
     a6e:	88 e0       	ldi	r24, 0x08	; 8
     a70:	01 c0       	rjmp	.+2      	; 0xa74 <usart_format_set+0x2e>
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	29 2f       	mov	r18, r25
     a76:	28 2b       	or	r18, r24
     a78:	89 81       	ldd	r24, Y+1	; 0x01
     a7a:	9a 81       	ldd	r25, Y+2	; 0x02
     a7c:	fc 01       	movw	r30, r24
     a7e:	25 83       	std	Z+5, r18	; 0x05
     a80:	27 96       	adiw	r28, 0x07	; 7
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret

00000a8c <usart_tx_enable>:
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	1f 92       	push	r1
     a92:	1f 92       	push	r1
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	89 83       	std	Y+1, r24	; 0x01
     a9a:	9a 83       	std	Y+2, r25	; 0x02
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	9a 81       	ldd	r25, Y+2	; 0x02
     aa0:	fc 01       	movw	r30, r24
     aa2:	84 81       	ldd	r24, Z+4	; 0x04
     aa4:	28 2f       	mov	r18, r24
     aa6:	28 60       	ori	r18, 0x08	; 8
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	9a 81       	ldd	r25, Y+2	; 0x02
     aac:	fc 01       	movw	r30, r24
     aae:	24 83       	std	Z+4, r18	; 0x04
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <usart_set_mode>:
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	00 d0       	rcall	.+0      	; 0xac0 <usart_set_mode+0x6>
     ac0:	1f 92       	push	r1
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	89 83       	std	Y+1, r24	; 0x01
     ac8:	9a 83       	std	Y+2, r25	; 0x02
     aca:	6b 83       	std	Y+3, r22	; 0x03
     acc:	7c 83       	std	Y+4, r23	; 0x04
     ace:	89 81       	ldd	r24, Y+1	; 0x01
     ad0:	9a 81       	ldd	r25, Y+2	; 0x02
     ad2:	fc 01       	movw	r30, r24
     ad4:	85 81       	ldd	r24, Z+5	; 0x05
     ad6:	98 2f       	mov	r25, r24
     ad8:	9f 73       	andi	r25, 0x3F	; 63
     ada:	8b 81       	ldd	r24, Y+3	; 0x03
     adc:	29 2f       	mov	r18, r25
     ade:	28 2b       	or	r18, r24
     ae0:	89 81       	ldd	r24, Y+1	; 0x01
     ae2:	9a 81       	ldd	r25, Y+2	; 0x02
     ae4:	fc 01       	movw	r30, r24
     ae6:	25 83       	std	Z+5, r18	; 0x05
     ae8:	24 96       	adiw	r28, 0x04	; 4
     aea:	cd bf       	out	0x3d, r28	; 61
     aec:	de bf       	out	0x3e, r29	; 62
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	08 95       	ret

00000af4 <sysclk_get_main_hz>:
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	80 e8       	ldi	r24, 0x80	; 128
     afe:	94 e8       	ldi	r25, 0x84	; 132
     b00:	ae e1       	ldi	r26, 0x1E	; 30
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	bc 01       	movw	r22, r24
     b06:	cd 01       	movw	r24, r26
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	08 95       	ret

00000b0e <sysclk_get_per4_hz>:
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	1f 92       	push	r1
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
     b18:	19 82       	std	Y+1, r1	; 0x01
     b1a:	ec df       	rcall	.-40     	; 0xaf4 <sysclk_get_main_hz>
     b1c:	dc 01       	movw	r26, r24
     b1e:	cb 01       	movw	r24, r22
     b20:	29 81       	ldd	r18, Y+1	; 0x01
     b22:	22 2f       	mov	r18, r18
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <sysclk_get_per4_hz+0x24>
     b2a:	b6 95       	lsr	r27
     b2c:	a7 95       	ror	r26
     b2e:	97 95       	ror	r25
     b30:	87 95       	ror	r24
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <sysclk_get_per4_hz+0x1c>
     b36:	bc 01       	movw	r22, r24
     b38:	cd 01       	movw	r24, r26
     b3a:	0f 90       	pop	r0
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	08 95       	ret

00000b42 <sysclk_get_per2_hz>:
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
     b4a:	e1 df       	rcall	.-62     	; 0xb0e <sysclk_get_per4_hz>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	bc 01       	movw	r22, r24
     b52:	cd 01       	movw	r24, r26
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	08 95       	ret

00000b5a <sysclk_get_per_hz>:
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
     b62:	ef df       	rcall	.-34     	; 0xb42 <sysclk_get_per2_hz>
     b64:	dc 01       	movw	r26, r24
     b66:	cb 01       	movw	r24, r22
     b68:	bc 01       	movw	r22, r24
     b6a:	cd 01       	movw	r24, r26
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	08 95       	ret

00000b72 <usart_enable_module_clock>:
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	1f 92       	push	r1
     b78:	1f 92       	push	r1
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	89 83       	std	Y+1, r24	; 0x01
     b80:	9a 83       	std	Y+2, r25	; 0x02
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	9a 81       	ldd	r25, Y+2	; 0x02
     b86:	80 3a       	cpi	r24, 0xA0	; 160
     b88:	28 e0       	ldi	r18, 0x08	; 8
     b8a:	92 07       	cpc	r25, r18
     b8c:	21 f4       	brne	.+8      	; 0xb96 <usart_enable_module_clock+0x24>
     b8e:	60 e1       	ldi	r22, 0x10	; 16
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	18 df       	rcall	.-464    	; 0x9c6 <sysclk_enable_module>
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	9a 81       	ldd	r25, Y+2	; 0x02
     b9a:	80 3b       	cpi	r24, 0xB0	; 176
     b9c:	28 e0       	ldi	r18, 0x08	; 8
     b9e:	92 07       	cpc	r25, r18
     ba0:	21 f4       	brne	.+8      	; 0xbaa <usart_enable_module_clock+0x38>
     ba2:	60 e2       	ldi	r22, 0x20	; 32
     ba4:	83 e0       	ldi	r24, 0x03	; 3
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e df       	rcall	.-484    	; 0x9c6 <sysclk_enable_module>
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	9a 81       	ldd	r25, Y+2	; 0x02
     bae:	80 3a       	cpi	r24, 0xA0	; 160
     bb0:	29 e0       	ldi	r18, 0x09	; 9
     bb2:	92 07       	cpc	r25, r18
     bb4:	21 f4       	brne	.+8      	; 0xbbe <usart_enable_module_clock+0x4c>
     bb6:	60 e1       	ldi	r22, 0x10	; 16
     bb8:	84 e0       	ldi	r24, 0x04	; 4
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	04 df       	rcall	.-504    	; 0x9c6 <sysclk_enable_module>
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	9a 81       	ldd	r25, Y+2	; 0x02
     bc2:	80 3b       	cpi	r24, 0xB0	; 176
     bc4:	29 e0       	ldi	r18, 0x09	; 9
     bc6:	92 07       	cpc	r25, r18
     bc8:	21 f4       	brne	.+8      	; 0xbd2 <usart_enable_module_clock+0x60>
     bca:	60 e2       	ldi	r22, 0x20	; 32
     bcc:	84 e0       	ldi	r24, 0x04	; 4
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	fa de       	rcall	.-524    	; 0x9c6 <sysclk_enable_module>
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	9a 81       	ldd	r25, Y+2	; 0x02
     bd6:	80 3a       	cpi	r24, 0xA0	; 160
     bd8:	2a e0       	ldi	r18, 0x0A	; 10
     bda:	92 07       	cpc	r25, r18
     bdc:	21 f4       	brne	.+8      	; 0xbe6 <usart_enable_module_clock+0x74>
     bde:	60 e1       	ldi	r22, 0x10	; 16
     be0:	85 e0       	ldi	r24, 0x05	; 5
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	f0 de       	rcall	.-544    	; 0x9c6 <sysclk_enable_module>
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	9a 81       	ldd	r25, Y+2	; 0x02
     bea:	80 3b       	cpi	r24, 0xB0	; 176
     bec:	2a e0       	ldi	r18, 0x0A	; 10
     bee:	92 07       	cpc	r25, r18
     bf0:	21 f4       	brne	.+8      	; 0xbfa <usart_enable_module_clock+0x88>
     bf2:	60 e2       	ldi	r22, 0x20	; 32
     bf4:	85 e0       	ldi	r24, 0x05	; 5
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	e6 de       	rcall	.-564    	; 0x9c6 <sysclk_enable_module>
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	9a 81       	ldd	r25, Y+2	; 0x02
     bfe:	80 3a       	cpi	r24, 0xA0	; 160
     c00:	2b e0       	ldi	r18, 0x0B	; 11
     c02:	92 07       	cpc	r25, r18
     c04:	21 f4       	brne	.+8      	; 0xc0e <usart_enable_module_clock+0x9c>
     c06:	60 e1       	ldi	r22, 0x10	; 16
     c08:	86 e0       	ldi	r24, 0x06	; 6
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	dc de       	rcall	.-584    	; 0x9c6 <sysclk_enable_module>
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	9a 81       	ldd	r25, Y+2	; 0x02
     c12:	80 3b       	cpi	r24, 0xB0	; 176
     c14:	2b e0       	ldi	r18, 0x0B	; 11
     c16:	92 07       	cpc	r25, r18
     c18:	21 f4       	brne	.+8      	; 0xc22 <usart_enable_module_clock+0xb0>
     c1a:	60 e2       	ldi	r22, 0x20	; 32
     c1c:	86 e0       	ldi	r24, 0x06	; 6
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	d2 de       	rcall	.-604    	; 0x9c6 <sysclk_enable_module>
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	08 95       	ret

00000c2c <usart_init_rs232>:
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	00 d0       	rcall	.+0      	; 0xc36 <usart_init_rs232+0xa>
     c36:	1f 92       	push	r1
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	89 83       	std	Y+1, r24	; 0x01
     c3e:	9a 83       	std	Y+2, r25	; 0x02
     c40:	6b 83       	std	Y+3, r22	; 0x03
     c42:	7c 83       	std	Y+4, r23	; 0x04
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	9a 81       	ldd	r25, Y+2	; 0x02
     c48:	94 df       	rcall	.-216    	; 0xb72 <usart_enable_module_clock>
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	33 df       	rcall	.-410    	; 0xaba <usart_set_mode>
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	9c 81       	ldd	r25, Y+4	; 0x04
     c58:	fc 01       	movw	r30, r24
     c5a:	20 85       	ldd	r18, Z+8	; 0x08
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	9c 81       	ldd	r25, Y+4	; 0x04
     c60:	fc 01       	movw	r30, r24
     c62:	46 81       	ldd	r20, Z+6	; 0x06
     c64:	57 81       	ldd	r21, Z+7	; 0x07
     c66:	8b 81       	ldd	r24, Y+3	; 0x03
     c68:	9c 81       	ldd	r25, Y+4	; 0x04
     c6a:	fc 01       	movw	r30, r24
     c6c:	64 81       	ldd	r22, Z+4	; 0x04
     c6e:	75 81       	ldd	r23, Z+5	; 0x05
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	9a 81       	ldd	r25, Y+2	; 0x02
     c74:	e8 de       	rcall	.-560    	; 0xa46 <usart_format_set>
     c76:	71 df       	rcall	.-286    	; 0xb5a <sysclk_get_per_hz>
     c78:	9b 01       	movw	r18, r22
     c7a:	ac 01       	movw	r20, r24
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	9c 81       	ldd	r25, Y+4	; 0x04
     c80:	fc 01       	movw	r30, r24
     c82:	80 81       	ld	r24, Z
     c84:	91 81       	ldd	r25, Z+1	; 0x01
     c86:	a2 81       	ldd	r26, Z+2	; 0x02
     c88:	b3 81       	ldd	r27, Z+3	; 0x03
     c8a:	e9 81       	ldd	r30, Y+1	; 0x01
     c8c:	fa 81       	ldd	r31, Y+2	; 0x02
     c8e:	89 01       	movw	r16, r18
     c90:	9a 01       	movw	r18, r20
     c92:	ac 01       	movw	r20, r24
     c94:	bd 01       	movw	r22, r26
     c96:	cf 01       	movw	r24, r30
     c98:	0e d0       	rcall	.+28     	; 0xcb6 <usart_set_baudrate>
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	9a 81       	ldd	r25, Y+2	; 0x02
     c9e:	f6 de       	rcall	.-532    	; 0xa8c <usart_tx_enable>
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	9a 81       	ldd	r25, Y+2	; 0x02
     ca4:	b9 de       	rcall	.-654    	; 0xa18 <usart_rx_enable>
     ca6:	24 96       	adiw	r28, 0x04	; 4
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	08 95       	ret

00000cb6 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     cb6:	ef 92       	push	r14
     cb8:	ff 92       	push	r15
     cba:	0f 93       	push	r16
     cbc:	1f 93       	push	r17
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	6f 97       	sbiw	r28, 0x1f	; 31
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	8e 8b       	std	Y+22, r24	; 0x16
     cce:	9f 8b       	std	Y+23, r25	; 0x17
     cd0:	48 8f       	std	Y+24, r20	; 0x18
     cd2:	59 8f       	std	Y+25, r21	; 0x19
     cd4:	6a 8f       	std	Y+26, r22	; 0x1a
     cd6:	7b 8f       	std	Y+27, r23	; 0x1b
     cd8:	0c 8f       	std	Y+28, r16	; 0x1c
     cda:	1d 8f       	std	Y+29, r17	; 0x1d
     cdc:	2e 8f       	std	Y+30, r18	; 0x1e
     cde:	3f 8f       	std	Y+31, r19	; 0x1f

	/*
	 * Check if the hardware supports the given baud rate
	 */
	// 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN)
	max_rate = cpu_hz / 8;
     ce0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ce2:	9d 8d       	ldd	r25, Y+29	; 0x1d
     ce4:	ae 8d       	ldd	r26, Y+30	; 0x1e
     ce6:	bf 8d       	ldd	r27, Y+31	; 0x1f
     ce8:	68 94       	set
     cea:	12 f8       	bld	r1, 2
     cec:	b6 95       	lsr	r27
     cee:	a7 95       	ror	r26
     cf0:	97 95       	ror	r25
     cf2:	87 95       	ror	r24
     cf4:	16 94       	lsr	r1
     cf6:	d1 f7       	brne	.-12     	; 0xcec <usart_set_baudrate+0x36>
     cf8:	8a 87       	std	Y+10, r24	; 0x0a
     cfa:	9b 87       	std	Y+11, r25	; 0x0b
     cfc:	ac 87       	std	Y+12, r26	; 0x0c
     cfe:	bd 87       	std	Y+13, r27	; 0x0d
	// 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1)
	min_rate = cpu_hz / 4194304;
     d00:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d02:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d04:	ae 8d       	ldd	r26, Y+30	; 0x1e
     d06:	bf 8d       	ldd	r27, Y+31	; 0x1f
     d08:	07 2e       	mov	r0, r23
     d0a:	76 e1       	ldi	r23, 0x16	; 22
     d0c:	b6 95       	lsr	r27
     d0e:	a7 95       	ror	r26
     d10:	97 95       	ror	r25
     d12:	87 95       	ror	r24
     d14:	7a 95       	dec	r23
     d16:	d1 f7       	brne	.-12     	; 0xd0c <usart_set_baudrate+0x56>
     d18:	70 2d       	mov	r23, r0
     d1a:	8e 83       	std	Y+6, r24	; 0x06
     d1c:	9f 83       	std	Y+7, r25	; 0x07
     d1e:	a8 87       	std	Y+8, r26	; 0x08
     d20:	b9 87       	std	Y+9, r27	; 0x09

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     d22:	8e 89       	ldd	r24, Y+22	; 0x16
     d24:	9f 89       	ldd	r25, Y+23	; 0x17
     d26:	fc 01       	movw	r30, r24
     d28:	84 81       	ldd	r24, Z+4	; 0x04
     d2a:	88 2f       	mov	r24, r24
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	84 70       	andi	r24, 0x04	; 4
     d30:	99 27       	eor	r25, r25
     d32:	00 97       	sbiw	r24, 0x00	; 0
     d34:	c1 f4       	brne	.+48     	; 0xd66 <usart_set_baudrate+0xb0>
		max_rate /= 2;
     d36:	8a 85       	ldd	r24, Y+10	; 0x0a
     d38:	9b 85       	ldd	r25, Y+11	; 0x0b
     d3a:	ac 85       	ldd	r26, Y+12	; 0x0c
     d3c:	bd 85       	ldd	r27, Y+13	; 0x0d
     d3e:	b6 95       	lsr	r27
     d40:	a7 95       	ror	r26
     d42:	97 95       	ror	r25
     d44:	87 95       	ror	r24
     d46:	8a 87       	std	Y+10, r24	; 0x0a
     d48:	9b 87       	std	Y+11, r25	; 0x0b
     d4a:	ac 87       	std	Y+12, r26	; 0x0c
     d4c:	bd 87       	std	Y+13, r27	; 0x0d
		min_rate /= 2;
     d4e:	8e 81       	ldd	r24, Y+6	; 0x06
     d50:	9f 81       	ldd	r25, Y+7	; 0x07
     d52:	a8 85       	ldd	r26, Y+8	; 0x08
     d54:	b9 85       	ldd	r27, Y+9	; 0x09
     d56:	b6 95       	lsr	r27
     d58:	a7 95       	ror	r26
     d5a:	97 95       	ror	r25
     d5c:	87 95       	ror	r24
     d5e:	8e 83       	std	Y+6, r24	; 0x06
     d60:	9f 83       	std	Y+7, r25	; 0x07
     d62:	a8 87       	std	Y+8, r26	; 0x08
     d64:	b9 87       	std	Y+9, r27	; 0x09
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     d66:	28 8d       	ldd	r18, Y+24	; 0x18
     d68:	39 8d       	ldd	r19, Y+25	; 0x19
     d6a:	4a 8d       	ldd	r20, Y+26	; 0x1a
     d6c:	5b 8d       	ldd	r21, Y+27	; 0x1b
     d6e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d70:	9b 85       	ldd	r25, Y+11	; 0x0b
     d72:	ac 85       	ldd	r26, Y+12	; 0x0c
     d74:	bd 85       	ldd	r27, Y+13	; 0x0d
     d76:	82 17       	cp	r24, r18
     d78:	93 07       	cpc	r25, r19
     d7a:	a4 07       	cpc	r26, r20
     d7c:	b5 07       	cpc	r27, r21
     d7e:	68 f0       	brcs	.+26     	; 0xd9a <usart_set_baudrate+0xe4>
     d80:	28 8d       	ldd	r18, Y+24	; 0x18
     d82:	39 8d       	ldd	r19, Y+25	; 0x19
     d84:	4a 8d       	ldd	r20, Y+26	; 0x1a
     d86:	5b 8d       	ldd	r21, Y+27	; 0x1b
     d88:	8e 81       	ldd	r24, Y+6	; 0x06
     d8a:	9f 81       	ldd	r25, Y+7	; 0x07
     d8c:	a8 85       	ldd	r26, Y+8	; 0x08
     d8e:	b9 85       	ldd	r27, Y+9	; 0x09
     d90:	28 17       	cp	r18, r24
     d92:	39 07       	cpc	r19, r25
     d94:	4a 07       	cpc	r20, r26
     d96:	5b 07       	cpc	r21, r27
     d98:	10 f4       	brcc	.+4      	; 0xd9e <usart_set_baudrate+0xe8>
		return false;
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	2e c1       	rjmp	.+604    	; 0xffa <usart_set_baudrate+0x344>
	}

	/*
	 * Check if double speed is enabled.
	 */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     d9e:	8e 89       	ldd	r24, Y+22	; 0x16
     da0:	9f 89       	ldd	r25, Y+23	; 0x17
     da2:	fc 01       	movw	r30, r24
     da4:	84 81       	ldd	r24, Z+4	; 0x04
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	84 70       	andi	r24, 0x04	; 4
     dac:	99 27       	eor	r25, r25
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	61 f4       	brne	.+24     	; 0xdca <usart_set_baudrate+0x114>
		baud *= 2;
     db2:	88 8d       	ldd	r24, Y+24	; 0x18
     db4:	99 8d       	ldd	r25, Y+25	; 0x19
     db6:	aa 8d       	ldd	r26, Y+26	; 0x1a
     db8:	bb 8d       	ldd	r27, Y+27	; 0x1b
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	aa 1f       	adc	r26, r26
     dc0:	bb 1f       	adc	r27, r27
     dc2:	88 8f       	std	Y+24, r24	; 0x18
     dc4:	99 8f       	std	Y+25, r25	; 0x19
     dc6:	aa 8f       	std	Y+26, r26	; 0x1a
     dc8:	bb 8f       	std	Y+27, r27	; 0x1b
	}

	/*
	 * Find the lowest possible exponent.
	 */
	limit = 0xfffU >> 4;
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	a0 e0       	ldi	r26, 0x00	; 0
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	8a 83       	std	Y+2, r24	; 0x02
     dd4:	9b 83       	std	Y+3, r25	; 0x03
     dd6:	ac 83       	std	Y+4, r26	; 0x04
     dd8:	bd 83       	std	Y+5, r27	; 0x05
	ratio = cpu_hz / baud;
     dda:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ddc:	9d 8d       	ldd	r25, Y+29	; 0x1d
     dde:	ae 8d       	ldd	r26, Y+30	; 0x1e
     de0:	bf 8d       	ldd	r27, Y+31	; 0x1f
     de2:	28 8d       	ldd	r18, Y+24	; 0x18
     de4:	39 8d       	ldd	r19, Y+25	; 0x19
     de6:	4a 8d       	ldd	r20, Y+26	; 0x1a
     de8:	5b 8d       	ldd	r21, Y+27	; 0x1b
     dea:	bc 01       	movw	r22, r24
     dec:	cd 01       	movw	r24, r26
     dee:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <__udivmodsi4>
     df2:	2e 87       	std	Y+14, r18	; 0x0e
     df4:	3f 87       	std	Y+15, r19	; 0x0f
     df6:	48 8b       	std	Y+16, r20	; 0x10
     df8:	59 8b       	std	Y+17, r21	; 0x11

	for (exp = -7; exp < 7; exp++) {
     dfa:	89 ef       	ldi	r24, 0xF9	; 249
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	28 c0       	rjmp	.+80     	; 0xe50 <usart_set_baudrate+0x19a>
		if (ratio < limit) {
     e00:	2e 85       	ldd	r18, Y+14	; 0x0e
     e02:	3f 85       	ldd	r19, Y+15	; 0x0f
     e04:	48 89       	ldd	r20, Y+16	; 0x10
     e06:	59 89       	ldd	r21, Y+17	; 0x11
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	9b 81       	ldd	r25, Y+3	; 0x03
     e0c:	ac 81       	ldd	r26, Y+4	; 0x04
     e0e:	bd 81       	ldd	r27, Y+5	; 0x05
     e10:	28 17       	cp	r18, r24
     e12:	39 07       	cpc	r19, r25
     e14:	4a 07       	cpc	r20, r26
     e16:	5b 07       	cpc	r21, r27
     e18:	f8 f0       	brcs	.+62     	; 0xe58 <usart_set_baudrate+0x1a2>
			break;
		}

		limit <<= 1;
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	9b 81       	ldd	r25, Y+3	; 0x03
     e1e:	ac 81       	ldd	r26, Y+4	; 0x04
     e20:	bd 81       	ldd	r27, Y+5	; 0x05
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	aa 1f       	adc	r26, r26
     e28:	bb 1f       	adc	r27, r27
     e2a:	8a 83       	std	Y+2, r24	; 0x02
     e2c:	9b 83       	std	Y+3, r25	; 0x03
     e2e:	ac 83       	std	Y+4, r26	; 0x04
     e30:	bd 83       	std	Y+5, r27	; 0x05

		if (exp < -3) {
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	8d 3f       	cpi	r24, 0xFD	; 253
     e36:	4c f4       	brge	.+18     	; 0xe4a <usart_set_baudrate+0x194>
			limit |= 1;
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	9b 81       	ldd	r25, Y+3	; 0x03
     e3c:	ac 81       	ldd	r26, Y+4	; 0x04
     e3e:	bd 81       	ldd	r27, Y+5	; 0x05
     e40:	81 60       	ori	r24, 0x01	; 1
     e42:	8a 83       	std	Y+2, r24	; 0x02
     e44:	9b 83       	std	Y+3, r25	; 0x03
     e46:	ac 83       	std	Y+4, r26	; 0x04
     e48:	bd 83       	std	Y+5, r27	; 0x05
	 * Find the lowest possible exponent.
	 */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	8f 5f       	subi	r24, 0xFF	; 255
     e4e:	89 83       	std	Y+1, r24	; 0x01
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	87 30       	cpi	r24, 0x07	; 7
     e54:	ac f2       	brlt	.-86     	; 0xe00 <usart_set_baudrate+0x14a>
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <usart_set_baudrate+0x1a4>
		if (ratio < limit) {
			break;
     e58:	00 00       	nop
	 * operation as it ensures that we never exceeed 2**32 at any point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	88 23       	and	r24, r24
     e5e:	0c f0       	brlt	.+2      	; 0xe62 <usart_set_baudrate+0x1ac>
     e60:	88 c0       	rjmp	.+272    	; 0xf72 <usart_set_baudrate+0x2bc>
		/*
		 * We are supposed to subtract 1, then apply BSCALE. We want to apply
		 * BSCALE first, so we need to turn everything inside the parenthesis
		 * into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     e62:	88 8d       	ldd	r24, Y+24	; 0x18
     e64:	99 8d       	ldd	r25, Y+25	; 0x19
     e66:	aa 8d       	ldd	r26, Y+26	; 0x1a
     e68:	bb 8d       	ldd	r27, Y+27	; 0x1b
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	aa 1f       	adc	r26, r26
     e70:	bb 1f       	adc	r27, r27
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	aa 1f       	adc	r26, r26
     e78:	bb 1f       	adc	r27, r27
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	aa 1f       	adc	r26, r26
     e80:	bb 1f       	adc	r27, r27
     e82:	2c 8d       	ldd	r18, Y+28	; 0x1c
     e84:	3d 8d       	ldd	r19, Y+29	; 0x1d
     e86:	4e 8d       	ldd	r20, Y+30	; 0x1e
     e88:	5f 8d       	ldd	r21, Y+31	; 0x1f
     e8a:	79 01       	movw	r14, r18
     e8c:	8a 01       	movw	r16, r20
     e8e:	e8 1a       	sub	r14, r24
     e90:	f9 0a       	sbc	r15, r25
     e92:	0a 0b       	sbc	r16, r26
     e94:	1b 0b       	sbc	r17, r27
     e96:	d8 01       	movw	r26, r16
     e98:	c7 01       	movw	r24, r14
     e9a:	8c 8f       	std	Y+28, r24	; 0x1c
     e9c:	9d 8f       	std	Y+29, r25	; 0x1d
     e9e:	ae 8f       	std	Y+30, r26	; 0x1e
     ea0:	bf 8f       	std	Y+31, r27	; 0x1f
		 * If we end up with a left-shift after taking the final divide-by-8
		 * into account, do the shift before the divide. Otherwise, left-shift
		 * the denominator instead (effectively resulting in an overall right 
		 * shift.)
		 */
		if (exp <= -3) {
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	8e 3f       	cpi	r24, 0xFE	; 254
     ea6:	84 f5       	brge	.+96     	; 0xf08 <usart_set_baudrate+0x252>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	99 27       	eor	r25, r25
     eac:	87 fd       	sbrc	r24, 7
     eae:	90 95       	com	r25
     eb0:	2d ef       	ldi	r18, 0xFD	; 253
     eb2:	3f ef       	ldi	r19, 0xFF	; 255
     eb4:	28 1b       	sub	r18, r24
     eb6:	39 0b       	sbc	r19, r25
     eb8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     eba:	9d 8d       	ldd	r25, Y+29	; 0x1d
     ebc:	ae 8d       	ldd	r26, Y+30	; 0x1e
     ebe:	bf 8d       	ldd	r27, Y+31	; 0x1f
     ec0:	7c 01       	movw	r14, r24
     ec2:	8d 01       	movw	r16, r26
     ec4:	04 c0       	rjmp	.+8      	; 0xece <usart_set_baudrate+0x218>
     ec6:	ee 0c       	add	r14, r14
     ec8:	ff 1c       	adc	r15, r15
     eca:	00 1f       	adc	r16, r16
     ecc:	11 1f       	adc	r17, r17
     ece:	2a 95       	dec	r18
     ed0:	d2 f7       	brpl	.-12     	; 0xec6 <usart_set_baudrate+0x210>
     ed2:	a8 01       	movw	r20, r16
     ed4:	97 01       	movw	r18, r14
     ed6:	88 8d       	ldd	r24, Y+24	; 0x18
     ed8:	99 8d       	ldd	r25, Y+25	; 0x19
     eda:	aa 8d       	ldd	r26, Y+26	; 0x1a
     edc:	bb 8d       	ldd	r27, Y+27	; 0x1b
     ede:	b6 95       	lsr	r27
     ee0:	a7 95       	ror	r26
     ee2:	97 95       	ror	r25
     ee4:	87 95       	ror	r24
     ee6:	82 0f       	add	r24, r18
     ee8:	93 1f       	adc	r25, r19
     eea:	a4 1f       	adc	r26, r20
     eec:	b5 1f       	adc	r27, r21
     eee:	28 8d       	ldd	r18, Y+24	; 0x18
     ef0:	39 8d       	ldd	r19, Y+25	; 0x19
     ef2:	4a 8d       	ldd	r20, Y+26	; 0x1a
     ef4:	5b 8d       	ldd	r21, Y+27	; 0x1b
     ef6:	bc 01       	movw	r22, r24
     ef8:	cd 01       	movw	r24, r26
     efa:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <__udivmodsi4>
     efe:	2a 8b       	std	Y+18, r18	; 0x12
     f00:	3b 8b       	std	Y+19, r19	; 0x13
     f02:	4c 8b       	std	Y+20, r20	; 0x14
     f04:	5d 8b       	std	Y+21, r21	; 0x15
     f06:	6e c0       	rjmp	.+220    	; 0xfe4 <usart_set_baudrate+0x32e>
		} else {
			baud <<= exp + 3;
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	99 27       	eor	r25, r25
     f0c:	87 fd       	sbrc	r24, 7
     f0e:	90 95       	com	r25
     f10:	9c 01       	movw	r18, r24
     f12:	2d 5f       	subi	r18, 0xFD	; 253
     f14:	3f 4f       	sbci	r19, 0xFF	; 255
     f16:	88 8d       	ldd	r24, Y+24	; 0x18
     f18:	99 8d       	ldd	r25, Y+25	; 0x19
     f1a:	aa 8d       	ldd	r26, Y+26	; 0x1a
     f1c:	bb 8d       	ldd	r27, Y+27	; 0x1b
     f1e:	04 c0       	rjmp	.+8      	; 0xf28 <usart_set_baudrate+0x272>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	aa 1f       	adc	r26, r26
     f26:	bb 1f       	adc	r27, r27
     f28:	2a 95       	dec	r18
     f2a:	d2 f7       	brpl	.-12     	; 0xf20 <usart_set_baudrate+0x26a>
     f2c:	88 8f       	std	Y+24, r24	; 0x18
     f2e:	99 8f       	std	Y+25, r25	; 0x19
     f30:	aa 8f       	std	Y+26, r26	; 0x1a
     f32:	bb 8f       	std	Y+27, r27	; 0x1b
			div = (cpu_hz + baud / 2) / baud;
     f34:	88 8d       	ldd	r24, Y+24	; 0x18
     f36:	99 8d       	ldd	r25, Y+25	; 0x19
     f38:	aa 8d       	ldd	r26, Y+26	; 0x1a
     f3a:	bb 8d       	ldd	r27, Y+27	; 0x1b
     f3c:	9c 01       	movw	r18, r24
     f3e:	ad 01       	movw	r20, r26
     f40:	56 95       	lsr	r21
     f42:	47 95       	ror	r20
     f44:	37 95       	ror	r19
     f46:	27 95       	ror	r18
     f48:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f4a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     f4c:	ae 8d       	ldd	r26, Y+30	; 0x1e
     f4e:	bf 8d       	ldd	r27, Y+31	; 0x1f
     f50:	82 0f       	add	r24, r18
     f52:	93 1f       	adc	r25, r19
     f54:	a4 1f       	adc	r26, r20
     f56:	b5 1f       	adc	r27, r21
     f58:	28 8d       	ldd	r18, Y+24	; 0x18
     f5a:	39 8d       	ldd	r19, Y+25	; 0x19
     f5c:	4a 8d       	ldd	r20, Y+26	; 0x1a
     f5e:	5b 8d       	ldd	r21, Y+27	; 0x1b
     f60:	bc 01       	movw	r22, r24
     f62:	cd 01       	movw	r24, r26
     f64:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <__udivmodsi4>
     f68:	2a 8b       	std	Y+18, r18	; 0x12
     f6a:	3b 8b       	std	Y+19, r19	; 0x13
     f6c:	4c 8b       	std	Y+20, r20	; 0x14
     f6e:	5d 8b       	std	Y+21, r21	; 0x15
     f70:	39 c0       	rjmp	.+114    	; 0xfe4 <usart_set_baudrate+0x32e>
	} else {
		/*
		 * We will always do a right shift in this case, but we need to shift
		 * three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	99 27       	eor	r25, r25
     f76:	87 fd       	sbrc	r24, 7
     f78:	90 95       	com	r25
     f7a:	9c 01       	movw	r18, r24
     f7c:	2d 5f       	subi	r18, 0xFD	; 253
     f7e:	3f 4f       	sbci	r19, 0xFF	; 255
     f80:	88 8d       	ldd	r24, Y+24	; 0x18
     f82:	99 8d       	ldd	r25, Y+25	; 0x19
     f84:	aa 8d       	ldd	r26, Y+26	; 0x1a
     f86:	bb 8d       	ldd	r27, Y+27	; 0x1b
     f88:	04 c0       	rjmp	.+8      	; 0xf92 <usart_set_baudrate+0x2dc>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	aa 1f       	adc	r26, r26
     f90:	bb 1f       	adc	r27, r27
     f92:	2a 95       	dec	r18
     f94:	d2 f7       	brpl	.-12     	; 0xf8a <usart_set_baudrate+0x2d4>
     f96:	88 8f       	std	Y+24, r24	; 0x18
     f98:	99 8f       	std	Y+25, r25	; 0x19
     f9a:	aa 8f       	std	Y+26, r26	; 0x1a
     f9c:	bb 8f       	std	Y+27, r27	; 0x1b
		div = (cpu_hz + baud / 2) / baud - 1;
     f9e:	88 8d       	ldd	r24, Y+24	; 0x18
     fa0:	99 8d       	ldd	r25, Y+25	; 0x19
     fa2:	aa 8d       	ldd	r26, Y+26	; 0x1a
     fa4:	bb 8d       	ldd	r27, Y+27	; 0x1b
     fa6:	9c 01       	movw	r18, r24
     fa8:	ad 01       	movw	r20, r26
     faa:	56 95       	lsr	r21
     fac:	47 95       	ror	r20
     fae:	37 95       	ror	r19
     fb0:	27 95       	ror	r18
     fb2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fb4:	9d 8d       	ldd	r25, Y+29	; 0x1d
     fb6:	ae 8d       	ldd	r26, Y+30	; 0x1e
     fb8:	bf 8d       	ldd	r27, Y+31	; 0x1f
     fba:	82 0f       	add	r24, r18
     fbc:	93 1f       	adc	r25, r19
     fbe:	a4 1f       	adc	r26, r20
     fc0:	b5 1f       	adc	r27, r21
     fc2:	28 8d       	ldd	r18, Y+24	; 0x18
     fc4:	39 8d       	ldd	r19, Y+25	; 0x19
     fc6:	4a 8d       	ldd	r20, Y+26	; 0x1a
     fc8:	5b 8d       	ldd	r21, Y+27	; 0x1b
     fca:	bc 01       	movw	r22, r24
     fcc:	cd 01       	movw	r24, r26
     fce:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <__udivmodsi4>
     fd2:	da 01       	movw	r26, r20
     fd4:	c9 01       	movw	r24, r18
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	a1 09       	sbc	r26, r1
     fda:	b1 09       	sbc	r27, r1
     fdc:	8a 8b       	std	Y+18, r24	; 0x12
     fde:	9b 8b       	std	Y+19, r25	; 0x13
     fe0:	ac 8b       	std	Y+20, r26	; 0x14
     fe2:	bd 8b       	std	Y+21, r27	; 0x15
	}

	//(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	//(usart)->BAUDCTRLA = (uint8_t)div;
	(usart)->BAUDCTRLA = 0x01;
     fe4:	8e 89       	ldd	r24, Y+22	; 0x16
     fe6:	9f 89       	ldd	r25, Y+23	; 0x17
     fe8:	21 e0       	ldi	r18, 0x01	; 1
     fea:	fc 01       	movw	r30, r24
     fec:	26 83       	std	Z+6, r18	; 0x06
	(usart)->BAUDCTRLB = 0xD0;
     fee:	8e 89       	ldd	r24, Y+22	; 0x16
     ff0:	9f 89       	ldd	r25, Y+23	; 0x17
     ff2:	20 ed       	ldi	r18, 0xD0	; 208
     ff4:	fc 01       	movw	r30, r24
     ff6:	27 83       	std	Z+7, r18	; 0x07

	return true;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
}
     ffa:	6f 96       	adiw	r28, 0x1f	; 31
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	ff 90       	pop	r15
    100a:	ef 90       	pop	r14
    100c:	08 95       	ret

0000100e <main>:
 *
 * Description  : Entry point. Initialize the board and run the scheduler. 
 * 
 */
int main (void)
{
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62

	// Init - in init.c
	board_init();
    1016:	2c db       	rcall	.-2472   	; 0x670 <board_init>
			
	// Run scheduler - in scheduler.c
	scheduler();
    1018:	9e d6       	rcall	.+3388   	; 0x1d56 <scheduler>
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
}
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <DMA_SetPriority>:
 *  \param  channel  The channel to configure.
 */
void DMA_DisableSingleShot( volatile DMA_CH_t * channel )
{
	channel->CTRLA &= ~DMA_CH_SINGLE_bm;
}
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	1f 92       	push	r1
    102a:	1f 92       	push	r1
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	9a 83       	std	Y+2, r25	; 0x02
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	91 e0       	ldi	r25, 0x01	; 1
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	31 e0       	ldi	r19, 0x01	; 1
    103c:	f9 01       	movw	r30, r18
    103e:	20 81       	ld	r18, Z
    1040:	32 2f       	mov	r19, r18
    1042:	3c 7f       	andi	r19, 0xFC	; 252
    1044:	29 81       	ldd	r18, Y+1	; 0x01
    1046:	23 2b       	or	r18, r19
    1048:	fc 01       	movw	r30, r24
    104a:	20 83       	st	Z, r18
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	08 95       	ret

00001056 <DMA_EnableChannel>:
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	1f 92       	push	r1
    105c:	1f 92       	push	r1
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	9a 83       	std	Y+2, r25	; 0x02
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	fc 01       	movw	r30, r24
    106c:	80 81       	ld	r24, Z
    106e:	28 2f       	mov	r18, r24
    1070:	20 68       	ori	r18, 0x80	; 128
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	9a 81       	ldd	r25, Y+2	; 0x02
    1076:	fc 01       	movw	r30, r24
    1078:	20 83       	st	Z, r18
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	08 95       	ret

00001084 <DMA_SetupBlock>:
    1084:	8f 92       	push	r8
    1086:	9f 92       	push	r9
    1088:	af 92       	push	r10
    108a:	bf 92       	push	r11
    108c:	cf 92       	push	r12
    108e:	df 92       	push	r13
    1090:	ef 92       	push	r14
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	62 97       	sbiw	r28, 0x12	; 18
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	89 83       	std	Y+1, r24	; 0x01
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	6b 83       	std	Y+3, r22	; 0x03
    10ac:	7c 83       	std	Y+4, r23	; 0x04
    10ae:	4d 83       	std	Y+5, r20	; 0x05
    10b0:	5e 83       	std	Y+6, r21	; 0x06
    10b2:	2f 83       	std	Y+7, r18	; 0x07
    10b4:	38 87       	std	Y+8, r19	; 0x08
    10b6:	09 87       	std	Y+9, r16	; 0x09
    10b8:	1a 87       	std	Y+10, r17	; 0x0a
    10ba:	eb 86       	std	Y+11, r14	; 0x0b
    10bc:	fc 86       	std	Y+12, r15	; 0x0c
    10be:	cd 86       	std	Y+13, r12	; 0x0d
    10c0:	de 86       	std	Y+14, r13	; 0x0e
    10c2:	af 86       	std	Y+15, r10	; 0x0f
    10c4:	b8 8a       	std	Y+16, r11	; 0x10
    10c6:	89 8a       	std	Y+17, r8	; 0x11
    10c8:	9a 8a       	std	Y+18, r9	; 0x12
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	9c 81       	ldd	r25, Y+4	; 0x04
    10ce:	28 2f       	mov	r18, r24
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	fc 01       	movw	r30, r24
    10d6:	20 87       	std	Z+8, r18	; 0x08
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	89 2f       	mov	r24, r25
    10de:	99 27       	eor	r25, r25
    10e0:	28 2f       	mov	r18, r24
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	9a 81       	ldd	r25, Y+2	; 0x02
    10e6:	fc 01       	movw	r30, r24
    10e8:	21 87       	std	Z+9, r18	; 0x09
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	9a 81       	ldd	r25, Y+2	; 0x02
    10ee:	fc 01       	movw	r30, r24
    10f0:	12 86       	std	Z+10, r1	; 0x0a
    10f2:	89 85       	ldd	r24, Y+9	; 0x09
    10f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f6:	28 2f       	mov	r18, r24
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	9a 81       	ldd	r25, Y+2	; 0x02
    10fc:	fc 01       	movw	r30, r24
    10fe:	24 87       	std	Z+12, r18	; 0x0c
    1100:	89 85       	ldd	r24, Y+9	; 0x09
    1102:	9a 85       	ldd	r25, Y+10	; 0x0a
    1104:	89 2f       	mov	r24, r25
    1106:	99 27       	eor	r25, r25
    1108:	28 2f       	mov	r18, r24
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	9a 81       	ldd	r25, Y+2	; 0x02
    110e:	fc 01       	movw	r30, r24
    1110:	25 87       	std	Z+13, r18	; 0x0d
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	9a 81       	ldd	r25, Y+2	; 0x02
    1116:	fc 01       	movw	r30, r24
    1118:	16 86       	std	Z+14, r1	; 0x0e
    111a:	9d 81       	ldd	r25, Y+5	; 0x05
    111c:	8f 81       	ldd	r24, Y+7	; 0x07
    111e:	98 2b       	or	r25, r24
    1120:	8b 85       	ldd	r24, Y+11	; 0x0b
    1122:	98 2b       	or	r25, r24
    1124:	8d 85       	ldd	r24, Y+13	; 0x0d
    1126:	29 2f       	mov	r18, r25
    1128:	28 2b       	or	r18, r24
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	9a 81       	ldd	r25, Y+2	; 0x02
    112e:	fc 01       	movw	r30, r24
    1130:	22 83       	std	Z+2, r18	; 0x02
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	9a 81       	ldd	r25, Y+2	; 0x02
    1136:	2f 85       	ldd	r18, Y+15	; 0x0f
    1138:	38 89       	ldd	r19, Y+16	; 0x10
    113a:	fc 01       	movw	r30, r24
    113c:	24 83       	std	Z+4, r18	; 0x04
    113e:	35 83       	std	Z+5, r19	; 0x05
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	9a 81       	ldd	r25, Y+2	; 0x02
    1144:	fc 01       	movw	r30, r24
    1146:	80 81       	ld	r24, Z
    1148:	98 2f       	mov	r25, r24
    114a:	9c 7d       	andi	r25, 0xDC	; 220
    114c:	89 89       	ldd	r24, Y+17	; 0x11
    114e:	98 2b       	or	r25, r24
    1150:	8b a1       	ldd	r24, Y+35	; 0x23
    1152:	88 23       	and	r24, r24
    1154:	11 f0       	breq	.+4      	; 0x115a <DMA_SetupBlock+0xd6>
    1156:	80 e2       	ldi	r24, 0x20	; 32
    1158:	01 c0       	rjmp	.+2      	; 0x115c <DMA_SetupBlock+0xd8>
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	29 2f       	mov	r18, r25
    115e:	28 2b       	or	r18, r24
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	9a 81       	ldd	r25, Y+2	; 0x02
    1164:	fc 01       	movw	r30, r24
    1166:	20 83       	st	Z, r18
    1168:	8b a1       	ldd	r24, Y+35	; 0x23
    116a:	88 23       	and	r24, r24
    116c:	29 f0       	breq	.+10     	; 0x1178 <DMA_SetupBlock+0xf4>
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	9a 81       	ldd	r25, Y+2	; 0x02
    1172:	2a a1       	ldd	r18, Y+34	; 0x22
    1174:	fc 01       	movw	r30, r24
    1176:	26 83       	std	Z+6, r18	; 0x06
    1178:	62 96       	adiw	r28, 0x12	; 18
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	0f 91       	pop	r16
    1186:	ff 90       	pop	r15
    1188:	ef 90       	pop	r14
    118a:	df 90       	pop	r13
    118c:	cf 90       	pop	r12
    118e:	bf 90       	pop	r11
    1190:	af 90       	pop	r10
    1192:	9f 90       	pop	r9
    1194:	8f 90       	pop	r8
    1196:	08 95       	ret

00001198 <DMA_EnableSingleShot>:
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	1f 92       	push	r1
    119e:	1f 92       	push	r1
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	89 83       	std	Y+1, r24	; 0x01
    11a6:	9a 83       	std	Y+2, r25	; 0x02
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	9a 81       	ldd	r25, Y+2	; 0x02
    11ac:	fc 01       	movw	r30, r24
    11ae:	80 81       	ld	r24, Z
    11b0:	28 2f       	mov	r18, r24
    11b2:	24 60       	ori	r18, 0x04	; 4
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	fc 01       	movw	r30, r24
    11ba:	20 83       	st	Z, r18
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <DMA_SetTriggerSource>:
 *
 *  \param  channel  The channel to configure.
 *  \param  trigger  The trigger source ID.
 */
void DMA_SetTriggerSource( volatile DMA_CH_t * channel, uint8_t trigger )
{
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <DMA_SetTriggerSource+0x6>
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	9a 83       	std	Y+2, r25	; 0x02
    11d4:	6b 83       	std	Y+3, r22	; 0x03
	channel->TRIGSRC = trigger;
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	9a 81       	ldd	r25, Y+2	; 0x02
    11da:	2b 81       	ldd	r18, Y+3	; 0x03
    11dc:	fc 01       	movw	r30, r24
    11de:	23 83       	std	Z+3, r18	; 0x03
}
    11e0:	23 96       	adiw	r28, 0x03	; 3
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	08 95       	ret

000011ec <sysclk_enable_peripheral_clock>:
	// Insert to fc transmit queue
	Queue_RingBuffer_Insert(&fc_queue_ringbuff, Peripheral->VCP_address);	
	
	// Add to received packet count
	Peripheral->rx_packet_count++;	
}
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	1f 92       	push	r1
    11f2:	1f 92       	push	r1
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	9a 83       	std	Y+2, r25	; 0x02
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	09 f4       	brne	.+2      	; 0x1206 <sysclk_enable_peripheral_clock+0x1a>
    1204:	74 c1       	rjmp	.+744    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	9a 81       	ldd	r25, Y+2	; 0x02
    120a:	80 3c       	cpi	r24, 0xC0	; 192
    120c:	91 05       	cpc	r25, r1
    120e:	29 f4       	brne	.+10     	; 0x121a <sysclk_enable_peripheral_clock+0x2e>
    1210:	60 e1       	ldi	r22, 0x10	; 16
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	d7 db       	rcall	.-2130   	; 0x9c6 <sysclk_enable_module>
    1218:	6a c1       	rjmp	.+724    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	9a 81       	ldd	r25, Y+2	; 0x02
    121e:	81 15       	cp	r24, r1
    1220:	24 e0       	ldi	r18, 0x04	; 4
    1222:	92 07       	cpc	r25, r18
    1224:	29 f4       	brne	.+10     	; 0x1230 <sysclk_enable_peripheral_clock+0x44>
    1226:	64 e0       	ldi	r22, 0x04	; 4
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	cc db       	rcall	.-2152   	; 0x9c6 <sysclk_enable_module>
    122e:	5f c1       	rjmp	.+702    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	9a 81       	ldd	r25, Y+2	; 0x02
    1234:	80 38       	cpi	r24, 0x80	; 128
    1236:	21 e0       	ldi	r18, 0x01	; 1
    1238:	92 07       	cpc	r25, r18
    123a:	29 f4       	brne	.+10     	; 0x1246 <sysclk_enable_peripheral_clock+0x5a>
    123c:	62 e0       	ldi	r22, 0x02	; 2
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	c1 db       	rcall	.-2174   	; 0x9c6 <sysclk_enable_module>
    1244:	54 c1       	rjmp	.+680    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	9a 81       	ldd	r25, Y+2	; 0x02
    124a:	81 15       	cp	r24, r1
    124c:	21 e0       	ldi	r18, 0x01	; 1
    124e:	92 07       	cpc	r25, r18
    1250:	29 f4       	brne	.+10     	; 0x125c <sysclk_enable_peripheral_clock+0x70>
    1252:	61 e0       	ldi	r22, 0x01	; 1
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	b6 db       	rcall	.-2196   	; 0x9c6 <sysclk_enable_module>
    125a:	49 c1       	rjmp	.+658    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	9a 81       	ldd	r25, Y+2	; 0x02
    1260:	80 38       	cpi	r24, 0x80	; 128
    1262:	23 e0       	ldi	r18, 0x03	; 3
    1264:	92 07       	cpc	r25, r18
    1266:	29 f4       	brne	.+10     	; 0x1272 <sysclk_enable_peripheral_clock+0x86>
    1268:	61 e0       	ldi	r22, 0x01	; 1
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	ab db       	rcall	.-2218   	; 0x9c6 <sysclk_enable_module>
    1270:	3e c1       	rjmp	.+636    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	9a 81       	ldd	r25, Y+2	; 0x02
    1276:	80 39       	cpi	r24, 0x90	; 144
    1278:	23 e0       	ldi	r18, 0x03	; 3
    127a:	92 07       	cpc	r25, r18
    127c:	29 f4       	brne	.+10     	; 0x1288 <sysclk_enable_peripheral_clock+0x9c>
    127e:	61 e0       	ldi	r22, 0x01	; 1
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	a0 db       	rcall	.-2240   	; 0x9c6 <sysclk_enable_module>
    1286:	33 c1       	rjmp	.+614    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	81 15       	cp	r24, r1
    128e:	22 e0       	ldi	r18, 0x02	; 2
    1290:	92 07       	cpc	r25, r18
    1292:	29 f4       	brne	.+10     	; 0x129e <sysclk_enable_peripheral_clock+0xb2>
    1294:	62 e0       	ldi	r22, 0x02	; 2
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	95 db       	rcall	.-2262   	; 0x9c6 <sysclk_enable_module>
    129c:	28 c1       	rjmp	.+592    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	9a 81       	ldd	r25, Y+2	; 0x02
    12a2:	80 34       	cpi	r24, 0x40	; 64
    12a4:	22 e0       	ldi	r18, 0x02	; 2
    12a6:	92 07       	cpc	r25, r18
    12a8:	29 f4       	brne	.+10     	; 0x12b4 <sysclk_enable_peripheral_clock+0xc8>
    12aa:	62 e0       	ldi	r22, 0x02	; 2
    12ac:	82 e0       	ldi	r24, 0x02	; 2
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	8a db       	rcall	.-2284   	; 0x9c6 <sysclk_enable_module>
    12b2:	1d c1       	rjmp	.+570    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	9a 81       	ldd	r25, Y+2	; 0x02
    12b8:	80 32       	cpi	r24, 0x20	; 32
    12ba:	23 e0       	ldi	r18, 0x03	; 3
    12bc:	92 07       	cpc	r25, r18
    12be:	29 f4       	brne	.+10     	; 0x12ca <sysclk_enable_peripheral_clock+0xde>
    12c0:	64 e0       	ldi	r22, 0x04	; 4
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	7f db       	rcall	.-2306   	; 0x9c6 <sysclk_enable_module>
    12c8:	12 c1       	rjmp	.+548    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	9a 81       	ldd	r25, Y+2	; 0x02
    12ce:	81 15       	cp	r24, r1
    12d0:	28 e0       	ldi	r18, 0x08	; 8
    12d2:	92 07       	cpc	r25, r18
    12d4:	29 f4       	brne	.+10     	; 0x12e0 <sysclk_enable_peripheral_clock+0xf4>
    12d6:	61 e0       	ldi	r22, 0x01	; 1
    12d8:	83 e0       	ldi	r24, 0x03	; 3
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	74 db       	rcall	.-2328   	; 0x9c6 <sysclk_enable_module>
    12de:	07 c1       	rjmp	.+526    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	9a 81       	ldd	r25, Y+2	; 0x02
    12e4:	81 15       	cp	r24, r1
    12e6:	29 e0       	ldi	r18, 0x09	; 9
    12e8:	92 07       	cpc	r25, r18
    12ea:	29 f4       	brne	.+10     	; 0x12f6 <sysclk_enable_peripheral_clock+0x10a>
    12ec:	61 e0       	ldi	r22, 0x01	; 1
    12ee:	84 e0       	ldi	r24, 0x04	; 4
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	69 db       	rcall	.-2350   	; 0x9c6 <sysclk_enable_module>
    12f4:	fc c0       	rjmp	.+504    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	9a 81       	ldd	r25, Y+2	; 0x02
    12fa:	81 15       	cp	r24, r1
    12fc:	2a e0       	ldi	r18, 0x0A	; 10
    12fe:	92 07       	cpc	r25, r18
    1300:	29 f4       	brne	.+10     	; 0x130c <sysclk_enable_peripheral_clock+0x120>
    1302:	61 e0       	ldi	r22, 0x01	; 1
    1304:	85 e0       	ldi	r24, 0x05	; 5
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	5e db       	rcall	.-2372   	; 0x9c6 <sysclk_enable_module>
    130a:	f1 c0       	rjmp	.+482    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	9a 81       	ldd	r25, Y+2	; 0x02
    1310:	81 15       	cp	r24, r1
    1312:	2b e0       	ldi	r18, 0x0B	; 11
    1314:	92 07       	cpc	r25, r18
    1316:	29 f4       	brne	.+10     	; 0x1322 <sysclk_enable_peripheral_clock+0x136>
    1318:	61 e0       	ldi	r22, 0x01	; 1
    131a:	86 e0       	ldi	r24, 0x06	; 6
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	53 db       	rcall	.-2394   	; 0x9c6 <sysclk_enable_module>
    1320:	e6 c0       	rjmp	.+460    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	9a 81       	ldd	r25, Y+2	; 0x02
    1326:	80 34       	cpi	r24, 0x40	; 64
    1328:	28 e0       	ldi	r18, 0x08	; 8
    132a:	92 07       	cpc	r25, r18
    132c:	29 f4       	brne	.+10     	; 0x1338 <sysclk_enable_peripheral_clock+0x14c>
    132e:	62 e0       	ldi	r22, 0x02	; 2
    1330:	83 e0       	ldi	r24, 0x03	; 3
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	48 db       	rcall	.-2416   	; 0x9c6 <sysclk_enable_module>
    1336:	db c0       	rjmp	.+438    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	9a 81       	ldd	r25, Y+2	; 0x02
    133c:	80 34       	cpi	r24, 0x40	; 64
    133e:	29 e0       	ldi	r18, 0x09	; 9
    1340:	92 07       	cpc	r25, r18
    1342:	29 f4       	brne	.+10     	; 0x134e <sysclk_enable_peripheral_clock+0x162>
    1344:	62 e0       	ldi	r22, 0x02	; 2
    1346:	84 e0       	ldi	r24, 0x04	; 4
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	3d db       	rcall	.-2438   	; 0x9c6 <sysclk_enable_module>
    134c:	d0 c0       	rjmp	.+416    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	9a 81       	ldd	r25, Y+2	; 0x02
    1352:	80 34       	cpi	r24, 0x40	; 64
    1354:	2a e0       	ldi	r18, 0x0A	; 10
    1356:	92 07       	cpc	r25, r18
    1358:	29 f4       	brne	.+10     	; 0x1364 <sysclk_enable_peripheral_clock+0x178>
    135a:	62 e0       	ldi	r22, 0x02	; 2
    135c:	85 e0       	ldi	r24, 0x05	; 5
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	32 db       	rcall	.-2460   	; 0x9c6 <sysclk_enable_module>
    1362:	c5 c0       	rjmp	.+394    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	9a 81       	ldd	r25, Y+2	; 0x02
    1368:	80 39       	cpi	r24, 0x90	; 144
    136a:	28 e0       	ldi	r18, 0x08	; 8
    136c:	92 07       	cpc	r25, r18
    136e:	29 f4       	brne	.+10     	; 0x137a <sysclk_enable_peripheral_clock+0x18e>
    1370:	64 e0       	ldi	r22, 0x04	; 4
    1372:	83 e0       	ldi	r24, 0x03	; 3
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	27 db       	rcall	.-2482   	; 0x9c6 <sysclk_enable_module>
    1378:	ba c0       	rjmp	.+372    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	80 39       	cpi	r24, 0x90	; 144
    1380:	29 e0       	ldi	r18, 0x09	; 9
    1382:	92 07       	cpc	r25, r18
    1384:	29 f4       	brne	.+10     	; 0x1390 <sysclk_enable_peripheral_clock+0x1a4>
    1386:	64 e0       	ldi	r22, 0x04	; 4
    1388:	84 e0       	ldi	r24, 0x04	; 4
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	1c db       	rcall	.-2504   	; 0x9c6 <sysclk_enable_module>
    138e:	af c0       	rjmp	.+350    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	9a 81       	ldd	r25, Y+2	; 0x02
    1394:	80 39       	cpi	r24, 0x90	; 144
    1396:	2a e0       	ldi	r18, 0x0A	; 10
    1398:	92 07       	cpc	r25, r18
    139a:	29 f4       	brne	.+10     	; 0x13a6 <sysclk_enable_peripheral_clock+0x1ba>
    139c:	64 e0       	ldi	r22, 0x04	; 4
    139e:	85 e0       	ldi	r24, 0x05	; 5
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	11 db       	rcall	.-2526   	; 0x9c6 <sysclk_enable_module>
    13a4:	a4 c0       	rjmp	.+328    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	9a 81       	ldd	r25, Y+2	; 0x02
    13aa:	80 39       	cpi	r24, 0x90	; 144
    13ac:	2b e0       	ldi	r18, 0x0B	; 11
    13ae:	92 07       	cpc	r25, r18
    13b0:	29 f4       	brne	.+10     	; 0x13bc <sysclk_enable_peripheral_clock+0x1d0>
    13b2:	64 e0       	ldi	r22, 0x04	; 4
    13b4:	86 e0       	ldi	r24, 0x06	; 6
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	06 db       	rcall	.-2548   	; 0x9c6 <sysclk_enable_module>
    13ba:	99 c0       	rjmp	.+306    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	9a 81       	ldd	r25, Y+2	; 0x02
    13c0:	80 3c       	cpi	r24, 0xC0	; 192
    13c2:	28 e0       	ldi	r18, 0x08	; 8
    13c4:	92 07       	cpc	r25, r18
    13c6:	29 f4       	brne	.+10     	; 0x13d2 <sysclk_enable_peripheral_clock+0x1e6>
    13c8:	68 e0       	ldi	r22, 0x08	; 8
    13ca:	83 e0       	ldi	r24, 0x03	; 3
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	fb da       	rcall	.-2570   	; 0x9c6 <sysclk_enable_module>
    13d0:	8e c0       	rjmp	.+284    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	9a 81       	ldd	r25, Y+2	; 0x02
    13d6:	80 3c       	cpi	r24, 0xC0	; 192
    13d8:	29 e0       	ldi	r18, 0x09	; 9
    13da:	92 07       	cpc	r25, r18
    13dc:	29 f4       	brne	.+10     	; 0x13e8 <sysclk_enable_peripheral_clock+0x1fc>
    13de:	68 e0       	ldi	r22, 0x08	; 8
    13e0:	84 e0       	ldi	r24, 0x04	; 4
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	f0 da       	rcall	.-2592   	; 0x9c6 <sysclk_enable_module>
    13e6:	83 c0       	rjmp	.+262    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	9a 81       	ldd	r25, Y+2	; 0x02
    13ec:	80 3c       	cpi	r24, 0xC0	; 192
    13ee:	2a e0       	ldi	r18, 0x0A	; 10
    13f0:	92 07       	cpc	r25, r18
    13f2:	29 f4       	brne	.+10     	; 0x13fe <sysclk_enable_peripheral_clock+0x212>
    13f4:	68 e0       	ldi	r22, 0x08	; 8
    13f6:	85 e0       	ldi	r24, 0x05	; 5
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	e5 da       	rcall	.-2614   	; 0x9c6 <sysclk_enable_module>
    13fc:	78 c0       	rjmp	.+240    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	9a 81       	ldd	r25, Y+2	; 0x02
    1402:	80 3c       	cpi	r24, 0xC0	; 192
    1404:	2b e0       	ldi	r18, 0x0B	; 11
    1406:	92 07       	cpc	r25, r18
    1408:	29 f4       	brne	.+10     	; 0x1414 <sysclk_enable_peripheral_clock+0x228>
    140a:	68 e0       	ldi	r22, 0x08	; 8
    140c:	86 e0       	ldi	r24, 0x06	; 6
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	da da       	rcall	.-2636   	; 0x9c6 <sysclk_enable_module>
    1412:	6d c0       	rjmp	.+218    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	9a 81       	ldd	r25, Y+2	; 0x02
    1418:	80 3a       	cpi	r24, 0xA0	; 160
    141a:	28 e0       	ldi	r18, 0x08	; 8
    141c:	92 07       	cpc	r25, r18
    141e:	29 f4       	brne	.+10     	; 0x142a <sysclk_enable_peripheral_clock+0x23e>
    1420:	60 e1       	ldi	r22, 0x10	; 16
    1422:	83 e0       	ldi	r24, 0x03	; 3
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	cf da       	rcall	.-2658   	; 0x9c6 <sysclk_enable_module>
    1428:	62 c0       	rjmp	.+196    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	9a 81       	ldd	r25, Y+2	; 0x02
    142e:	80 3a       	cpi	r24, 0xA0	; 160
    1430:	29 e0       	ldi	r18, 0x09	; 9
    1432:	92 07       	cpc	r25, r18
    1434:	29 f4       	brne	.+10     	; 0x1440 <sysclk_enable_peripheral_clock+0x254>
    1436:	60 e1       	ldi	r22, 0x10	; 16
    1438:	84 e0       	ldi	r24, 0x04	; 4
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	c4 da       	rcall	.-2680   	; 0x9c6 <sysclk_enable_module>
    143e:	57 c0       	rjmp	.+174    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	80 3a       	cpi	r24, 0xA0	; 160
    1446:	2a e0       	ldi	r18, 0x0A	; 10
    1448:	92 07       	cpc	r25, r18
    144a:	29 f4       	brne	.+10     	; 0x1456 <sysclk_enable_peripheral_clock+0x26a>
    144c:	60 e1       	ldi	r22, 0x10	; 16
    144e:	85 e0       	ldi	r24, 0x05	; 5
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	b9 da       	rcall	.-2702   	; 0x9c6 <sysclk_enable_module>
    1454:	4c c0       	rjmp	.+152    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	9a 81       	ldd	r25, Y+2	; 0x02
    145a:	80 3a       	cpi	r24, 0xA0	; 160
    145c:	2b e0       	ldi	r18, 0x0B	; 11
    145e:	92 07       	cpc	r25, r18
    1460:	29 f4       	brne	.+10     	; 0x146c <sysclk_enable_peripheral_clock+0x280>
    1462:	60 e1       	ldi	r22, 0x10	; 16
    1464:	86 e0       	ldi	r24, 0x06	; 6
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	ae da       	rcall	.-2724   	; 0x9c6 <sysclk_enable_module>
    146a:	41 c0       	rjmp	.+130    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	9a 81       	ldd	r25, Y+2	; 0x02
    1470:	80 3b       	cpi	r24, 0xB0	; 176
    1472:	28 e0       	ldi	r18, 0x08	; 8
    1474:	92 07       	cpc	r25, r18
    1476:	29 f4       	brne	.+10     	; 0x1482 <sysclk_enable_peripheral_clock+0x296>
    1478:	60 e2       	ldi	r22, 0x20	; 32
    147a:	83 e0       	ldi	r24, 0x03	; 3
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	a3 da       	rcall	.-2746   	; 0x9c6 <sysclk_enable_module>
    1480:	36 c0       	rjmp	.+108    	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	9a 81       	ldd	r25, Y+2	; 0x02
    1486:	80 3b       	cpi	r24, 0xB0	; 176
    1488:	29 e0       	ldi	r18, 0x09	; 9
    148a:	92 07       	cpc	r25, r18
    148c:	29 f4       	brne	.+10     	; 0x1498 <sysclk_enable_peripheral_clock+0x2ac>
    148e:	60 e2       	ldi	r22, 0x20	; 32
    1490:	84 e0       	ldi	r24, 0x04	; 4
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	98 da       	rcall	.-2768   	; 0x9c6 <sysclk_enable_module>
    1496:	2b c0       	rjmp	.+86     	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	9a 81       	ldd	r25, Y+2	; 0x02
    149c:	80 3b       	cpi	r24, 0xB0	; 176
    149e:	2a e0       	ldi	r18, 0x0A	; 10
    14a0:	92 07       	cpc	r25, r18
    14a2:	29 f4       	brne	.+10     	; 0x14ae <sysclk_enable_peripheral_clock+0x2c2>
    14a4:	60 e2       	ldi	r22, 0x20	; 32
    14a6:	85 e0       	ldi	r24, 0x05	; 5
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	8d da       	rcall	.-2790   	; 0x9c6 <sysclk_enable_module>
    14ac:	20 c0       	rjmp	.+64     	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	9a 81       	ldd	r25, Y+2	; 0x02
    14b2:	80 3b       	cpi	r24, 0xB0	; 176
    14b4:	2b e0       	ldi	r18, 0x0B	; 11
    14b6:	92 07       	cpc	r25, r18
    14b8:	29 f4       	brne	.+10     	; 0x14c4 <sysclk_enable_peripheral_clock+0x2d8>
    14ba:	60 e2       	ldi	r22, 0x20	; 32
    14bc:	86 e0       	ldi	r24, 0x06	; 6
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	82 da       	rcall	.-2812   	; 0x9c6 <sysclk_enable_module>
    14c2:	15 c0       	rjmp	.+42     	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	9a 81       	ldd	r25, Y+2	; 0x02
    14c8:	80 38       	cpi	r24, 0x80	; 128
    14ca:	24 e0       	ldi	r18, 0x04	; 4
    14cc:	92 07       	cpc	r25, r18
    14ce:	29 f4       	brne	.+10     	; 0x14da <sysclk_enable_peripheral_clock+0x2ee>
    14d0:	60 e4       	ldi	r22, 0x40	; 64
    14d2:	83 e0       	ldi	r24, 0x03	; 3
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	77 da       	rcall	.-2834   	; 0x9c6 <sysclk_enable_module>
    14d8:	0a c0       	rjmp	.+20     	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	9a 81       	ldd	r25, Y+2	; 0x02
    14de:	80 3a       	cpi	r24, 0xA0	; 160
    14e0:	24 e0       	ldi	r18, 0x04	; 4
    14e2:	92 07       	cpc	r25, r18
    14e4:	21 f4       	brne	.+8      	; 0x14ee <sysclk_enable_peripheral_clock+0x302>
    14e6:	60 e4       	ldi	r22, 0x40	; 64
    14e8:	85 e0       	ldi	r24, 0x05	; 5
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	6c da       	rcall	.-2856   	; 0x9c6 <sysclk_enable_module>
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	08 95       	ret

000014f8 <__iCliRetVal>:
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	f8 94       	cli
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	08 95       	ret

0000150a <__iRestore>:
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	1f 92       	push	r1
    1510:	1f 92       	push	r1
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	89 83       	std	Y+1, r24	; 0x01
    1518:	9a 83       	std	Y+2, r25	; 0x02
    151a:	8f e3       	ldi	r24, 0x3F	; 63
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	29 81       	ldd	r18, Y+1	; 0x01
    1520:	3a 81       	ldd	r19, Y+2	; 0x02
    1522:	f9 01       	movw	r30, r18
    1524:	20 81       	ld	r18, Z
    1526:	fc 01       	movw	r30, r24
    1528:	20 83       	st	Z, r18
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	08 95       	ret

00001534 <RingBuffer_InitBuffer>:
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	00 d0       	rcall	.+0      	; 0x153a <RingBuffer_InitBuffer+0x6>
    153a:	1f 92       	push	r1
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	8b 83       	std	Y+3, r24	; 0x03
    1542:	9c 83       	std	Y+4, r25	; 0x04
    1544:	8f e3       	ldi	r24, 0x3F	; 63
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	fc 01       	movw	r30, r24
    154a:	80 81       	ld	r24, Z
    154c:	8a 83       	std	Y+2, r24	; 0x02
    154e:	d4 df       	rcall	.-88     	; 0x14f8 <__iCliRetVal>
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	19 c0       	rjmp	.+50     	; 0x1586 <RingBuffer_InitBuffer+0x52>
    1554:	2b 81       	ldd	r18, Y+3	; 0x03
    1556:	3c 81       	ldd	r19, Y+4	; 0x04
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	9c 81       	ldd	r25, Y+4	; 0x04
    155c:	80 5c       	subi	r24, 0xC0	; 192
    155e:	9f 4f       	sbci	r25, 0xFF	; 255
    1560:	fc 01       	movw	r30, r24
    1562:	20 83       	st	Z, r18
    1564:	31 83       	std	Z+1, r19	; 0x01
    1566:	2b 81       	ldd	r18, Y+3	; 0x03
    1568:	3c 81       	ldd	r19, Y+4	; 0x04
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	8e 5b       	subi	r24, 0xBE	; 190
    1570:	9f 4f       	sbci	r25, 0xFF	; 255
    1572:	fc 01       	movw	r30, r24
    1574:	20 83       	st	Z, r18
    1576:	31 83       	std	Z+1, r19	; 0x01
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	8c 5b       	subi	r24, 0xBC	; 188
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	fc 01       	movw	r30, r24
    1582:	10 82       	st	Z, r1
    1584:	19 82       	std	Y+1, r1	; 0x01
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	88 23       	and	r24, r24
    158a:	21 f7       	brne	.-56     	; 0x1554 <RingBuffer_InitBuffer+0x20>
    158c:	ce 01       	movw	r24, r28
    158e:	02 96       	adiw	r24, 0x02	; 2
    1590:	bc df       	rcall	.-136    	; 0x150a <__iRestore>
    1592:	24 96       	adiw	r28, 0x04	; 4
    1594:	cd bf       	out	0x3d, r28	; 61
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	08 95       	ret

0000159e <Queue_RingBuffer_InitBuffer>:
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <Queue_RingBuffer_InitBuffer+0x6>
    15a4:	1f 92       	push	r1
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	8b 83       	std	Y+3, r24	; 0x03
    15ac:	9c 83       	std	Y+4, r25	; 0x04
    15ae:	8f e3       	ldi	r24, 0x3F	; 63
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	fc 01       	movw	r30, r24
    15b4:	80 81       	ld	r24, Z
    15b6:	8a 83       	std	Y+2, r24	; 0x02
    15b8:	9f df       	rcall	.-194    	; 0x14f8 <__iCliRetVal>
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	13 c0       	rjmp	.+38     	; 0x15e4 <Queue_RingBuffer_InitBuffer+0x46>
    15be:	2b 81       	ldd	r18, Y+3	; 0x03
    15c0:	3c 81       	ldd	r19, Y+4	; 0x04
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	fc 01       	movw	r30, r24
    15c8:	22 87       	std	Z+10, r18	; 0x0a
    15ca:	33 87       	std	Z+11, r19	; 0x0b
    15cc:	2b 81       	ldd	r18, Y+3	; 0x03
    15ce:	3c 81       	ldd	r19, Y+4	; 0x04
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	fc 01       	movw	r30, r24
    15d6:	24 87       	std	Z+12, r18	; 0x0c
    15d8:	35 87       	std	Z+13, r19	; 0x0d
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	9c 81       	ldd	r25, Y+4	; 0x04
    15de:	fc 01       	movw	r30, r24
    15e0:	16 86       	std	Z+14, r1	; 0x0e
    15e2:	19 82       	std	Y+1, r1	; 0x01
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	88 23       	and	r24, r24
    15e8:	51 f7       	brne	.-44     	; 0x15be <Queue_RingBuffer_InitBuffer+0x20>
    15ea:	ce 01       	movw	r24, r28
    15ec:	02 96       	adiw	r24, 0x02	; 2
    15ee:	8d df       	rcall	.-230    	; 0x150a <__iRestore>
    15f0:	24 96       	adiw	r28, 0x04	; 4
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	08 95       	ret

000015fc <RingBuffer_GetCount>:
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	25 97       	sbiw	r28, 0x05	; 5
    1606:	cd bf       	out	0x3d, r28	; 61
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	8c 83       	std	Y+4, r24	; 0x04
    160c:	9d 83       	std	Y+5, r25	; 0x05
    160e:	8f e3       	ldi	r24, 0x3F	; 63
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	fc 01       	movw	r30, r24
    1614:	80 81       	ld	r24, Z
    1616:	8b 83       	std	Y+3, r24	; 0x03
    1618:	6f df       	rcall	.-290    	; 0x14f8 <__iCliRetVal>
    161a:	8a 83       	std	Y+2, r24	; 0x02
    161c:	08 c0       	rjmp	.+16     	; 0x162e <RingBuffer_GetCount+0x32>
    161e:	8c 81       	ldd	r24, Y+4	; 0x04
    1620:	9d 81       	ldd	r25, Y+5	; 0x05
    1622:	8c 5b       	subi	r24, 0xBC	; 188
    1624:	9f 4f       	sbci	r25, 0xFF	; 255
    1626:	fc 01       	movw	r30, r24
    1628:	80 81       	ld	r24, Z
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	1a 82       	std	Y+2, r1	; 0x02
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	88 23       	and	r24, r24
    1632:	a9 f7       	brne	.-22     	; 0x161e <RingBuffer_GetCount+0x22>
    1634:	ce 01       	movw	r24, r28
    1636:	03 96       	adiw	r24, 0x03	; 3
    1638:	68 df       	rcall	.-304    	; 0x150a <__iRestore>
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	25 96       	adiw	r28, 0x05	; 5
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	08 95       	ret

00001648 <RingBuffer_IsEmpty>:
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	1f 92       	push	r1
    164e:	1f 92       	push	r1
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	89 83       	std	Y+1, r24	; 0x01
    1656:	9a 83       	std	Y+2, r25	; 0x02
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	9a 81       	ldd	r25, Y+2	; 0x02
    165c:	cf df       	rcall	.-98     	; 0x15fc <RingBuffer_GetCount>
    165e:	98 2f       	mov	r25, r24
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	99 23       	and	r25, r25
    1664:	09 f0       	breq	.+2      	; 0x1668 <RingBuffer_IsEmpty+0x20>
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	08 95       	ret

00001672 <Queue_RingBuffer_Insert>:
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	25 97       	sbiw	r28, 0x05	; 5
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	8b 83       	std	Y+3, r24	; 0x03
    1682:	9c 83       	std	Y+4, r25	; 0x04
    1684:	6d 83       	std	Y+5, r22	; 0x05
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	fc 01       	movw	r30, r24
    168c:	82 85       	ldd	r24, Z+10	; 0x0a
    168e:	93 85       	ldd	r25, Z+11	; 0x0b
    1690:	2d 81       	ldd	r18, Y+5	; 0x05
    1692:	fc 01       	movw	r30, r24
    1694:	20 83       	st	Z, r18
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	9c 81       	ldd	r25, Y+4	; 0x04
    169a:	fc 01       	movw	r30, r24
    169c:	82 85       	ldd	r24, Z+10	; 0x0a
    169e:	93 85       	ldd	r25, Z+11	; 0x0b
    16a0:	9c 01       	movw	r18, r24
    16a2:	2f 5f       	subi	r18, 0xFF	; 255
    16a4:	3f 4f       	sbci	r19, 0xFF	; 255
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	9c 81       	ldd	r25, Y+4	; 0x04
    16aa:	fc 01       	movw	r30, r24
    16ac:	22 87       	std	Z+10, r18	; 0x0a
    16ae:	33 87       	std	Z+11, r19	; 0x0b
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	fc 01       	movw	r30, r24
    16b6:	22 85       	ldd	r18, Z+10	; 0x0a
    16b8:	33 85       	ldd	r19, Z+11	; 0x0b
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	9c 81       	ldd	r25, Y+4	; 0x04
    16be:	0a 96       	adiw	r24, 0x0a	; 10
    16c0:	28 17       	cp	r18, r24
    16c2:	39 07       	cpc	r19, r25
    16c4:	39 f4       	brne	.+14     	; 0x16d4 <Queue_RingBuffer_Insert+0x62>
    16c6:	2b 81       	ldd	r18, Y+3	; 0x03
    16c8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9c 81       	ldd	r25, Y+4	; 0x04
    16ce:	fc 01       	movw	r30, r24
    16d0:	22 87       	std	Z+10, r18	; 0x0a
    16d2:	33 87       	std	Z+11, r19	; 0x0b
    16d4:	8f e3       	ldi	r24, 0x3F	; 63
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	fc 01       	movw	r30, r24
    16da:	80 81       	ld	r24, Z
    16dc:	8a 83       	std	Y+2, r24	; 0x02
    16de:	0c df       	rcall	.-488    	; 0x14f8 <__iCliRetVal>
    16e0:	89 83       	std	Y+1, r24	; 0x01
    16e2:	0b c0       	rjmp	.+22     	; 0x16fa <Queue_RingBuffer_Insert+0x88>
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	9c 81       	ldd	r25, Y+4	; 0x04
    16e8:	fc 01       	movw	r30, r24
    16ea:	86 85       	ldd	r24, Z+14	; 0x0e
    16ec:	28 2f       	mov	r18, r24
    16ee:	2f 5f       	subi	r18, 0xFF	; 255
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	fc 01       	movw	r30, r24
    16f6:	26 87       	std	Z+14, r18	; 0x0e
    16f8:	19 82       	std	Y+1, r1	; 0x01
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	88 23       	and	r24, r24
    16fe:	91 f7       	brne	.-28     	; 0x16e4 <Queue_RingBuffer_Insert+0x72>
    1700:	ce 01       	movw	r24, r28
    1702:	02 96       	adiw	r24, 0x02	; 2
    1704:	02 df       	rcall	.-508    	; 0x150a <__iRestore>
    1706:	25 96       	adiw	r28, 0x05	; 5
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	08 95       	ret

00001712 <RingBuffer_Remove>:
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	25 97       	sbiw	r28, 0x05	; 5
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	8c 83       	std	Y+4, r24	; 0x04
    1722:	9d 83       	std	Y+5, r25	; 0x05
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
    1726:	9d 81       	ldd	r25, Y+5	; 0x05
    1728:	8e 5b       	subi	r24, 0xBE	; 190
    172a:	9f 4f       	sbci	r25, 0xFF	; 255
    172c:	fc 01       	movw	r30, r24
    172e:	80 81       	ld	r24, Z
    1730:	91 81       	ldd	r25, Z+1	; 0x01
    1732:	fc 01       	movw	r30, r24
    1734:	80 81       	ld	r24, Z
    1736:	8a 83       	std	Y+2, r24	; 0x02
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	8e 5b       	subi	r24, 0xBE	; 190
    173e:	9f 4f       	sbci	r25, 0xFF	; 255
    1740:	fc 01       	movw	r30, r24
    1742:	80 81       	ld	r24, Z
    1744:	91 81       	ldd	r25, Z+1	; 0x01
    1746:	9c 01       	movw	r18, r24
    1748:	2f 5f       	subi	r18, 0xFF	; 255
    174a:	3f 4f       	sbci	r19, 0xFF	; 255
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	8e 5b       	subi	r24, 0xBE	; 190
    1752:	9f 4f       	sbci	r25, 0xFF	; 255
    1754:	fc 01       	movw	r30, r24
    1756:	20 83       	st	Z, r18
    1758:	31 83       	std	Z+1, r19	; 0x01
    175a:	8c 81       	ldd	r24, Y+4	; 0x04
    175c:	9d 81       	ldd	r25, Y+5	; 0x05
    175e:	8e 5b       	subi	r24, 0xBE	; 190
    1760:	9f 4f       	sbci	r25, 0xFF	; 255
    1762:	fc 01       	movw	r30, r24
    1764:	20 81       	ld	r18, Z
    1766:	31 81       	ldd	r19, Z+1	; 0x01
    1768:	8c 81       	ldd	r24, Y+4	; 0x04
    176a:	9d 81       	ldd	r25, Y+5	; 0x05
    176c:	80 5c       	subi	r24, 0xC0	; 192
    176e:	9f 4f       	sbci	r25, 0xFF	; 255
    1770:	28 17       	cp	r18, r24
    1772:	39 07       	cpc	r19, r25
    1774:	49 f4       	brne	.+18     	; 0x1788 <RingBuffer_Remove+0x76>
    1776:	2c 81       	ldd	r18, Y+4	; 0x04
    1778:	3d 81       	ldd	r19, Y+5	; 0x05
    177a:	8c 81       	ldd	r24, Y+4	; 0x04
    177c:	9d 81       	ldd	r25, Y+5	; 0x05
    177e:	8e 5b       	subi	r24, 0xBE	; 190
    1780:	9f 4f       	sbci	r25, 0xFF	; 255
    1782:	fc 01       	movw	r30, r24
    1784:	20 83       	st	Z, r18
    1786:	31 83       	std	Z+1, r19	; 0x01
    1788:	8f e3       	ldi	r24, 0x3F	; 63
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	fc 01       	movw	r30, r24
    178e:	80 81       	ld	r24, Z
    1790:	8b 83       	std	Y+3, r24	; 0x03
    1792:	b2 de       	rcall	.-668    	; 0x14f8 <__iCliRetVal>
    1794:	89 83       	std	Y+1, r24	; 0x01
    1796:	0f c0       	rjmp	.+30     	; 0x17b6 <RingBuffer_Remove+0xa4>
    1798:	8c 81       	ldd	r24, Y+4	; 0x04
    179a:	9d 81       	ldd	r25, Y+5	; 0x05
    179c:	8c 5b       	subi	r24, 0xBC	; 188
    179e:	9f 4f       	sbci	r25, 0xFF	; 255
    17a0:	fc 01       	movw	r30, r24
    17a2:	80 81       	ld	r24, Z
    17a4:	28 2f       	mov	r18, r24
    17a6:	21 50       	subi	r18, 0x01	; 1
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	9d 81       	ldd	r25, Y+5	; 0x05
    17ac:	8c 5b       	subi	r24, 0xBC	; 188
    17ae:	9f 4f       	sbci	r25, 0xFF	; 255
    17b0:	fc 01       	movw	r30, r24
    17b2:	20 83       	st	Z, r18
    17b4:	19 82       	std	Y+1, r1	; 0x01
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	88 23       	and	r24, r24
    17ba:	71 f7       	brne	.-36     	; 0x1798 <RingBuffer_Remove+0x86>
    17bc:	ce 01       	movw	r24, r28
    17be:	03 96       	adiw	r24, 0x03	; 3
    17c0:	a4 de       	rcall	.-696    	; 0x150a <__iRestore>
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	25 96       	adiw	r28, 0x05	; 5
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	de bf       	out	0x3e, r29	; 62
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	08 95       	ret

000017d0 <memory_init>:
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	8b e4       	ldi	r24, 0x4B	; 75
    17da:	98 e2       	ldi	r25, 0x28	; 40
    17dc:	ab de       	rcall	.-682    	; 0x1534 <RingBuffer_InitBuffer>
    17de:	88 e3       	ldi	r24, 0x38	; 56
    17e0:	98 e2       	ldi	r25, 0x28	; 40
    17e2:	dd de       	rcall	.-582    	; 0x159e <Queue_RingBuffer_InitBuffer>
    17e4:	80 ea       	ldi	r24, 0xA0	; 160
    17e6:	9a e0       	ldi	r25, 0x0A	; 10
    17e8:	80 93 47 28 	sts	0x2847, r24
    17ec:	90 93 48 28 	sts	0x2848, r25
    17f0:	80 e1       	ldi	r24, 0x10	; 16
    17f2:	91 e0       	ldi	r25, 0x01	; 1
    17f4:	80 93 49 28 	sts	0x2849, r24
    17f8:	90 93 4a 28 	sts	0x284A, r25
    17fc:	82 ed       	ldi	r24, 0xD2	; 210
    17fe:	97 e2       	ldi	r25, 0x27	; 39
    1800:	80 93 9a 28 	sts	0x289A, r24
    1804:	90 93 9b 28 	sts	0x289B, r25
    1808:	84 e6       	ldi	r24, 0x64	; 100
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	80 93 9c 28 	sts	0x289C, r24
    1810:	90 93 9d 28 	sts	0x289D, r25
    1814:	8f e5       	ldi	r24, 0x5F	; 95
    1816:	95 e2       	ldi	r25, 0x25	; 37
    1818:	80 93 9e 28 	sts	0x289E, r24
    181c:	90 93 9f 28 	sts	0x289F, r25
    1820:	88 e0       	ldi	r24, 0x08	; 8
    1822:	92 e0       	ldi	r25, 0x02	; 2
    1824:	80 93 a0 28 	sts	0x28A0, r24
    1828:	90 93 a1 28 	sts	0x28A1, r25
    182c:	8b e0       	ldi	r24, 0x0B	; 11
    182e:	80 93 a8 28 	sts	0x28A8, r24
    1832:	84 e7       	ldi	r24, 0x74	; 116
    1834:	91 e2       	ldi	r25, 0x21	; 33
    1836:	7e de       	rcall	.-772    	; 0x1534 <RingBuffer_InitBuffer>
    1838:	80 ea       	ldi	r24, 0xA0	; 160
    183a:	98 e0       	ldi	r25, 0x08	; 8
    183c:	80 93 70 21 	sts	0x2170, r24
    1840:	90 93 71 21 	sts	0x2171, r25
    1844:	80 e2       	ldi	r24, 0x20	; 32
    1846:	91 e0       	ldi	r25, 0x01	; 1
    1848:	80 93 72 21 	sts	0x2172, r24
    184c:	90 93 73 21 	sts	0x2173, r25
    1850:	8a ee       	ldi	r24, 0xEA	; 234
    1852:	93 e2       	ldi	r25, 0x23	; 35
    1854:	80 93 c3 21 	sts	0x21C3, r24
    1858:	90 93 c4 21 	sts	0x21C4, r25
    185c:	8e e6       	ldi	r24, 0x6E	; 110
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	80 93 c5 21 	sts	0x21C5, r24
    1864:	90 93 c6 21 	sts	0x21C6, r25
    1868:	87 ee       	ldi	r24, 0xE7	; 231
    186a:	9b e2       	ldi	r25, 0x2B	; 43
    186c:	80 93 c7 21 	sts	0x21C7, r24
    1870:	90 93 c8 21 	sts	0x21C8, r25
    1874:	88 ec       	ldi	r24, 0xC8	; 200
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	80 93 c9 21 	sts	0x21C9, r24
    187c:	90 93 ca 21 	sts	0x21CA, r25
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	80 93 d1 21 	sts	0x21D1, r24
    1886:	85 e0       	ldi	r24, 0x05	; 5
    1888:	90 e2       	ldi	r25, 0x20	; 32
    188a:	54 de       	rcall	.-856    	; 0x1534 <RingBuffer_InitBuffer>
    188c:	80 eb       	ldi	r24, 0xB0	; 176
    188e:	98 e0       	ldi	r25, 0x08	; 8
    1890:	80 93 01 20 	sts	0x2001, r24
    1894:	90 93 02 20 	sts	0x2002, r25
    1898:	8d e8       	ldi	r24, 0x8D	; 141
    189a:	9b e2       	ldi	r25, 0x2B	; 43
    189c:	80 93 54 20 	sts	0x2054, r24
    18a0:	90 93 55 20 	sts	0x2055, r25
    18a4:	8a e5       	ldi	r24, 0x5A	; 90
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	80 93 56 20 	sts	0x2056, r24
    18ac:	90 93 57 20 	sts	0x2057, r25
    18b0:	86 e0       	ldi	r24, 0x06	; 6
    18b2:	80 93 62 20 	sts	0x2062, r24
    18b6:	8b e6       	ldi	r24, 0x6B	; 107
    18b8:	97 e2       	ldi	r25, 0x27	; 39
    18ba:	3c de       	rcall	.-904    	; 0x1534 <RingBuffer_InitBuffer>
    18bc:	80 e5       	ldi	r24, 0x50	; 80
    18be:	95 e2       	ldi	r25, 0x25	; 37
    18c0:	6e de       	rcall	.-804    	; 0x159e <Queue_RingBuffer_InitBuffer>
    18c2:	80 eb       	ldi	r24, 0xB0	; 176
    18c4:	9a e0       	ldi	r25, 0x0A	; 10
    18c6:	80 93 67 27 	sts	0x2767, r24
    18ca:	90 93 68 27 	sts	0x2768, r25
    18ce:	80 e3       	ldi	r24, 0x30	; 48
    18d0:	91 e0       	ldi	r25, 0x01	; 1
    18d2:	80 93 69 27 	sts	0x2769, r24
    18d6:	90 93 6a 27 	sts	0x276A, r25
    18da:	8c ed       	ldi	r24, 0xDC	; 220
    18dc:	91 e2       	ldi	r25, 0x21	; 33
    18de:	80 93 ba 27 	sts	0x27BA, r24
    18e2:	90 93 bb 27 	sts	0x27BB, r25
    18e6:	8e e0       	ldi	r24, 0x0E	; 14
    18e8:	91 e0       	ldi	r25, 0x01	; 1
    18ea:	80 93 bc 27 	sts	0x27BC, r24
    18ee:	90 93 bd 27 	sts	0x27BD, r25
    18f2:	85 e8       	ldi	r24, 0x85	; 133
    18f4:	99 e2       	ldi	r25, 0x29	; 41
    18f6:	80 93 be 27 	sts	0x27BE, r24
    18fa:	90 93 bf 27 	sts	0x27BF, r25
    18fe:	88 e0       	ldi	r24, 0x08	; 8
    1900:	92 e0       	ldi	r25, 0x02	; 2
    1902:	80 93 c0 27 	sts	0x27C0, r24
    1906:	90 93 c1 27 	sts	0x27C1, r25
    190a:	85 e0       	ldi	r24, 0x05	; 5
    190c:	80 93 c8 27 	sts	0x27C8, r24
    1910:	8e e7       	ldi	r24, 0x7E	; 126
    1912:	94 e2       	ldi	r25, 0x24	; 36
    1914:	0f de       	rcall	.-994    	; 0x1534 <RingBuffer_InitBuffer>
    1916:	80 ea       	ldi	r24, 0xA0	; 160
    1918:	99 e0       	ldi	r25, 0x09	; 9
    191a:	80 93 7a 24 	sts	0x247A, r24
    191e:	90 93 7b 24 	sts	0x247B, r25
    1922:	80 e4       	ldi	r24, 0x40	; 64
    1924:	91 e0       	ldi	r25, 0x01	; 1
    1926:	80 93 7c 24 	sts	0x247C, r24
    192a:	90 93 7d 24 	sts	0x247D, r25
    192e:	8a ee       	ldi	r24, 0xEA	; 234
    1930:	92 e2       	ldi	r25, 0x22	; 34
    1932:	80 93 cd 24 	sts	0x24CD, r24
    1936:	90 93 ce 24 	sts	0x24CE, r25
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	91 e0       	ldi	r25, 0x01	; 1
    193e:	80 93 cf 24 	sts	0x24CF, r24
    1942:	90 93 d0 24 	sts	0x24D0, r25
    1946:	8f e6       	ldi	r24, 0x6F	; 111
    1948:	90 e2       	ldi	r25, 0x20	; 32
    194a:	80 93 d1 24 	sts	0x24D1, r24
    194e:	90 93 d2 24 	sts	0x24D2, r25
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	91 e0       	ldi	r25, 0x01	; 1
    1956:	80 93 d3 24 	sts	0x24D3, r24
    195a:	90 93 d4 24 	sts	0x24D4, r25
    195e:	88 e3       	ldi	r24, 0x38	; 56
    1960:	80 93 db 24 	sts	0x24DB, r24
    1964:	8a e0       	ldi	r24, 0x0A	; 10
    1966:	80 93 46 25 	sts	0x2546, r24
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	08 95       	ret

00001970 <dma_init>:
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	91 e0       	ldi	r25, 0x01	; 1
    197c:	37 dc       	rcall	.-1938   	; 0x11ec <sysclk_enable_peripheral_clock>
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	91 e0       	ldi	r25, 0x01	; 1
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	31 e0       	ldi	r19, 0x01	; 1
    1986:	f9 01       	movw	r30, r18
    1988:	20 81       	ld	r18, Z
    198a:	20 68       	ori	r18, 0x80	; 128
    198c:	fc 01       	movw	r30, r24
    198e:	20 83       	st	Z, r18
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	47 db       	rcall	.-2418   	; 0x1024 <DMA_SetPriority>
    1996:	80 91 49 28 	lds	r24, 0x2849
    199a:	90 91 4a 28 	lds	r25, 0x284A
    199e:	fc db       	rcall	.-2056   	; 0x1198 <DMA_EnableSingleShot>
    19a0:	80 91 49 28 	lds	r24, 0x2849
    19a4:	90 91 4a 28 	lds	r25, 0x284A
    19a8:	6c e8       	ldi	r22, 0x8C	; 140
    19aa:	0d dc       	rcall	.-2022   	; 0x11c6 <DMA_SetTriggerSource>
    19ac:	80 91 72 21 	lds	r24, 0x2172
    19b0:	90 91 73 21 	lds	r25, 0x2173
    19b4:	f1 db       	rcall	.-2078   	; 0x1198 <DMA_EnableSingleShot>
    19b6:	80 91 72 21 	lds	r24, 0x2172
    19ba:	90 91 73 21 	lds	r25, 0x2173
    19be:	6c e4       	ldi	r22, 0x4C	; 76
    19c0:	02 dc       	rcall	.-2044   	; 0x11c6 <DMA_SetTriggerSource>
    19c2:	80 91 69 27 	lds	r24, 0x2769
    19c6:	90 91 6a 27 	lds	r25, 0x276A
    19ca:	e6 db       	rcall	.-2100   	; 0x1198 <DMA_EnableSingleShot>
    19cc:	80 91 69 27 	lds	r24, 0x2769
    19d0:	90 91 6a 27 	lds	r25, 0x276A
    19d4:	6f e8       	ldi	r22, 0x8F	; 143
    19d6:	f7 db       	rcall	.-2066   	; 0x11c6 <DMA_SetTriggerSource>
    19d8:	80 91 7c 24 	lds	r24, 0x247C
    19dc:	90 91 7d 24 	lds	r25, 0x247D
    19e0:	db db       	rcall	.-2122   	; 0x1198 <DMA_EnableSingleShot>
    19e2:	80 91 7c 24 	lds	r24, 0x247C
    19e6:	90 91 7d 24 	lds	r25, 0x247D
    19ea:	6c e6       	ldi	r22, 0x6C	; 108
    19ec:	ec db       	rcall	.-2088   	; 0x11c6 <DMA_SetTriggerSource>
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	08 95       	ret

000019f4 <read_VCP_receive_buff>:
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	00 d0       	rcall	.+0      	; 0x19fa <read_VCP_receive_buff+0x6>
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	8a 83       	std	Y+2, r24	; 0x02
    1a00:	9b 83       	std	Y+3, r25	; 0x03
    1a02:	d9 c0       	rjmp	.+434    	; 0x1bb6 <read_VCP_receive_buff+0x1c2>
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	9b 81       	ldd	r25, Y+3	; 0x03
    1a08:	86 5b       	subi	r24, 0xB6	; 182
    1a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	80 81       	ld	r24, Z
    1a10:	91 81       	ldd	r25, Z+1	; 0x01
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	d9 f4       	brne	.+54     	; 0x1a4c <read_VCP_receive_buff+0x58>
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1a:	8b 5a       	subi	r24, 0xAB	; 171
    1a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1e:	fc 01       	movw	r30, r24
    1a20:	40 81       	ld	r20, Z
    1a22:	51 81       	ldd	r21, Z+1	; 0x01
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	9b 81       	ldd	r25, Y+3	; 0x03
    1a28:	8d 5a       	subi	r24, 0xAD	; 173
    1a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	20 81       	ld	r18, Z
    1a30:	31 81       	ldd	r19, Z+1	; 0x01
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	9b 81       	ldd	r25, Y+3	; 0x03
    1a36:	87 5b       	subi	r24, 0xB7	; 183
    1a38:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3a:	b9 01       	movw	r22, r18
    1a3c:	b4 d7       	rcall	.+3944   	; 0x29a6 <vcpptr_init>
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	9b 81       	ldd	r25, Y+3	; 0x03
    1a42:	84 5a       	subi	r24, 0xA4	; 164
    1a44:	9f 4f       	sbci	r25, 0xFF	; 255
    1a46:	fc 01       	movw	r30, r24
    1a48:	10 82       	st	Z, r1
    1a4a:	11 82       	std	Z+1, r1	; 0x01
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a50:	04 96       	adiw	r24, 0x04	; 4
    1a52:	5f de       	rcall	.-834    	; 0x1712 <RingBuffer_Remove>
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5a:	87 5b       	subi	r24, 0xB7	; 183
    1a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5e:	69 81       	ldd	r22, Y+1	; 0x01
    1a60:	0e 94 30 16 	call	0x2c60	; 0x2c60 <Receive_VCP_byte>
    1a64:	28 2f       	mov	r18, r24
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	9b 81       	ldd	r25, Y+3	; 0x03
    1a6a:	8d 59       	subi	r24, 0x9D	; 157
    1a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6e:	fc 01       	movw	r30, r24
    1a70:	20 83       	st	Z, r18
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	9b 81       	ldd	r25, Y+3	; 0x03
    1a76:	8d 59       	subi	r24, 0x9D	; 157
    1a78:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	80 81       	ld	r24, Z
    1a7e:	88 2f       	mov	r24, r24
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	83 70       	andi	r24, 0x03	; 3
    1a84:	99 27       	eor	r25, r25
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	21 f5       	brne	.+72     	; 0x1ad2 <read_VCP_receive_buff+0xde>
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8e:	8d 59       	subi	r24, 0x9D	; 157
    1a90:	9f 4f       	sbci	r25, 0xFF	; 255
    1a92:	fc 01       	movw	r30, r24
    1a94:	80 81       	ld	r24, Z
    1a96:	88 2f       	mov	r24, r24
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	84 70       	andi	r24, 0x04	; 4
    1a9c:	99 27       	eor	r25, r25
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	c1 f4       	brne	.+48     	; 0x1ad2 <read_VCP_receive_buff+0xde>
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa6:	8d 59       	subi	r24, 0x9D	; 157
    1aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aaa:	fc 01       	movw	r30, r24
    1aac:	80 81       	ld	r24, Z
    1aae:	88 2f       	mov	r24, r24
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	86 70       	andi	r24, 0x06	; 6
    1ab4:	99 27       	eor	r25, r25
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	61 f4       	brne	.+24     	; 0x1ad2 <read_VCP_receive_buff+0xde>
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	9b 81       	ldd	r25, Y+3	; 0x03
    1abe:	8d 59       	subi	r24, 0x9D	; 157
    1ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	80 81       	ld	r24, Z
    1ac6:	88 2f       	mov	r24, r24
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	87 70       	andi	r24, 0x07	; 7
    1acc:	99 27       	eor	r25, r25
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	c1 f0       	breq	.+48     	; 0x1b02 <read_VCP_receive_buff+0x10e>
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad6:	89 59       	subi	r24, 0x99	; 153
    1ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ada:	fc 01       	movw	r30, r24
    1adc:	80 81       	ld	r24, Z
    1ade:	91 81       	ldd	r25, Z+1	; 0x01
    1ae0:	9c 01       	movw	r18, r24
    1ae2:	2f 5f       	subi	r18, 0xFF	; 255
    1ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aea:	89 59       	subi	r24, 0x99	; 153
    1aec:	9f 4f       	sbci	r25, 0xFF	; 255
    1aee:	fc 01       	movw	r30, r24
    1af0:	20 83       	st	Z, r18
    1af2:	31 83       	std	Z+1, r19	; 0x01
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	9b 81       	ldd	r25, Y+3	; 0x03
    1af8:	86 5b       	subi	r24, 0xB6	; 182
    1afa:	9f 4f       	sbci	r25, 0xFF	; 255
    1afc:	fc 01       	movw	r30, r24
    1afe:	10 82       	st	Z, r1
    1b00:	11 82       	std	Z+1, r1	; 0x01
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	9b 81       	ldd	r25, Y+3	; 0x03
    1b06:	8d 59       	subi	r24, 0x9D	; 157
    1b08:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	80 81       	ld	r24, Z
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	09 f0       	breq	.+2      	; 0x1b14 <read_VCP_receive_buff+0x120>
    1b12:	51 c0       	rjmp	.+162    	; 0x1bb6 <read_VCP_receive_buff+0x1c2>
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	9b 81       	ldd	r25, Y+3	; 0x03
    1b18:	80 5b       	subi	r24, 0xB0	; 176
    1b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	20 81       	ld	r18, Z
    1b20:	31 81       	ldd	r19, Z+1	; 0x01
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	9b 81       	ldd	r25, Y+3	; 0x03
    1b26:	84 5a       	subi	r24, 0xA4	; 164
    1b28:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	20 83       	st	Z, r18
    1b2e:	31 83       	std	Z+1, r19	; 0x01
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	9b 81       	ldd	r25, Y+3	; 0x03
    1b34:	82 5a       	subi	r24, 0xA2	; 162
    1b36:	9f 4f       	sbci	r25, 0xFF	; 255
    1b38:	21 e0       	ldi	r18, 0x01	; 1
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	20 83       	st	Z, r18
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	9b 81       	ldd	r25, Y+3	; 0x03
    1b42:	f8 e2       	ldi	r31, 0x28	; 40
    1b44:	87 34       	cpi	r24, 0x47	; 71
    1b46:	9f 07       	cpc	r25, r31
    1b48:	31 f0       	breq	.+12     	; 0x1b56 <read_VCP_receive_buff+0x162>
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4e:	27 e2       	ldi	r18, 0x27	; 39
    1b50:	87 36       	cpi	r24, 0x67	; 103
    1b52:	92 07       	cpc	r25, r18
    1b54:	69 f4       	brne	.+26     	; 0x1b70 <read_VCP_receive_buff+0x17c>
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	9b 81       	ldd	r25, Y+3	; 0x03
    1b5a:	87 5b       	subi	r24, 0xB7	; 183
    1b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5e:	fc 01       	movw	r30, r24
    1b60:	20 81       	ld	r18, Z
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	9b 81       	ldd	r25, Y+3	; 0x03
    1b66:	8e 59       	subi	r24, 0x9E	; 158
    1b68:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	20 83       	st	Z, r18
    1b6e:	0a c0       	rjmp	.+20     	; 0x1b84 <read_VCP_receive_buff+0x190>
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	9b 81       	ldd	r25, Y+3	; 0x03
    1b74:	8f 59       	subi	r24, 0x9F	; 159
    1b76:	9f 4f       	sbci	r25, 0xFF	; 255
    1b78:	fc 01       	movw	r30, r24
    1b7a:	80 81       	ld	r24, Z
    1b7c:	68 2f       	mov	r22, r24
    1b7e:	88 e3       	ldi	r24, 0x38	; 56
    1b80:	98 e2       	ldi	r25, 0x28	; 40
    1b82:	77 dd       	rcall	.-1298   	; 0x1672 <Queue_RingBuffer_Insert>
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	9b 81       	ldd	r25, Y+3	; 0x03
    1b88:	8b 59       	subi	r24, 0x9B	; 155
    1b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	80 81       	ld	r24, Z
    1b90:	91 81       	ldd	r25, Z+1	; 0x01
    1b92:	9c 01       	movw	r18, r24
    1b94:	2f 5f       	subi	r18, 0xFF	; 255
    1b96:	3f 4f       	sbci	r19, 0xFF	; 255
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9c:	8b 59       	subi	r24, 0x9B	; 155
    1b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	20 83       	st	Z, r18
    1ba4:	31 83       	std	Z+1, r19	; 0x01
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    1baa:	86 5b       	subi	r24, 0xB6	; 182
    1bac:	9f 4f       	sbci	r25, 0xFF	; 255
    1bae:	fc 01       	movw	r30, r24
    1bb0:	10 82       	st	Z, r1
    1bb2:	11 82       	std	Z+1, r1	; 0x01
    1bb4:	0a c0       	rjmp	.+20     	; 0x1bca <read_VCP_receive_buff+0x1d6>
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bba:	04 96       	adiw	r24, 0x04	; 4
    1bbc:	45 dd       	rcall	.-1398   	; 0x1648 <RingBuffer_IsEmpty>
    1bbe:	98 2f       	mov	r25, r24
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	89 27       	eor	r24, r25
    1bc4:	88 23       	and	r24, r24
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <read_VCP_receive_buff+0x1d6>
    1bc8:	1d cf       	rjmp	.-454    	; 0x1a04 <read_VCP_receive_buff+0x10>
    1bca:	23 96       	adiw	r28, 0x03	; 3
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	08 95       	ret

00001bd6 <DMA_transmit>:
 *
 * Description  : Transmit data block through USART using DMA
 * 
 */
void DMA_transmit(peripheral_t*	Peripheral)
{
    1bd6:	8f 92       	push	r8
    1bd8:	9f 92       	push	r9
    1bda:	af 92       	push	r10
    1bdc:	bf 92       	push	r11
    1bde:	cf 92       	push	r12
    1be0:	df 92       	push	r13
    1be2:	ef 92       	push	r14
    1be4:	ff 92       	push	r15
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	1f 92       	push	r1
    1bf0:	1f 92       	push	r1
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
					DMA_CH_SRCRELOAD_NONE_gc,				// No reload
					DMA_CH_SRCDIR_INC_gc,					// Source address direction - Increment address
					(void *)&Peripheral->USART->DATA,		// Destination - USART DATA reg
					DMA_CH_DESTRELOAD_NONE_gc,				// No reload
					DMA_CH_DESTDIR_FIXED_gc,				// Destination address direction - Fixed address
					Peripheral->tx_byte_count,				// Block size
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	9a 81       	ldd	r25, Y+2	; 0x02
 * 
 */
void DMA_transmit(peripheral_t*	Peripheral)
{
	// Set up the block transfer
	DMA_SetupBlock(	Peripheral->DMA_channel,				// DMA Channel
    1bfe:	81 5a       	subi	r24, 0xA1	; 161
    1c00:	9f 4f       	sbci	r25, 0xFF	; 255
    1c02:	fc 01       	movw	r30, r24
    1c04:	40 81       	ld	r20, Z
    1c06:	51 81       	ldd	r21, Z+1	; 0x01
					Peripheral->tx_data,					// Source buffer address
					DMA_CH_SRCRELOAD_NONE_gc,				// No reload
					DMA_CH_SRCDIR_INC_gc,					// Source address direction - Increment address
					(void *)&Peripheral->USART->DATA,		// Destination - USART DATA reg
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	80 81       	ld	r24, Z
    1c10:	91 81       	ldd	r25, Z+1	; 0x01
    1c12:	9c 01       	movw	r18, r24
 */
void DMA_transmit(peripheral_t*	Peripheral)
{
	// Set up the block transfer
	DMA_SetupBlock(	Peripheral->DMA_channel,				// DMA Channel
					Peripheral->tx_data,					// Source buffer address
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	9a 81       	ldd	r25, Y+2	; 0x02
    1c18:	89 5a       	subi	r24, 0xA9	; 169
    1c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	60 81       	ld	r22, Z
    1c20:	71 81       	ldd	r23, Z+1	; 0x01
 * 
 */
void DMA_transmit(peripheral_t*	Peripheral)
{
	// Set up the block transfer
	DMA_SetupBlock(	Peripheral->DMA_channel,				// DMA Channel
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	fc 01       	movw	r30, r24
    1c28:	82 81       	ldd	r24, Z+2	; 0x02
    1c2a:	93 81       	ldd	r25, Z+3	; 0x03
    1c2c:	1f 92       	push	r1
    1c2e:	1f 92       	push	r1
    1c30:	81 2c       	mov	r8, r1
    1c32:	91 2c       	mov	r9, r1
    1c34:	5a 01       	movw	r10, r20
    1c36:	c1 2c       	mov	r12, r1
    1c38:	d1 2c       	mov	r13, r1
    1c3a:	e1 2c       	mov	r14, r1
    1c3c:	f1 2c       	mov	r15, r1
    1c3e:	89 01       	movw	r16, r18
    1c40:	20 e1       	ldi	r18, 0x10	; 16
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e0       	ldi	r20, 0x00	; 0
    1c46:	50 e0       	ldi	r21, 0x00	; 0
    1c48:	1d da       	rcall	.-3014   	; 0x1084 <DMA_SetupBlock>
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
					DMA_CH_BURSTLEN_1BYTE_gc,				// 1 byte per transfer
					0,										// No repeat
					false);									// No repeat

	// Enable channel - the channel will be automatically disabled when a transfer is finished
	DMA_EnableChannel(Peripheral->DMA_channel);
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	9a 81       	ldd	r25, Y+2	; 0x02
    1c52:	fc 01       	movw	r30, r24
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	fe d9       	rcall	.-3076   	; 0x1056 <DMA_EnableChannel>
	#ifdef DEBUG
		PORTA.OUTTGL = Peripheral->tx_LED_pin;
	#endif
		
	// Add to transmit packet count
	Peripheral->tx_packet_count++;
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5e:	87 59       	subi	r24, 0x97	; 151
    1c60:	9f 4f       	sbci	r25, 0xFF	; 255
    1c62:	fc 01       	movw	r30, r24
    1c64:	80 81       	ld	r24, Z
    1c66:	91 81       	ldd	r25, Z+1	; 0x01
    1c68:	9c 01       	movw	r18, r24
    1c6a:	2f 5f       	subi	r18, 0xFF	; 255
    1c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	9a 81       	ldd	r25, Y+2	; 0x02
    1c72:	87 59       	subi	r24, 0x97	; 151
    1c74:	9f 4f       	sbci	r25, 0xFF	; 255
    1c76:	fc 01       	movw	r30, r24
    1c78:	20 83       	st	Z, r18
    1c7a:	31 83       	std	Z+1, r19	; 0x01
}
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	1f 91       	pop	r17
    1c86:	0f 91       	pop	r16
    1c88:	ff 90       	pop	r15
    1c8a:	ef 90       	pop	r14
    1c8c:	df 90       	pop	r13
    1c8e:	cf 90       	pop	r12
    1c90:	bf 90       	pop	r11
    1c92:	af 90       	pop	r10
    1c94:	9f 90       	pop	r9
    1c96:	8f 90       	pop	r8
    1c98:	08 95       	ret

00001c9a <VCP_DMA_transmit>:
 * Description  : Package a packet from a source peripheral rx buffer
 *				  to a destination peripheral tx buffer in VCP frame and transmit using DMA
 * 
 */
void VCP_DMA_transmit(peripheral_t* source, peripheral_t* destination)
{
    1c9a:	0f 93       	push	r16
    1c9c:	1f 93       	push	r17
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <VCP_DMA_transmit+0xa>
    1ca4:	1f 92       	push	r1
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	9a 83       	std	Y+2, r25	; 0x02
    1cae:	6b 83       	std	Y+3, r22	; 0x03
    1cb0:	7c 83       	std	Y+4, r23	; 0x04
	// Reset transmit data count to full buffer size
	destination->tx_byte_count = destination->tx_data_buffer_size;
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb6:	87 5a       	subi	r24, 0xA7	; 167
    1cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cba:	dc 01       	movw	r26, r24
    1cbc:	2d 91       	ld	r18, X+
    1cbe:	3c 91       	ld	r19, X
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc4:	81 5a       	subi	r24, 0xA1	; 161
    1cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc8:	fc 01       	movw	r30, r24
    1cca:	20 83       	st	Z, r18
    1ccc:	31 83       	std	Z+1, r19	; 0x01
	// create VCP frame in the peripheral transmit buffer
	destination->VCP_tx_status = Create_VCP_frame(	destination->tx_data, 
													(uint16ptr)&destination->tx_byte_count, 
													source->VCP_address, 
													source->rx_data, 
													source->rx_byte_count);
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	9a 81       	ldd	r25, Y+2	; 0x02
{
	// Reset transmit data count to full buffer size
	destination->tx_byte_count = destination->tx_data_buffer_size;
	
	// create VCP frame in the peripheral transmit buffer
	destination->VCP_tx_status = Create_VCP_frame(	destination->tx_data, 
    1cd2:	84 5a       	subi	r24, 0xA4	; 164
    1cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	4d 91       	ld	r20, X+
    1cda:	5c 91       	ld	r21, X
													(uint16ptr)&destination->tx_byte_count, 
													source->VCP_address, 
													source->rx_data, 
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	9a 81       	ldd	r25, Y+2	; 0x02
{
	// Reset transmit data count to full buffer size
	destination->tx_byte_count = destination->tx_data_buffer_size;
	
	// create VCP frame in the peripheral transmit buffer
	destination->VCP_tx_status = Create_VCP_frame(	destination->tx_data, 
    1ce0:	8d 5a       	subi	r24, 0xAD	; 173
    1ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	20 81       	ld	r18, Z
    1ce8:	31 81       	ldd	r19, Z+1	; 0x01
													(uint16ptr)&destination->tx_byte_count, 
													source->VCP_address, 
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	9a 81       	ldd	r25, Y+2	; 0x02
{
	// Reset transmit data count to full buffer size
	destination->tx_byte_count = destination->tx_data_buffer_size;
	
	// create VCP frame in the peripheral transmit buffer
	destination->VCP_tx_status = Create_VCP_frame(	destination->tx_data, 
    1cee:	8f 59       	subi	r24, 0x9F	; 159
    1cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	ec 91       	ld	r30, X
													(uint16ptr)&destination->tx_byte_count, 
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	61 5a       	subi	r22, 0xA1	; 161
    1cfe:	7f 4f       	sbci	r23, 0xFF	; 255
{
	// Reset transmit data count to full buffer size
	destination->tx_byte_count = destination->tx_data_buffer_size;
	
	// create VCP frame in the peripheral transmit buffer
	destination->VCP_tx_status = Create_VCP_frame(	destination->tx_data, 
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	9c 81       	ldd	r25, Y+4	; 0x04
    1d04:	89 5a       	subi	r24, 0xA9	; 169
    1d06:	9f 4f       	sbci	r25, 0xFF	; 255
    1d08:	dc 01       	movw	r26, r24
    1d0a:	8d 91       	ld	r24, X+
    1d0c:	9c 91       	ld	r25, X
    1d0e:	8a 01       	movw	r16, r20
    1d10:	4e 2f       	mov	r20, r30
    1d12:	7b d6       	rcall	.+3318   	; 0x2a0a <Create_VCP_frame>
    1d14:	28 2f       	mov	r18, r24
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	8c 59       	subi	r24, 0x9C	; 156
    1d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1e:	fc 01       	movw	r30, r24
    1d20:	20 83       	st	Z, r18
													source->rx_byte_count);

	if (destination->VCP_tx_status == VCP_OVR_ERR)	{}
	if (destination->VCP_tx_status == VCP_NULL_ERR)	{}
	if (destination->VCP_tx_status == VCP_ADDR_ERR)	{}
	if (destination->VCP_tx_status == VCP_TERM)			// Done with no errors
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	9c 81       	ldd	r25, Y+4	; 0x04
    1d26:	8c 59       	subi	r24, 0x9C	; 156
    1d28:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	8c 91       	ld	r24, X
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	51 f4       	brne	.+20     	; 0x1d46 <VCP_DMA_transmit+0xac>
	{

		#ifndef DEBUG
		// Reset the source received byte count
		source->rx_byte_count = 0;
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	9a 81       	ldd	r25, Y+2	; 0x02
    1d36:	84 5a       	subi	r24, 0xA4	; 164
    1d38:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	10 82       	st	Z, r1
    1d3e:	11 82       	std	Z+1, r1	; 0x01
		#endif
		
		// Transmit with DMA
		DMA_transmit(destination);
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	9c 81       	ldd	r25, Y+4	; 0x04
    1d44:	48 df       	rcall	.-368    	; 0x1bd6 <DMA_transmit>
	}		

}
    1d46:	24 96       	adiw	r28, 0x04	; 4
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	08 95       	ret

00001d56 <scheduler>:
 * Description  : Task execution scheduler.
 *				  Tasks are defined in conf_scheduler.h
 * 
 */
void scheduler (void)
{
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
	debug_task();
#else			// Run tasks as defined in conf_scheduler.h	
   for(;;)
   {
      #ifdef Scheduler_task_1
         Scheduler_task_1();
    1d5e:	d5 d3       	rcall	.+1962   	; 0x250a <power_task>
      #endif
      #ifdef Scheduler_task_2
         Scheduler_task_2();
    1d60:	ba d3       	rcall	.+1908   	; 0x24d6 <gps_task>
      #endif
      #ifdef Scheduler_task_3
         Scheduler_task_3();
    1d62:	45 d5       	rcall	.+2698   	; 0x27ee <radio_task>
      #endif
      #ifdef Scheduler_task_4
         Scheduler_task_4();
    1d64:	ec d3       	rcall	.+2008   	; 0x253e <fc_task>
      #endif
      #ifdef Scheduler_task_6
         Scheduler_task_6();
      #endif
      #ifdef Scheduler_task_7
         Scheduler_task_7();
    1d66:	c2 d4       	rcall	.+2436   	; 0x26ec <cdhib_task>
      #endif
      #ifdef Scheduler_task_8
         Scheduler_task_8();
    1d68:	d1 d5       	rcall	.+2978   	; 0x290c <tcap_task>
         Scheduler_task_9();
      #endif
      #ifdef Scheduler_task_10
         Scheduler_task_10();
      #endif
   }
    1d6a:	f9 cf       	rjmp	.-14     	; 0x1d5e <scheduler+0x8>

00001d6c <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    cli();
    1d74:	f8 94       	cli
    return 1;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
}
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	08 95       	ret

00001d7e <__iRestore>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	1f 92       	push	r1
    1d84:	1f 92       	push	r1
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    SREG = *__s;
    1d8e:	8f e3       	ldi	r24, 0x3F	; 63
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	29 81       	ldd	r18, Y+1	; 0x01
    1d94:	3a 81       	ldd	r19, Y+2	; 0x02
    1d96:	f9 01       	movw	r30, r18
    1d98:	20 81       	ld	r18, Z
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	08 95       	ret

00001da8 <RingBuffer_GetCount>:
		 *        be performed on the buffer.
		 *
		 *  \param[in] Buffer  Pointer to a ring buffer structure whose count is to be computed
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(Receive_RingBuff_t* const Buffer)
		{
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	25 97       	sbiw	r28, 0x05	; 5
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	de bf       	out	0x3e, r29	; 62
    1db6:	8c 83       	std	Y+4, r24	; 0x04
    1db8:	9d 83       	std	Y+5, r25	; 0x05
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1dba:	8f e3       	ldi	r24, 0x3F	; 63
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8b 83       	std	Y+3, r24	; 0x03
    1dc4:	d3 df       	rcall	.-90     	; 0x1d6c <__iCliRetVal>
    1dc6:	8a 83       	std	Y+2, r24	; 0x02
    1dc8:	08 c0       	rjmp	.+16     	; 0x1dda <RingBuffer_GetCount+0x32>
			{
				Count = Buffer->Count;
    1dca:	8c 81       	ldd	r24, Y+4	; 0x04
    1dcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dce:	8c 5b       	subi	r24, 0xBC	; 188
    1dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	80 81       	ld	r24, Z
    1dd6:	89 83       	std	Y+1, r24	; 0x01
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(Receive_RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1dd8:	1a 82       	std	Y+2, r1	; 0x02
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	88 23       	and	r24, r24
    1dde:	a9 f7       	brne	.-22     	; 0x1dca <RingBuffer_GetCount+0x22>
    1de0:	ce 01       	movw	r24, r28
    1de2:	03 96       	adiw	r24, 0x03	; 3
    1de4:	cc df       	rcall	.-104    	; 0x1d7e <__iRestore>
			{
				Count = Buffer->Count;
			}
			
			return Count;
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
		}
    1de8:	25 96       	adiw	r28, 0x05	; 5
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	df 91       	pop	r29
    1df0:	cf 91       	pop	r28
    1df2:	08 95       	ret

00001df4 <RingBuffer_IsFull>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
		 *
		 *  \return Boolean true if the buffer contains no free space, false otherwise
		 */		 
		static inline bool RingBuffer_IsFull(Receive_RingBuff_t* const Buffer)
		{
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	1f 92       	push	r1
    1dfa:	1f 92       	push	r1
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	9a 83       	std	Y+2, r25	; 0x02
			return (RingBuffer_GetCount(Buffer) == RECEIVE_RINGBUFFER_SIZE);
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	9a 81       	ldd	r25, Y+2	; 0x02
    1e08:	cf df       	rcall	.-98     	; 0x1da8 <RingBuffer_GetCount>
    1e0a:	98 2f       	mov	r25, r24
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 34       	cpi	r25, 0x40	; 64
    1e10:	09 f0       	breq	.+2      	; 0x1e14 <RingBuffer_IsFull+0x20>
    1e12:	80 e0       	ldi	r24, 0x00	; 0
		}
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	08 95       	ret

00001e1e <RingBuffer_Insert>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(Receive_RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	25 97       	sbiw	r28, 0x05	; 5
    1e28:	cd bf       	out	0x3d, r28	; 61
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	8b 83       	std	Y+3, r24	; 0x03
    1e2e:	9c 83       	std	Y+4, r25	; 0x04
    1e30:	6d 83       	std	Y+5, r22	; 0x05
			*Buffer->In = Data;
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	9c 81       	ldd	r25, Y+4	; 0x04
    1e36:	80 5c       	subi	r24, 0xC0	; 192
    1e38:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	80 81       	ld	r24, Z
    1e3e:	91 81       	ldd	r25, Z+1	; 0x01
    1e40:	2d 81       	ldd	r18, Y+5	; 0x05
    1e42:	fc 01       	movw	r30, r24
    1e44:	20 83       	st	Z, r18
			
			if (++Buffer->In == &Buffer->Buffer[RECEIVE_RINGBUFFER_SIZE])
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4a:	80 5c       	subi	r24, 0xC0	; 192
    1e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4e:	fc 01       	movw	r30, r24
    1e50:	80 81       	ld	r24, Z
    1e52:	91 81       	ldd	r25, Z+1	; 0x01
    1e54:	9c 01       	movw	r18, r24
    1e56:	2f 5f       	subi	r18, 0xFF	; 255
    1e58:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5e:	80 5c       	subi	r24, 0xC0	; 192
    1e60:	9f 4f       	sbci	r25, 0xFF	; 255
    1e62:	fc 01       	movw	r30, r24
    1e64:	20 83       	st	Z, r18
    1e66:	31 83       	std	Z+1, r19	; 0x01
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6c:	80 5c       	subi	r24, 0xC0	; 192
    1e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e70:	fc 01       	movw	r30, r24
    1e72:	20 81       	ld	r18, Z
    1e74:	31 81       	ldd	r19, Z+1	; 0x01
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7a:	80 5c       	subi	r24, 0xC0	; 192
    1e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7e:	28 17       	cp	r18, r24
    1e80:	39 07       	cpc	r19, r25
    1e82:	49 f4       	brne	.+18     	; 0x1e96 <RingBuffer_Insert+0x78>
			  Buffer->In = Buffer->Buffer;
    1e84:	2b 81       	ldd	r18, Y+3	; 0x03
    1e86:	3c 81       	ldd	r19, Y+4	; 0x04
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8c:	80 5c       	subi	r24, 0xC0	; 192
    1e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e90:	fc 01       	movw	r30, r24
    1e92:	20 83       	st	Z, r18
    1e94:	31 83       	std	Z+1, r19	; 0x01

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1e96:	8f e3       	ldi	r24, 0x3F	; 63
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	80 81       	ld	r24, Z
    1e9e:	8a 83       	std	Y+2, r24	; 0x02
    1ea0:	65 df       	rcall	.-310    	; 0x1d6c <__iCliRetVal>
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	0f c0       	rjmp	.+30     	; 0x1ec4 <RingBuffer_Insert+0xa6>
			{
				Buffer->Count++;
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eaa:	8c 5b       	subi	r24, 0xBC	; 188
    1eac:	9f 4f       	sbci	r25, 0xFF	; 255
    1eae:	fc 01       	movw	r30, r24
    1eb0:	80 81       	ld	r24, Z
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	2f 5f       	subi	r18, 0xFF	; 255
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eba:	8c 5b       	subi	r24, 0xBC	; 188
    1ebc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	20 83       	st	Z, r18
			*Buffer->In = Data;
			
			if (++Buffer->In == &Buffer->Buffer[RECEIVE_RINGBUFFER_SIZE])
			  Buffer->In = Buffer->Buffer;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1ec2:	19 82       	std	Y+1, r1	; 0x01
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	88 23       	and	r24, r24
    1ec8:	71 f7       	brne	.-36     	; 0x1ea6 <RingBuffer_Insert+0x88>
    1eca:	ce 01       	movw	r24, r28
    1ecc:	02 96       	adiw	r24, 0x02	; 2
    1ece:	57 df       	rcall	.-338    	; 0x1d7e <__iRestore>
			{
				Buffer->Count++;
			}
		}
    1ed0:	25 96       	adiw	r28, 0x05	; 5
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	df 91       	pop	r29
    1ed8:	cf 91       	pop	r28
    1eda:	08 95       	ret

00001edc <__vector_1>:
volatile uint16_t i,j;
volatile Bool xosc_recovey;				

/// External oscillator failure interrupt handler
ISR(OSC_XOSCF_vect)
{
    1edc:	1f 92       	push	r1
    1ede:	0f 92       	push	r0
    1ee0:	00 90 3f 00 	lds	r0, 0x003F
    1ee4:	0f 92       	push	r0
    1ee6:	11 24       	eor	r1, r1
    1ee8:	00 90 3b 00 	lds	r0, 0x003B
    1eec:	0f 92       	push	r0
    1eee:	2f 93       	push	r18
    1ef0:	3f 93       	push	r19
    1ef2:	4f 93       	push	r20
    1ef4:	5f 93       	push	r21
    1ef6:	6f 93       	push	r22
    1ef8:	7f 93       	push	r23
    1efa:	8f 93       	push	r24
    1efc:	9f 93       	push	r25
    1efe:	af 93       	push	r26
    1f00:	bf 93       	push	r27
    1f02:	ef 93       	push	r30
    1f04:	ff 93       	push	r31
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
	clock_init (); // Init clock and use internal 32MHz osc
    1f0e:	0e 94 48 03 	call	0x690	; 0x690 <clock_init>
}
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	ff 91       	pop	r31
    1f18:	ef 91       	pop	r30
    1f1a:	bf 91       	pop	r27
    1f1c:	af 91       	pop	r26
    1f1e:	9f 91       	pop	r25
    1f20:	8f 91       	pop	r24
    1f22:	7f 91       	pop	r23
    1f24:	6f 91       	pop	r22
    1f26:	5f 91       	pop	r21
    1f28:	4f 91       	pop	r20
    1f2a:	3f 91       	pop	r19
    1f2c:	2f 91       	pop	r18
    1f2e:	0f 90       	pop	r0
    1f30:	00 92 3b 00 	sts	0x003B, r0
    1f34:	0f 90       	pop	r0
    1f36:	00 92 3f 00 	sts	0x003F, r0
    1f3a:	0f 90       	pop	r0
    1f3c:	1f 90       	pop	r1
    1f3e:	18 95       	reti

00001f40 <__vector_14>:

/// Timer 1KHz interrupt handler
ISR(TCC0_OVF_vect)
{
    1f40:	1f 92       	push	r1
    1f42:	0f 92       	push	r0
    1f44:	00 90 3f 00 	lds	r0, 0x003F
    1f48:	0f 92       	push	r0
    1f4a:	11 24       	eor	r1, r1
    1f4c:	2f 93       	push	r18
    1f4e:	8f 93       	push	r24
    1f50:	9f 93       	push	r25
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
	mSeconds++;
    1f5a:	80 91 b5 2c 	lds	r24, 0x2CB5
    1f5e:	90 91 b6 2c 	lds	r25, 0x2CB6
    1f62:	01 96       	adiw	r24, 0x01	; 1
    1f64:	80 93 b5 2c 	sts	0x2CB5, r24
    1f68:	90 93 b6 2c 	sts	0x2CB6, r25
	
	if (mSeconds >= 999)
    1f6c:	80 91 b5 2c 	lds	r24, 0x2CB5
    1f70:	90 91 b6 2c 	lds	r25, 0x2CB6
    1f74:	87 3e       	cpi	r24, 0xE7	; 231
    1f76:	23 e0       	ldi	r18, 0x03	; 3
    1f78:	92 07       	cpc	r25, r18
    1f7a:	b0 f0       	brcs	.+44     	; 0x1fa8 <__vector_14+0x68>
		{
			mSeconds =		0;
    1f7c:	10 92 b5 2c 	sts	0x2CB5, r1
    1f80:	10 92 b6 2c 	sts	0x2CB6, r1
			
			// Advance seconds counters
			THS_Seconds_counter++;
    1f84:	80 91 b7 2c 	lds	r24, 0x2CB7
    1f88:	90 91 b8 2c 	lds	r25, 0x2CB8
    1f8c:	01 96       	adiw	r24, 0x01	; 1
    1f8e:	80 93 b7 2c 	sts	0x2CB7, r24
    1f92:	90 93 b8 2c 	sts	0x2CB8, r25
			PWR_WDOG_Seconds_counter++;
    1f96:	80 91 b1 2c 	lds	r24, 0x2CB1
    1f9a:	90 91 b2 2c 	lds	r25, 0x2CB2
    1f9e:	01 96       	adiw	r24, 0x01	; 1
    1fa0:	80 93 b1 2c 	sts	0x2CB1, r24
    1fa4:	90 93 b2 2c 	sts	0x2CB2, r25

			#ifdef DEBUG
				PORTA.OUTTGL =	PIN0_bm; // Toggle LED at 1Hz
			#endif
		}				
}
    1fa8:	df 91       	pop	r29
    1faa:	cf 91       	pop	r28
    1fac:	9f 91       	pop	r25
    1fae:	8f 91       	pop	r24
    1fb0:	2f 91       	pop	r18
    1fb2:	0f 90       	pop	r0
    1fb4:	00 92 3f 00 	sts	0x003F, r0
    1fb8:	0f 90       	pop	r0
    1fba:	1f 90       	pop	r1
    1fbc:	18 95       	reti

00001fbe <__vector_25>:

/// Power USART Receive interrupt handler
ISR(POWER_UART_RXC_vect)
{
    1fbe:	1f 92       	push	r1
    1fc0:	0f 92       	push	r0
    1fc2:	00 90 3f 00 	lds	r0, 0x003F
    1fc6:	0f 92       	push	r0
    1fc8:	11 24       	eor	r1, r1
    1fca:	00 90 3b 00 	lds	r0, 0x003B
    1fce:	0f 92       	push	r0
    1fd0:	2f 93       	push	r18
    1fd2:	3f 93       	push	r19
    1fd4:	4f 93       	push	r20
    1fd6:	5f 93       	push	r21
    1fd8:	6f 93       	push	r22
    1fda:	7f 93       	push	r23
    1fdc:	8f 93       	push	r24
    1fde:	9f 93       	push	r25
    1fe0:	af 93       	push	r26
    1fe2:	bf 93       	push	r27
    1fe4:	ef 93       	push	r30
    1fe6:	ff 93       	push	r31
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	1f 92       	push	r1
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
	if (RingBuffer_IsFull(&power.rx_ringbuff))
    1ff2:	84 e7       	ldi	r24, 0x74	; 116
    1ff4:	91 e2       	ldi	r25, 0x21	; 33
    1ff6:	fe de       	rcall	.-516    	; 0x1df4 <RingBuffer_IsFull>
    1ff8:	88 23       	and	r24, r24
    1ffa:	81 f0       	breq	.+32     	; 0x201c <__vector_25+0x5e>
	{
		volatile uint8_t temp = power.USART->DATA;					// clear interrupt flag
    1ffc:	80 91 70 21 	lds	r24, 0x2170
    2000:	90 91 71 21 	lds	r25, 0x2171
    2004:	fc 01       	movw	r30, r24
    2006:	80 81       	ld	r24, Z
    2008:	89 83       	std	Y+1, r24	; 0x01
		temp++;														// Remove unused variable compiler warning
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	8f 5f       	subi	r24, 0xFF	; 255
    200e:	89 83       	std	Y+1, r24	; 0x01
		power.rx_ringbuff_overflow++;								// buffer overflow
    2010:	80 91 cb 21 	lds	r24, 0x21CB
    2014:	8f 5f       	subi	r24, 0xFF	; 255
    2016:	80 93 cb 21 	sts	0x21CB, r24
    201a:	0a c0       	rjmp	.+20     	; 0x2030 <__vector_25+0x72>
	}
	else
	{
		RingBuffer_Insert(&power.rx_ringbuff, power.USART->DATA);	// read received byte into the ring buffer
    201c:	80 91 70 21 	lds	r24, 0x2170
    2020:	90 91 71 21 	lds	r25, 0x2171
    2024:	fc 01       	movw	r30, r24
    2026:	80 81       	ld	r24, Z
    2028:	68 2f       	mov	r22, r24
    202a:	84 e7       	ldi	r24, 0x74	; 116
    202c:	91 e2       	ldi	r25, 0x21	; 33
    202e:	f7 de       	rcall	.-530    	; 0x1e1e <RingBuffer_Insert>
	}
}
    2030:	0f 90       	pop	r0
    2032:	df 91       	pop	r29
    2034:	cf 91       	pop	r28
    2036:	ff 91       	pop	r31
    2038:	ef 91       	pop	r30
    203a:	bf 91       	pop	r27
    203c:	af 91       	pop	r26
    203e:	9f 91       	pop	r25
    2040:	8f 91       	pop	r24
    2042:	7f 91       	pop	r23
    2044:	6f 91       	pop	r22
    2046:	5f 91       	pop	r21
    2048:	4f 91       	pop	r20
    204a:	3f 91       	pop	r19
    204c:	2f 91       	pop	r18
    204e:	0f 90       	pop	r0
    2050:	00 92 3b 00 	sts	0x003B, r0
    2054:	0f 90       	pop	r0
    2056:	00 92 3f 00 	sts	0x003F, r0
    205a:	0f 90       	pop	r0
    205c:	1f 90       	pop	r1
    205e:	18 95       	reti

00002060 <__vector_28>:

/// GPS USART Receive interrupt handler
ISR(GPS_UART_RXC_vect)
{
    2060:	1f 92       	push	r1
    2062:	0f 92       	push	r0
    2064:	00 90 3f 00 	lds	r0, 0x003F
    2068:	0f 92       	push	r0
    206a:	11 24       	eor	r1, r1
    206c:	00 90 3b 00 	lds	r0, 0x003B
    2070:	0f 92       	push	r0
    2072:	2f 93       	push	r18
    2074:	3f 93       	push	r19
    2076:	4f 93       	push	r20
    2078:	5f 93       	push	r21
    207a:	6f 93       	push	r22
    207c:	7f 93       	push	r23
    207e:	8f 93       	push	r24
    2080:	9f 93       	push	r25
    2082:	af 93       	push	r26
    2084:	bf 93       	push	r27
    2086:	ef 93       	push	r30
    2088:	ff 93       	push	r31
    208a:	cf 93       	push	r28
    208c:	df 93       	push	r29
    208e:	1f 92       	push	r1
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
	if (RingBuffer_IsFull(&gps.rx_ringbuff))
    2094:	85 e0       	ldi	r24, 0x05	; 5
    2096:	90 e2       	ldi	r25, 0x20	; 32
    2098:	ad de       	rcall	.-678    	; 0x1df4 <RingBuffer_IsFull>
    209a:	88 23       	and	r24, r24
    209c:	81 f0       	breq	.+32     	; 0x20be <__vector_28+0x5e>
	{
		volatile uint8_t temp = gps.USART->DATA;					// clear interrupt flag
    209e:	80 91 01 20 	lds	r24, 0x2001
    20a2:	90 91 02 20 	lds	r25, 0x2002
    20a6:	fc 01       	movw	r30, r24
    20a8:	80 81       	ld	r24, Z
    20aa:	89 83       	std	Y+1, r24	; 0x01
		temp++;														// Remove unused variable compiler warning
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	8f 5f       	subi	r24, 0xFF	; 255
    20b0:	89 83       	std	Y+1, r24	; 0x01
		gps.rx_ringbuff_overflow++;									// buffer overflow
    20b2:	80 91 5c 20 	lds	r24, 0x205C
    20b6:	8f 5f       	subi	r24, 0xFF	; 255
    20b8:	80 93 5c 20 	sts	0x205C, r24
    20bc:	0a c0       	rjmp	.+20     	; 0x20d2 <__vector_28+0x72>
	}
	else
	{
		RingBuffer_Insert(&gps.rx_ringbuff, gps.USART->DATA);		// read received byte into the ring buffer
    20be:	80 91 01 20 	lds	r24, 0x2001
    20c2:	90 91 02 20 	lds	r25, 0x2002
    20c6:	fc 01       	movw	r30, r24
    20c8:	80 81       	ld	r24, Z
    20ca:	68 2f       	mov	r22, r24
    20cc:	85 e0       	ldi	r24, 0x05	; 5
    20ce:	90 e2       	ldi	r25, 0x20	; 32
    20d0:	a6 de       	rcall	.-692    	; 0x1e1e <RingBuffer_Insert>
	}
}
    20d2:	0f 90       	pop	r0
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	ff 91       	pop	r31
    20da:	ef 91       	pop	r30
    20dc:	bf 91       	pop	r27
    20de:	af 91       	pop	r26
    20e0:	9f 91       	pop	r25
    20e2:	8f 91       	pop	r24
    20e4:	7f 91       	pop	r23
    20e6:	6f 91       	pop	r22
    20e8:	5f 91       	pop	r21
    20ea:	4f 91       	pop	r20
    20ec:	3f 91       	pop	r19
    20ee:	2f 91       	pop	r18
    20f0:	0f 90       	pop	r0
    20f2:	00 92 3b 00 	sts	0x003B, r0
    20f6:	0f 90       	pop	r0
    20f8:	00 92 3f 00 	sts	0x003F, r0
    20fc:	0f 90       	pop	r0
    20fe:	1f 90       	pop	r1
    2100:	18 95       	reti

00002102 <__vector_61>:
	
/// Radio USART Receive interrupt handler		
ISR(RADIO_UART_RXC_vect)
{
    2102:	1f 92       	push	r1
    2104:	0f 92       	push	r0
    2106:	00 90 3f 00 	lds	r0, 0x003F
    210a:	0f 92       	push	r0
    210c:	11 24       	eor	r1, r1
    210e:	00 90 3b 00 	lds	r0, 0x003B
    2112:	0f 92       	push	r0
    2114:	2f 93       	push	r18
    2116:	3f 93       	push	r19
    2118:	4f 93       	push	r20
    211a:	5f 93       	push	r21
    211c:	6f 93       	push	r22
    211e:	7f 93       	push	r23
    2120:	8f 93       	push	r24
    2122:	9f 93       	push	r25
    2124:	af 93       	push	r26
    2126:	bf 93       	push	r27
    2128:	ef 93       	push	r30
    212a:	ff 93       	push	r31
    212c:	cf 93       	push	r28
    212e:	df 93       	push	r29
    2130:	1f 92       	push	r1
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
	if (RingBuffer_IsFull(&radio.rx_ringbuff))
    2136:	8b e6       	ldi	r24, 0x6B	; 107
    2138:	97 e2       	ldi	r25, 0x27	; 39
    213a:	5c de       	rcall	.-840    	; 0x1df4 <RingBuffer_IsFull>
    213c:	88 23       	and	r24, r24
    213e:	81 f0       	breq	.+32     	; 0x2160 <__vector_61+0x5e>
	{
		volatile uint8_t temp = radio.USART->DATA;					// clear interrupt flag
    2140:	80 91 67 27 	lds	r24, 0x2767
    2144:	90 91 68 27 	lds	r25, 0x2768
    2148:	fc 01       	movw	r30, r24
    214a:	80 81       	ld	r24, Z
    214c:	89 83       	std	Y+1, r24	; 0x01
		temp++;														// Remove unused variable compiler warning
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	8f 5f       	subi	r24, 0xFF	; 255
    2152:	89 83       	std	Y+1, r24	; 0x01
		radio.rx_ringbuff_overflow++;								// buffer overflow
    2154:	80 91 c2 27 	lds	r24, 0x27C2
    2158:	8f 5f       	subi	r24, 0xFF	; 255
    215a:	80 93 c2 27 	sts	0x27C2, r24
    215e:	0a c0       	rjmp	.+20     	; 0x2174 <__vector_61+0x72>
	}
	else
	{
		RingBuffer_Insert(&radio.rx_ringbuff, radio.USART->DATA);	// read received byte into the ring buffer
    2160:	80 91 67 27 	lds	r24, 0x2767
    2164:	90 91 68 27 	lds	r25, 0x2768
    2168:	fc 01       	movw	r30, r24
    216a:	80 81       	ld	r24, Z
    216c:	68 2f       	mov	r22, r24
    216e:	8b e6       	ldi	r24, 0x6B	; 107
    2170:	97 e2       	ldi	r25, 0x27	; 39
    2172:	55 de       	rcall	.-854    	; 0x1e1e <RingBuffer_Insert>
	}
}
    2174:	0f 90       	pop	r0
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	ff 91       	pop	r31
    217c:	ef 91       	pop	r30
    217e:	bf 91       	pop	r27
    2180:	af 91       	pop	r26
    2182:	9f 91       	pop	r25
    2184:	8f 91       	pop	r24
    2186:	7f 91       	pop	r23
    2188:	6f 91       	pop	r22
    218a:	5f 91       	pop	r21
    218c:	4f 91       	pop	r20
    218e:	3f 91       	pop	r19
    2190:	2f 91       	pop	r18
    2192:	0f 90       	pop	r0
    2194:	00 92 3b 00 	sts	0x003B, r0
    2198:	0f 90       	pop	r0
    219a:	00 92 3f 00 	sts	0x003F, r0
    219e:	0f 90       	pop	r0
    21a0:	1f 90       	pop	r1
    21a2:	18 95       	reti

000021a4 <__vector_58>:
	
/// FC USART Receive interrupt handler
ISR(FC_UART_RXC_vect)
{
    21a4:	1f 92       	push	r1
    21a6:	0f 92       	push	r0
    21a8:	00 90 3f 00 	lds	r0, 0x003F
    21ac:	0f 92       	push	r0
    21ae:	11 24       	eor	r1, r1
    21b0:	00 90 3b 00 	lds	r0, 0x003B
    21b4:	0f 92       	push	r0
    21b6:	2f 93       	push	r18
    21b8:	3f 93       	push	r19
    21ba:	4f 93       	push	r20
    21bc:	5f 93       	push	r21
    21be:	6f 93       	push	r22
    21c0:	7f 93       	push	r23
    21c2:	8f 93       	push	r24
    21c4:	9f 93       	push	r25
    21c6:	af 93       	push	r26
    21c8:	bf 93       	push	r27
    21ca:	ef 93       	push	r30
    21cc:	ff 93       	push	r31
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	1f 92       	push	r1
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
	//uint8_t data;
	if (RingBuffer_IsFull(&fc.rx_ringbuff))
    21d8:	8b e4       	ldi	r24, 0x4B	; 75
    21da:	98 e2       	ldi	r25, 0x28	; 40
    21dc:	0b de       	rcall	.-1002   	; 0x1df4 <RingBuffer_IsFull>
    21de:	88 23       	and	r24, r24
    21e0:	81 f0       	breq	.+32     	; 0x2202 <__vector_58+0x5e>
	{
		volatile uint8_t temp = fc.USART->DATA;						// clear interrupt flag
    21e2:	80 91 47 28 	lds	r24, 0x2847
    21e6:	90 91 48 28 	lds	r25, 0x2848
    21ea:	fc 01       	movw	r30, r24
    21ec:	80 81       	ld	r24, Z
    21ee:	89 83       	std	Y+1, r24	; 0x01
		temp++;														// Remove unused variable compiler warning
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	8f 5f       	subi	r24, 0xFF	; 255
    21f4:	89 83       	std	Y+1, r24	; 0x01
		fc.rx_ringbuff_overflow++;									// buffer overflow
    21f6:	80 91 a2 28 	lds	r24, 0x28A2
    21fa:	8f 5f       	subi	r24, 0xFF	; 255
    21fc:	80 93 a2 28 	sts	0x28A2, r24
    2200:	0a c0       	rjmp	.+20     	; 0x2216 <__vector_58+0x72>
	}
	else
	{
		RingBuffer_Insert(&fc.rx_ringbuff, fc.USART->DATA);			// read received byte into the ring buffer
    2202:	80 91 47 28 	lds	r24, 0x2847
    2206:	90 91 48 28 	lds	r25, 0x2848
    220a:	fc 01       	movw	r30, r24
    220c:	80 81       	ld	r24, Z
    220e:	68 2f       	mov	r22, r24
    2210:	8b e4       	ldi	r24, 0x4B	; 75
    2212:	98 e2       	ldi	r25, 0x28	; 40
    2214:	04 de       	rcall	.-1016   	; 0x1e1e <RingBuffer_Insert>
		//data = fc.USART->DATA;
	}		
}
    2216:	0f 90       	pop	r0
    2218:	df 91       	pop	r29
    221a:	cf 91       	pop	r28
    221c:	ff 91       	pop	r31
    221e:	ef 91       	pop	r30
    2220:	bf 91       	pop	r27
    2222:	af 91       	pop	r26
    2224:	9f 91       	pop	r25
    2226:	8f 91       	pop	r24
    2228:	7f 91       	pop	r23
    222a:	6f 91       	pop	r22
    222c:	5f 91       	pop	r21
    222e:	4f 91       	pop	r20
    2230:	3f 91       	pop	r19
    2232:	2f 91       	pop	r18
    2234:	0f 90       	pop	r0
    2236:	00 92 3b 00 	sts	0x003B, r0
    223a:	0f 90       	pop	r0
    223c:	00 92 3f 00 	sts	0x003F, r0
    2240:	0f 90       	pop	r0
    2242:	1f 90       	pop	r1
    2244:	18 95       	reti

00002246 <__vector_88>:
#endif

#ifdef SUN_UART
	/// Sun Sensor USART Receive interrupt handler
	ISR(SUN_UART_RXC_vect)
	{
    2246:	1f 92       	push	r1
    2248:	0f 92       	push	r0
    224a:	00 90 3f 00 	lds	r0, 0x003F
    224e:	0f 92       	push	r0
    2250:	11 24       	eor	r1, r1
    2252:	00 90 3b 00 	lds	r0, 0x003B
    2256:	0f 92       	push	r0
    2258:	2f 93       	push	r18
    225a:	3f 93       	push	r19
    225c:	4f 93       	push	r20
    225e:	5f 93       	push	r21
    2260:	6f 93       	push	r22
    2262:	7f 93       	push	r23
    2264:	8f 93       	push	r24
    2266:	9f 93       	push	r25
    2268:	af 93       	push	r26
    226a:	bf 93       	push	r27
    226c:	ef 93       	push	r30
    226e:	ff 93       	push	r31
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	1f 92       	push	r1
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
		if (RingBuffer_IsFull(&sun.rx_ringbuff))
    227a:	8e e7       	ldi	r24, 0x7E	; 126
    227c:	94 e2       	ldi	r25, 0x24	; 36
    227e:	ba dd       	rcall	.-1164   	; 0x1df4 <RingBuffer_IsFull>
    2280:	88 23       	and	r24, r24
    2282:	81 f0       	breq	.+32     	; 0x22a4 <__vector_88+0x5e>
		{
			volatile uint8_t temp = sun.USART->DATA;				// clear interrupt flag
    2284:	80 91 7a 24 	lds	r24, 0x247A
    2288:	90 91 7b 24 	lds	r25, 0x247B
    228c:	fc 01       	movw	r30, r24
    228e:	80 81       	ld	r24, Z
    2290:	89 83       	std	Y+1, r24	; 0x01
			temp++;													// Remove unused variable compiler warning
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	8f 5f       	subi	r24, 0xFF	; 255
    2296:	89 83       	std	Y+1, r24	; 0x01
			sun.rx_ringbuff_overflow++;								// buffer overflow
    2298:	80 91 d5 24 	lds	r24, 0x24D5
    229c:	8f 5f       	subi	r24, 0xFF	; 255
    229e:	80 93 d5 24 	sts	0x24D5, r24
    22a2:	0a c0       	rjmp	.+20     	; 0x22b8 <__vector_88+0x72>
		}
		else
		{
			RingBuffer_Insert(&sun.rx_ringbuff, sun.USART->DATA);	// read received byte into the ring buffer
    22a4:	80 91 7a 24 	lds	r24, 0x247A
    22a8:	90 91 7b 24 	lds	r25, 0x247B
    22ac:	fc 01       	movw	r30, r24
    22ae:	80 81       	ld	r24, Z
    22b0:	68 2f       	mov	r22, r24
    22b2:	8e e7       	ldi	r24, 0x7E	; 126
    22b4:	94 e2       	ldi	r25, 0x24	; 36
    22b6:	b3 dd       	rcall	.-1178   	; 0x1e1e <RingBuffer_Insert>
		}				
	}
    22b8:	0f 90       	pop	r0
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	ff 91       	pop	r31
    22c0:	ef 91       	pop	r30
    22c2:	bf 91       	pop	r27
    22c4:	af 91       	pop	r26
    22c6:	9f 91       	pop	r25
    22c8:	8f 91       	pop	r24
    22ca:	7f 91       	pop	r23
    22cc:	6f 91       	pop	r22
    22ce:	5f 91       	pop	r21
    22d0:	4f 91       	pop	r20
    22d2:	3f 91       	pop	r19
    22d4:	2f 91       	pop	r18
    22d6:	0f 90       	pop	r0
    22d8:	00 92 3b 00 	sts	0x003B, r0
    22dc:	0f 90       	pop	r0
    22de:	00 92 3f 00 	sts	0x003F, r0
    22e2:	0f 90       	pop	r0
    22e4:	1f 90       	pop	r1
    22e6:	18 95       	reti

000022e8 <__iCliRetVal>:
void sun_task	(void)
{
	// check if the buffer is free before writing to it
	if (sun.rx_byte_count == 0)
		read_Non_VCP_receive_buff(&sun);
}
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	f8 94       	cli
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	df 91       	pop	r29
    22f6:	cf 91       	pop	r28
    22f8:	08 95       	ret

000022fa <__iRestore>:
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	1f 92       	push	r1
    2300:	1f 92       	push	r1
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	89 83       	std	Y+1, r24	; 0x01
    2308:	9a 83       	std	Y+2, r25	; 0x02
    230a:	8f e3       	ldi	r24, 0x3F	; 63
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	29 81       	ldd	r18, Y+1	; 0x01
    2310:	3a 81       	ldd	r19, Y+2	; 0x02
    2312:	f9 01       	movw	r30, r18
    2314:	20 81       	ld	r18, Z
    2316:	fc 01       	movw	r30, r24
    2318:	20 83       	st	Z, r18
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	08 95       	ret

00002324 <Queue_RingBuffer_GetCount>:
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	25 97       	sbiw	r28, 0x05	; 5
    232e:	cd bf       	out	0x3d, r28	; 61
    2330:	de bf       	out	0x3e, r29	; 62
    2332:	8c 83       	std	Y+4, r24	; 0x04
    2334:	9d 83       	std	Y+5, r25	; 0x05
    2336:	8f e3       	ldi	r24, 0x3F	; 63
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	fc 01       	movw	r30, r24
    233c:	80 81       	ld	r24, Z
    233e:	8b 83       	std	Y+3, r24	; 0x03
    2340:	d3 df       	rcall	.-90     	; 0x22e8 <__iCliRetVal>
    2342:	8a 83       	std	Y+2, r24	; 0x02
    2344:	06 c0       	rjmp	.+12     	; 0x2352 <Queue_RingBuffer_GetCount+0x2e>
    2346:	8c 81       	ldd	r24, Y+4	; 0x04
    2348:	9d 81       	ldd	r25, Y+5	; 0x05
    234a:	fc 01       	movw	r30, r24
    234c:	86 85       	ldd	r24, Z+14	; 0x0e
    234e:	89 83       	std	Y+1, r24	; 0x01
    2350:	1a 82       	std	Y+2, r1	; 0x02
    2352:	8a 81       	ldd	r24, Y+2	; 0x02
    2354:	88 23       	and	r24, r24
    2356:	b9 f7       	brne	.-18     	; 0x2346 <Queue_RingBuffer_GetCount+0x22>
    2358:	ce 01       	movw	r24, r28
    235a:	03 96       	adiw	r24, 0x03	; 3
    235c:	ce df       	rcall	.-100    	; 0x22fa <__iRestore>
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	25 96       	adiw	r28, 0x05	; 5
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	df 91       	pop	r29
    2368:	cf 91       	pop	r28
    236a:	08 95       	ret

0000236c <Queue_RingBuffer_IsEmpty>:
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	1f 92       	push	r1
    2372:	1f 92       	push	r1
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	89 83       	std	Y+1, r24	; 0x01
    237a:	9a 83       	std	Y+2, r25	; 0x02
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	9a 81       	ldd	r25, Y+2	; 0x02
    2380:	d1 df       	rcall	.-94     	; 0x2324 <Queue_RingBuffer_GetCount>
    2382:	98 2f       	mov	r25, r24
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	99 23       	and	r25, r25
    2388:	09 f0       	breq	.+2      	; 0x238c <Queue_RingBuffer_IsEmpty+0x20>
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	08 95       	ret

00002396 <Queue_RingBuffer_Insert>:
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	25 97       	sbiw	r28, 0x05	; 5
    23a0:	cd bf       	out	0x3d, r28	; 61
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	8b 83       	std	Y+3, r24	; 0x03
    23a6:	9c 83       	std	Y+4, r25	; 0x04
    23a8:	6d 83       	std	Y+5, r22	; 0x05
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	9c 81       	ldd	r25, Y+4	; 0x04
    23ae:	fc 01       	movw	r30, r24
    23b0:	82 85       	ldd	r24, Z+10	; 0x0a
    23b2:	93 85       	ldd	r25, Z+11	; 0x0b
    23b4:	2d 81       	ldd	r18, Y+5	; 0x05
    23b6:	fc 01       	movw	r30, r24
    23b8:	20 83       	st	Z, r18
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	fc 01       	movw	r30, r24
    23c0:	82 85       	ldd	r24, Z+10	; 0x0a
    23c2:	93 85       	ldd	r25, Z+11	; 0x0b
    23c4:	9c 01       	movw	r18, r24
    23c6:	2f 5f       	subi	r18, 0xFF	; 255
    23c8:	3f 4f       	sbci	r19, 0xFF	; 255
    23ca:	8b 81       	ldd	r24, Y+3	; 0x03
    23cc:	9c 81       	ldd	r25, Y+4	; 0x04
    23ce:	fc 01       	movw	r30, r24
    23d0:	22 87       	std	Z+10, r18	; 0x0a
    23d2:	33 87       	std	Z+11, r19	; 0x0b
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	fc 01       	movw	r30, r24
    23da:	22 85       	ldd	r18, Z+10	; 0x0a
    23dc:	33 85       	ldd	r19, Z+11	; 0x0b
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	9c 81       	ldd	r25, Y+4	; 0x04
    23e2:	0a 96       	adiw	r24, 0x0a	; 10
    23e4:	28 17       	cp	r18, r24
    23e6:	39 07       	cpc	r19, r25
    23e8:	39 f4       	brne	.+14     	; 0x23f8 <Queue_RingBuffer_Insert+0x62>
    23ea:	2b 81       	ldd	r18, Y+3	; 0x03
    23ec:	3c 81       	ldd	r19, Y+4	; 0x04
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	9c 81       	ldd	r25, Y+4	; 0x04
    23f2:	fc 01       	movw	r30, r24
    23f4:	22 87       	std	Z+10, r18	; 0x0a
    23f6:	33 87       	std	Z+11, r19	; 0x0b
    23f8:	8f e3       	ldi	r24, 0x3F	; 63
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	fc 01       	movw	r30, r24
    23fe:	80 81       	ld	r24, Z
    2400:	8a 83       	std	Y+2, r24	; 0x02
    2402:	72 df       	rcall	.-284    	; 0x22e8 <__iCliRetVal>
    2404:	89 83       	std	Y+1, r24	; 0x01
    2406:	0b c0       	rjmp	.+22     	; 0x241e <Queue_RingBuffer_Insert+0x88>
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	9c 81       	ldd	r25, Y+4	; 0x04
    240c:	fc 01       	movw	r30, r24
    240e:	86 85       	ldd	r24, Z+14	; 0x0e
    2410:	28 2f       	mov	r18, r24
    2412:	2f 5f       	subi	r18, 0xFF	; 255
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	fc 01       	movw	r30, r24
    241a:	26 87       	std	Z+14, r18	; 0x0e
    241c:	19 82       	std	Y+1, r1	; 0x01
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	88 23       	and	r24, r24
    2422:	91 f7       	brne	.-28     	; 0x2408 <Queue_RingBuffer_Insert+0x72>
    2424:	ce 01       	movw	r24, r28
    2426:	02 96       	adiw	r24, 0x02	; 2
    2428:	68 df       	rcall	.-304    	; 0x22fa <__iRestore>
    242a:	25 96       	adiw	r28, 0x05	; 5
    242c:	cd bf       	out	0x3d, r28	; 61
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	df 91       	pop	r29
    2432:	cf 91       	pop	r28
    2434:	08 95       	ret

00002436 <Queue_RingBuffer_Remove>:
    2436:	cf 93       	push	r28
    2438:	df 93       	push	r29
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
    243e:	25 97       	sbiw	r28, 0x05	; 5
    2440:	cd bf       	out	0x3d, r28	; 61
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	8c 83       	std	Y+4, r24	; 0x04
    2446:	9d 83       	std	Y+5, r25	; 0x05
    2448:	8c 81       	ldd	r24, Y+4	; 0x04
    244a:	9d 81       	ldd	r25, Y+5	; 0x05
    244c:	fc 01       	movw	r30, r24
    244e:	84 85       	ldd	r24, Z+12	; 0x0c
    2450:	95 85       	ldd	r25, Z+13	; 0x0d
    2452:	fc 01       	movw	r30, r24
    2454:	80 81       	ld	r24, Z
    2456:	8a 83       	std	Y+2, r24	; 0x02
    2458:	8c 81       	ldd	r24, Y+4	; 0x04
    245a:	9d 81       	ldd	r25, Y+5	; 0x05
    245c:	fc 01       	movw	r30, r24
    245e:	84 85       	ldd	r24, Z+12	; 0x0c
    2460:	95 85       	ldd	r25, Z+13	; 0x0d
    2462:	9c 01       	movw	r18, r24
    2464:	2f 5f       	subi	r18, 0xFF	; 255
    2466:	3f 4f       	sbci	r19, 0xFF	; 255
    2468:	8c 81       	ldd	r24, Y+4	; 0x04
    246a:	9d 81       	ldd	r25, Y+5	; 0x05
    246c:	fc 01       	movw	r30, r24
    246e:	24 87       	std	Z+12, r18	; 0x0c
    2470:	35 87       	std	Z+13, r19	; 0x0d
    2472:	8c 81       	ldd	r24, Y+4	; 0x04
    2474:	9d 81       	ldd	r25, Y+5	; 0x05
    2476:	fc 01       	movw	r30, r24
    2478:	24 85       	ldd	r18, Z+12	; 0x0c
    247a:	35 85       	ldd	r19, Z+13	; 0x0d
    247c:	8c 81       	ldd	r24, Y+4	; 0x04
    247e:	9d 81       	ldd	r25, Y+5	; 0x05
    2480:	0a 96       	adiw	r24, 0x0a	; 10
    2482:	28 17       	cp	r18, r24
    2484:	39 07       	cpc	r19, r25
    2486:	39 f4       	brne	.+14     	; 0x2496 <Queue_RingBuffer_Remove+0x60>
    2488:	2c 81       	ldd	r18, Y+4	; 0x04
    248a:	3d 81       	ldd	r19, Y+5	; 0x05
    248c:	8c 81       	ldd	r24, Y+4	; 0x04
    248e:	9d 81       	ldd	r25, Y+5	; 0x05
    2490:	fc 01       	movw	r30, r24
    2492:	24 87       	std	Z+12, r18	; 0x0c
    2494:	35 87       	std	Z+13, r19	; 0x0d
    2496:	8f e3       	ldi	r24, 0x3F	; 63
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	fc 01       	movw	r30, r24
    249c:	80 81       	ld	r24, Z
    249e:	8b 83       	std	Y+3, r24	; 0x03
    24a0:	23 df       	rcall	.-442    	; 0x22e8 <__iCliRetVal>
    24a2:	89 83       	std	Y+1, r24	; 0x01
    24a4:	0b c0       	rjmp	.+22     	; 0x24bc <Queue_RingBuffer_Remove+0x86>
    24a6:	8c 81       	ldd	r24, Y+4	; 0x04
    24a8:	9d 81       	ldd	r25, Y+5	; 0x05
    24aa:	fc 01       	movw	r30, r24
    24ac:	86 85       	ldd	r24, Z+14	; 0x0e
    24ae:	28 2f       	mov	r18, r24
    24b0:	21 50       	subi	r18, 0x01	; 1
    24b2:	8c 81       	ldd	r24, Y+4	; 0x04
    24b4:	9d 81       	ldd	r25, Y+5	; 0x05
    24b6:	fc 01       	movw	r30, r24
    24b8:	26 87       	std	Z+14, r18	; 0x0e
    24ba:	19 82       	std	Y+1, r1	; 0x01
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	88 23       	and	r24, r24
    24c0:	91 f7       	brne	.-28     	; 0x24a6 <Queue_RingBuffer_Remove+0x70>
    24c2:	ce 01       	movw	r24, r28
    24c4:	03 96       	adiw	r24, 0x03	; 3
    24c6:	19 df       	rcall	.-462    	; 0x22fa <__iRestore>
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	25 96       	adiw	r28, 0x05	; 5
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	de bf       	out	0x3e, r29	; 62
    24d0:	df 91       	pop	r29
    24d2:	cf 91       	pop	r28
    24d4:	08 95       	ret

000024d6 <gps_task>:
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e2       	ldi	r25, 0x20	; 32
    24e2:	88 da       	rcall	.-2800   	; 0x19f4 <read_VCP_receive_buff>
    24e4:	80 91 5f 20 	lds	r24, 0x205F
    24e8:	88 23       	and	r24, r24
    24ea:	61 f0       	breq	.+24     	; 0x2504 <gps_task+0x2e>
    24ec:	80 91 54 20 	lds	r24, 0x2054
    24f0:	90 91 55 20 	lds	r25, 0x2055
    24f4:	20 e5       	ldi	r18, 0x50	; 80
    24f6:	fc 01       	movw	r30, r24
    24f8:	a2 eb       	ldi	r26, 0xB2	; 178
    24fa:	b8 e2       	ldi	r27, 0x28	; 40
    24fc:	01 90       	ld	r0, Z+
    24fe:	0d 92       	st	X+, r0
    2500:	2a 95       	dec	r18
    2502:	e1 f7       	brne	.-8      	; 0x24fc <gps_task+0x26>
    2504:	df 91       	pop	r29
    2506:	cf 91       	pop	r28
    2508:	08 95       	ret

0000250a <power_task>:
    250a:	cf 93       	push	r28
    250c:	df 93       	push	r29
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
    2512:	80 e7       	ldi	r24, 0x70	; 112
    2514:	91 e2       	ldi	r25, 0x21	; 33
    2516:	6e da       	rcall	.-2852   	; 0x19f4 <read_VCP_receive_buff>
    2518:	80 91 ce 21 	lds	r24, 0x21CE
    251c:	88 23       	and	r24, r24
    251e:	61 f0       	breq	.+24     	; 0x2538 <power_task+0x2e>
    2520:	80 91 c3 21 	lds	r24, 0x21C3
    2524:	90 91 c4 21 	lds	r25, 0x21C4
    2528:	20 e6       	ldi	r18, 0x60	; 96
    252a:	fc 01       	movw	r30, r24
    252c:	a0 e2       	ldi	r26, 0x20	; 32
    252e:	b9 e2       	ldi	r27, 0x29	; 41
    2530:	01 90       	ld	r0, Z+
    2532:	0d 92       	st	X+, r0
    2534:	2a 95       	dec	r18
    2536:	e1 f7       	brne	.-8      	; 0x2530 <power_task+0x26>
    2538:	df 91       	pop	r29
    253a:	cf 91       	pop	r28
    253c:	08 95       	ret

0000253e <fc_task>:
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	cc 56       	subi	r28, 0x6C	; 108
    2548:	d1 09       	sbc	r29, r1
    254a:	cd bf       	out	0x3d, r28	; 61
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	87 e4       	ldi	r24, 0x47	; 71
    2550:	98 e2       	ldi	r25, 0x28	; 40
    2552:	50 da       	rcall	.-2912   	; 0x19f4 <read_VCP_receive_buff>
    2554:	80 91 a5 28 	lds	r24, 0x28A5
    2558:	88 23       	and	r24, r24
    255a:	09 f4       	brne	.+2      	; 0x255e <fc_task+0x20>
    255c:	53 c0       	rjmp	.+166    	; 0x2604 <fc_task+0xc6>
    255e:	10 92 a5 28 	sts	0x28A5, r1
    2562:	10 92 db 21 	sts	0x21DB, r1
    2566:	80 91 a9 28 	lds	r24, 0x28A9
    256a:	88 2f       	mov	r24, r24
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	85 30       	cpi	r24, 0x05	; 5
    2570:	91 05       	cpc	r25, r1
    2572:	91 f1       	breq	.+100    	; 0x25d8 <fc_task+0x9a>
    2574:	86 30       	cpi	r24, 0x06	; 6
    2576:	91 05       	cpc	r25, r1
    2578:	24 f4       	brge	.+8      	; 0x2582 <fc_task+0x44>
    257a:	81 30       	cpi	r24, 0x01	; 1
    257c:	91 05       	cpc	r25, r1
    257e:	41 f0       	breq	.+16     	; 0x2590 <fc_task+0x52>
    2580:	40 c0       	rjmp	.+128    	; 0x2602 <fc_task+0xc4>
    2582:	8a 30       	cpi	r24, 0x0A	; 10
    2584:	91 05       	cpc	r25, r1
    2586:	69 f1       	breq	.+90     	; 0x25e2 <fc_task+0xa4>
    2588:	88 33       	cpi	r24, 0x38	; 56
    258a:	91 05       	cpc	r25, r1
    258c:	59 f0       	breq	.+22     	; 0x25a4 <fc_task+0x66>
    258e:	39 c0       	rjmp	.+114    	; 0x2602 <fc_task+0xc4>
    2590:	60 e7       	ldi	r22, 0x70	; 112
    2592:	71 e2       	ldi	r23, 0x21	; 33
    2594:	87 e4       	ldi	r24, 0x47	; 71
    2596:	98 e2       	ldi	r25, 0x28	; 40
    2598:	80 db       	rcall	.-2304   	; 0x1c9a <VCP_DMA_transmit>
    259a:	10 92 b1 2c 	sts	0x2CB1, r1
    259e:	10 92 b2 2c 	sts	0x2CB2, r1
    25a2:	30 c0       	rjmp	.+96     	; 0x2604 <fc_task+0xc6>
    25a4:	40 91 a3 28 	lds	r20, 0x28A3
    25a8:	50 91 a4 28 	lds	r21, 0x28A4
    25ac:	20 91 9a 28 	lds	r18, 0x289A
    25b0:	30 91 9b 28 	lds	r19, 0x289B
    25b4:	80 91 d1 24 	lds	r24, 0x24D1
    25b8:	90 91 d2 24 	lds	r25, 0x24D2
    25bc:	b9 01       	movw	r22, r18
    25be:	bb d4       	rcall	.+2422   	; 0x2f36 <memcpy>
    25c0:	80 91 a3 28 	lds	r24, 0x28A3
    25c4:	90 91 a4 28 	lds	r25, 0x28A4
    25c8:	80 93 d9 24 	sts	0x24D9, r24
    25cc:	90 93 da 24 	sts	0x24DA, r25
    25d0:	8a e7       	ldi	r24, 0x7A	; 122
    25d2:	94 e2       	ldi	r25, 0x24	; 36
    25d4:	00 db       	rcall	.-2560   	; 0x1bd6 <DMA_transmit>
    25d6:	16 c0       	rjmp	.+44     	; 0x2604 <fc_task+0xc6>
    25d8:	6b e0       	ldi	r22, 0x0B	; 11
    25da:	80 e5       	ldi	r24, 0x50	; 80
    25dc:	95 e2       	ldi	r25, 0x25	; 37
    25de:	db de       	rcall	.-586    	; 0x2396 <Queue_RingBuffer_Insert>
    25e0:	11 c0       	rjmp	.+34     	; 0x2604 <fc_task+0xc6>
    25e2:	80 91 9a 28 	lds	r24, 0x289A
    25e6:	90 91 9b 28 	lds	r25, 0x289B
    25ea:	21 e2       	ldi	r18, 0x21	; 33
    25ec:	fc 01       	movw	r30, r24
    25ee:	a9 e5       	ldi	r26, 0x59	; 89
    25f0:	b4 e2       	ldi	r27, 0x24	; 36
    25f2:	01 90       	ld	r0, Z+
    25f4:	0d 92       	st	X+, r0
    25f6:	2a 95       	dec	r18
    25f8:	e1 f7       	brne	.-8      	; 0x25f2 <fc_task+0xb4>
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	80 93 db 21 	sts	0x21DB, r24
    2600:	01 c0       	rjmp	.+2      	; 0x2604 <fc_task+0xc6>
    2602:	00 00       	nop
    2604:	88 e3       	ldi	r24, 0x38	; 56
    2606:	98 e2       	ldi	r25, 0x28	; 40
    2608:	b1 de       	rcall	.-670    	; 0x236c <Queue_RingBuffer_IsEmpty>
    260a:	98 2f       	mov	r25, r24
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	89 27       	eor	r24, r25
    2610:	88 23       	and	r24, r24
    2612:	09 f4       	brne	.+2      	; 0x2616 <fc_task+0xd8>
    2614:	64 c0       	rjmp	.+200    	; 0x26de <fc_task+0x1a0>
    2616:	88 e3       	ldi	r24, 0x38	; 56
    2618:	98 e2       	ldi	r25, 0x28	; 40
    261a:	0d df       	rcall	.-486    	; 0x2436 <Queue_RingBuffer_Remove>
    261c:	89 83       	std	Y+1, r24	; 0x01
    261e:	89 81       	ldd	r24, Y+1	; 0x01
    2620:	88 2f       	mov	r24, r24
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	86 30       	cpi	r24, 0x06	; 6
    2626:	91 05       	cpc	r25, r1
    2628:	d9 f0       	breq	.+54     	; 0x2660 <fc_task+0x122>
    262a:	87 30       	cpi	r24, 0x07	; 7
    262c:	91 05       	cpc	r25, r1
    262e:	3c f4       	brge	.+14     	; 0x263e <fc_task+0x100>
    2630:	81 30       	cpi	r24, 0x01	; 1
    2632:	91 05       	cpc	r25, r1
    2634:	59 f0       	breq	.+22     	; 0x264c <fc_task+0x10e>
    2636:	85 30       	cpi	r24, 0x05	; 5
    2638:	91 05       	cpc	r25, r1
    263a:	31 f1       	breq	.+76     	; 0x2688 <fc_task+0x14a>
    263c:	45 c0       	rjmp	.+138    	; 0x26c8 <fc_task+0x18a>
    263e:	8a 30       	cpi	r24, 0x0A	; 10
    2640:	91 05       	cpc	r25, r1
    2642:	61 f1       	breq	.+88     	; 0x269c <fc_task+0x15e>
    2644:	88 33       	cpi	r24, 0x38	; 56
    2646:	91 05       	cpc	r25, r1
    2648:	a9 f0       	breq	.+42     	; 0x2674 <fc_task+0x136>
    264a:	3e c0       	rjmp	.+124    	; 0x26c8 <fc_task+0x18a>
    264c:	8b e6       	ldi	r24, 0x6B	; 107
    264e:	e0 e7       	ldi	r30, 0x70	; 112
    2650:	f1 e2       	ldi	r31, 0x21	; 33
    2652:	de 01       	movw	r26, r28
    2654:	12 96       	adiw	r26, 0x02	; 2
    2656:	01 90       	ld	r0, Z+
    2658:	0d 92       	st	X+, r0
    265a:	8a 95       	dec	r24
    265c:	e1 f7       	brne	.-8      	; 0x2656 <fc_task+0x118>
    265e:	37 c0       	rjmp	.+110    	; 0x26ce <fc_task+0x190>
    2660:	8b e6       	ldi	r24, 0x6B	; 107
    2662:	e1 e0       	ldi	r30, 0x01	; 1
    2664:	f0 e2       	ldi	r31, 0x20	; 32
    2666:	de 01       	movw	r26, r28
    2668:	12 96       	adiw	r26, 0x02	; 2
    266a:	01 90       	ld	r0, Z+
    266c:	0d 92       	st	X+, r0
    266e:	8a 95       	dec	r24
    2670:	e1 f7       	brne	.-8      	; 0x266a <fc_task+0x12c>
    2672:	2d c0       	rjmp	.+90     	; 0x26ce <fc_task+0x190>
    2674:	8b e6       	ldi	r24, 0x6B	; 107
    2676:	ea e7       	ldi	r30, 0x7A	; 122
    2678:	f4 e2       	ldi	r31, 0x24	; 36
    267a:	de 01       	movw	r26, r28
    267c:	12 96       	adiw	r26, 0x02	; 2
    267e:	01 90       	ld	r0, Z+
    2680:	0d 92       	st	X+, r0
    2682:	8a 95       	dec	r24
    2684:	e1 f7       	brne	.-8      	; 0x267e <fc_task+0x140>
    2686:	23 c0       	rjmp	.+70     	; 0x26ce <fc_task+0x190>
    2688:	8b e6       	ldi	r24, 0x6B	; 107
    268a:	e7 e6       	ldi	r30, 0x67	; 103
    268c:	f7 e2       	ldi	r31, 0x27	; 39
    268e:	de 01       	movw	r26, r28
    2690:	12 96       	adiw	r26, 0x02	; 2
    2692:	01 90       	ld	r0, Z+
    2694:	0d 92       	st	X+, r0
    2696:	8a 95       	dec	r24
    2698:	e1 f7       	brne	.-8      	; 0x2692 <fc_task+0x154>
    269a:	19 c0       	rjmp	.+50     	; 0x26ce <fc_task+0x190>
    269c:	8b e6       	ldi	r24, 0x6B	; 107
    269e:	e5 ee       	ldi	r30, 0xE5	; 229
    26a0:	f4 e2       	ldi	r31, 0x24	; 36
    26a2:	de 01       	movw	r26, r28
    26a4:	12 96       	adiw	r26, 0x02	; 2
    26a6:	01 90       	ld	r0, Z+
    26a8:	0d 92       	st	X+, r0
    26aa:	8a 95       	dec	r24
    26ac:	e1 f7       	brne	.-8      	; 0x26a6 <fc_task+0x168>
    26ae:	82 e8       	ldi	r24, 0x82	; 130
    26b0:	99 e2       	ldi	r25, 0x29	; 41
    26b2:	80 93 38 25 	sts	0x2538, r24
    26b6:	90 93 39 25 	sts	0x2539, r25
    26ba:	83 e0       	ldi	r24, 0x03	; 3
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	80 93 41 25 	sts	0x2541, r24
    26c2:	90 93 42 25 	sts	0x2542, r25
    26c6:	03 c0       	rjmp	.+6      	; 0x26ce <fc_task+0x190>
    26c8:	8a ea       	ldi	r24, 0xAA	; 170
    26ca:	89 83       	std	Y+1, r24	; 0x01
    26cc:	00 00       	nop
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	8a 3a       	cpi	r24, 0xAA	; 170
    26d2:	29 f0       	breq	.+10     	; 0x26de <fc_task+0x1a0>
    26d4:	ce 01       	movw	r24, r28
    26d6:	02 96       	adiw	r24, 0x02	; 2
    26d8:	67 e4       	ldi	r22, 0x47	; 71
    26da:	78 e2       	ldi	r23, 0x28	; 40
    26dc:	de da       	rcall	.-2628   	; 0x1c9a <VCP_DMA_transmit>
    26de:	c4 59       	subi	r28, 0x94	; 148
    26e0:	df 4f       	sbci	r29, 0xFF	; 255
    26e2:	cd bf       	out	0x3d, r28	; 61
    26e4:	de bf       	out	0x3e, r29	; 62
    26e6:	df 91       	pop	r29
    26e8:	cf 91       	pop	r28
    26ea:	08 95       	ret

000026ec <cdhib_task>:
    26ec:	cf 93       	push	r28
    26ee:	df 93       	push	r29
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
    26f4:	80 91 db 21 	lds	r24, 0x21DB
    26f8:	88 23       	and	r24, r24
    26fa:	c9 f1       	breq	.+114    	; 0x276e <cdhib_task+0x82>
    26fc:	10 92 db 21 	sts	0x21DB, r1
    2700:	80 91 59 24 	lds	r24, 0x2459
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	8f 30       	cpi	r24, 0x0F	; 15
    270a:	91 05       	cpc	r25, r1
    270c:	29 f1       	breq	.+74     	; 0x2758 <cdhib_task+0x6c>
    270e:	80 3f       	cpi	r24, 0xF0	; 240
    2710:	91 05       	cpc	r25, r1
    2712:	39 f0       	breq	.+14     	; 0x2722 <cdhib_task+0x36>
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	51 f5       	brne	.+84     	; 0x276c <cdhib_task+0x80>
    2718:	6a e0       	ldi	r22, 0x0A	; 10
    271a:	88 e3       	ldi	r24, 0x38	; 56
    271c:	98 e2       	ldi	r25, 0x28	; 40
    271e:	3b de       	rcall	.-906    	; 0x2396 <Queue_RingBuffer_Insert>
    2720:	26 c0       	rjmp	.+76     	; 0x276e <cdhib_task+0x82>
    2722:	80 91 5a 24 	lds	r24, 0x245A
    2726:	90 91 5b 24 	lds	r25, 0x245B
    272a:	84 31       	cpi	r24, 0x14	; 20
    272c:	91 05       	cpc	r25, r1
    272e:	80 f0       	brcs	.+32     	; 0x2750 <cdhib_task+0x64>
    2730:	80 91 5a 24 	lds	r24, 0x245A
    2734:	90 91 5b 24 	lds	r25, 0x245B
    2738:	8d 32       	cpi	r24, 0x2D	; 45
    273a:	21 e0       	ldi	r18, 0x01	; 1
    273c:	92 07       	cpc	r25, r18
    273e:	40 f4       	brcc	.+16     	; 0x2750 <cdhib_task+0x64>
    2740:	80 91 5a 24 	lds	r24, 0x245A
    2744:	90 91 5b 24 	lds	r25, 0x245B
    2748:	80 93 80 29 	sts	0x2980, r24
    274c:	90 93 81 29 	sts	0x2981, r25
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	80 93 6f 21 	sts	0x216F, r24
    2756:	0b c0       	rjmp	.+22     	; 0x276e <cdhib_task+0x82>
    2758:	8e e1       	ldi	r24, 0x1E	; 30
    275a:	ec e5       	ldi	r30, 0x5C	; 92
    275c:	f4 e2       	ldi	r31, 0x24	; 36
    275e:	a2 e0       	ldi	r26, 0x02	; 2
    2760:	b9 e2       	ldi	r27, 0x29	; 41
    2762:	01 90       	ld	r0, Z+
    2764:	0d 92       	st	X+, r0
    2766:	8a 95       	dec	r24
    2768:	e1 f7       	brne	.-8      	; 0x2762 <cdhib_task+0x76>
    276a:	01 c0       	rjmp	.+2      	; 0x276e <cdhib_task+0x82>
    276c:	00 00       	nop
    276e:	80 91 58 24 	lds	r24, 0x2458
    2772:	88 23       	and	r24, r24
    2774:	b1 f0       	breq	.+44     	; 0x27a2 <cdhib_task+0xb6>
    2776:	10 92 58 24 	sts	0x2458, r1
    277a:	80 91 6c 20 	lds	r24, 0x206C
    277e:	88 2f       	mov	r24, r24
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	80 3f       	cpi	r24, 0xF0	; 240
    2784:	91 05       	cpc	r25, r1
    2786:	61 f4       	brne	.+24     	; 0x27a0 <cdhib_task+0xb4>
    2788:	80 91 6d 20 	lds	r24, 0x206D
    278c:	90 91 6e 20 	lds	r25, 0x206E
    2790:	80 93 80 29 	sts	0x2980, r24
    2794:	90 93 81 29 	sts	0x2981, r25
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	80 93 6f 21 	sts	0x216F, r24
    279e:	01 c0       	rjmp	.+2      	; 0x27a2 <cdhib_task+0xb6>
    27a0:	00 00       	nop
    27a2:	80 91 b9 2c 	lds	r24, 0x2CB9
    27a6:	88 23       	and	r24, r24
    27a8:	11 f0       	breq	.+4      	; 0x27ae <cdhib_task+0xc2>
    27aa:	0e 94 90 04 	call	0x920	; 0x920 <switch_to_ext_osc>
    27ae:	80 91 b1 2c 	lds	r24, 0x2CB1
    27b2:	90 91 b2 2c 	lds	r25, 0x2CB2
    27b6:	88 35       	cpi	r24, 0x58	; 88
    27b8:	22 e0       	ldi	r18, 0x02	; 2
    27ba:	92 07       	cpc	r25, r18
    27bc:	a8 f0       	brcs	.+42     	; 0x27e8 <cdhib_task+0xfc>
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	90 e2       	ldi	r25, 0x20	; 32
    27c2:	80 93 38 25 	sts	0x2538, r24
    27c6:	90 93 39 25 	sts	0x2539, r25
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	80 93 41 25 	sts	0x2541, r24
    27d2:	90 93 42 25 	sts	0x2542, r25
    27d6:	60 e7       	ldi	r22, 0x70	; 112
    27d8:	71 e2       	ldi	r23, 0x21	; 33
    27da:	85 ee       	ldi	r24, 0xE5	; 229
    27dc:	94 e2       	ldi	r25, 0x24	; 36
    27de:	5d da       	rcall	.-2886   	; 0x1c9a <VCP_DMA_transmit>
    27e0:	10 92 b1 2c 	sts	0x2CB1, r1
    27e4:	10 92 b2 2c 	sts	0x2CB2, r1
    27e8:	df 91       	pop	r29
    27ea:	cf 91       	pop	r28
    27ec:	08 95       	ret

000027ee <radio_task>:
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	1f 92       	push	r1
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	87 e6       	ldi	r24, 0x67	; 103
    27fa:	97 e2       	ldi	r25, 0x27	; 39
    27fc:	fb d8       	rcall	.-3594   	; 0x19f4 <read_VCP_receive_buff>
    27fe:	80 91 c5 27 	lds	r24, 0x27C5
    2802:	88 23       	and	r24, r24
    2804:	09 f4       	brne	.+2      	; 0x2808 <radio_task+0x1a>
    2806:	55 c0       	rjmp	.+170    	; 0x28b2 <radio_task+0xc4>
    2808:	10 92 c5 27 	sts	0x27C5, r1
    280c:	10 92 58 24 	sts	0x2458, r1
    2810:	80 91 c9 27 	lds	r24, 0x27C9
    2814:	88 2f       	mov	r24, r24
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	8a 30       	cpi	r24, 0x0A	; 10
    281a:	91 05       	cpc	r25, r1
    281c:	b9 f1       	breq	.+110    	; 0x288c <radio_task+0x9e>
    281e:	8b 30       	cpi	r24, 0x0B	; 11
    2820:	91 05       	cpc	r25, r1
    2822:	24 f4       	brge	.+8      	; 0x282c <radio_task+0x3e>
    2824:	81 30       	cpi	r24, 0x01	; 1
    2826:	91 05       	cpc	r25, r1
    2828:	41 f0       	breq	.+16     	; 0x283a <radio_task+0x4c>
    282a:	42 c0       	rjmp	.+132    	; 0x28b0 <radio_task+0xc2>
    282c:	8b 30       	cpi	r24, 0x0B	; 11
    282e:	91 05       	cpc	r25, r1
    2830:	41 f1       	breq	.+80     	; 0x2882 <radio_task+0x94>
    2832:	88 33       	cpi	r24, 0x38	; 56
    2834:	91 05       	cpc	r25, r1
    2836:	59 f0       	breq	.+22     	; 0x284e <radio_task+0x60>
    2838:	3b c0       	rjmp	.+118    	; 0x28b0 <radio_task+0xc2>
    283a:	60 e7       	ldi	r22, 0x70	; 112
    283c:	71 e2       	ldi	r23, 0x21	; 33
    283e:	87 e6       	ldi	r24, 0x67	; 103
    2840:	97 e2       	ldi	r25, 0x27	; 39
    2842:	2b da       	rcall	.-2986   	; 0x1c9a <VCP_DMA_transmit>
    2844:	10 92 b1 2c 	sts	0x2CB1, r1
    2848:	10 92 b2 2c 	sts	0x2CB2, r1
    284c:	32 c0       	rjmp	.+100    	; 0x28b2 <radio_task+0xc4>
    284e:	40 91 c3 27 	lds	r20, 0x27C3
    2852:	50 91 c4 27 	lds	r21, 0x27C4
    2856:	20 91 ba 27 	lds	r18, 0x27BA
    285a:	30 91 bb 27 	lds	r19, 0x27BB
    285e:	80 91 d1 24 	lds	r24, 0x24D1
    2862:	90 91 d2 24 	lds	r25, 0x24D2
    2866:	b9 01       	movw	r22, r18
    2868:	66 d3       	rcall	.+1740   	; 0x2f36 <memcpy>
    286a:	80 91 c3 27 	lds	r24, 0x27C3
    286e:	90 91 c4 27 	lds	r25, 0x27C4
    2872:	80 93 d9 24 	sts	0x24D9, r24
    2876:	90 93 da 24 	sts	0x24DA, r25
    287a:	8a e7       	ldi	r24, 0x7A	; 122
    287c:	94 e2       	ldi	r25, 0x24	; 36
    287e:	ab d9       	rcall	.-3242   	; 0x1bd6 <DMA_transmit>
    2880:	18 c0       	rjmp	.+48     	; 0x28b2 <radio_task+0xc4>
    2882:	65 e0       	ldi	r22, 0x05	; 5
    2884:	88 e3       	ldi	r24, 0x38	; 56
    2886:	98 e2       	ldi	r25, 0x28	; 40
    2888:	86 dd       	rcall	.-1268   	; 0x2396 <Queue_RingBuffer_Insert>
    288a:	13 c0       	rjmp	.+38     	; 0x28b2 <radio_task+0xc4>
    288c:	80 91 ba 27 	lds	r24, 0x27BA
    2890:	90 91 bb 27 	lds	r25, 0x27BB
    2894:	fc 01       	movw	r30, r24
    2896:	80 81       	ld	r24, Z
    2898:	91 81       	ldd	r25, Z+1	; 0x01
    289a:	a2 81       	ldd	r26, Z+2	; 0x02
    289c:	80 93 6c 20 	sts	0x206C, r24
    28a0:	90 93 6d 20 	sts	0x206D, r25
    28a4:	a0 93 6e 20 	sts	0x206E, r26
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	80 93 58 24 	sts	0x2458, r24
    28ae:	01 c0       	rjmp	.+2      	; 0x28b2 <radio_task+0xc4>
    28b0:	00 00       	nop
    28b2:	80 e5       	ldi	r24, 0x50	; 80
    28b4:	95 e2       	ldi	r25, 0x25	; 37
    28b6:	5a dd       	rcall	.-1356   	; 0x236c <Queue_RingBuffer_IsEmpty>
    28b8:	98 2f       	mov	r25, r24
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	89 27       	eor	r24, r25
    28be:	88 23       	and	r24, r24
    28c0:	09 f1       	breq	.+66     	; 0x2904 <radio_task+0x116>
    28c2:	80 e5       	ldi	r24, 0x50	; 80
    28c4:	95 e2       	ldi	r25, 0x25	; 37
    28c6:	b7 dd       	rcall	.-1170   	; 0x2436 <Queue_RingBuffer_Remove>
    28c8:	89 83       	std	Y+1, r24	; 0x01
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	8b 30       	cpi	r24, 0x0B	; 11
    28ce:	31 f4       	brne	.+12     	; 0x28dc <radio_task+0xee>
    28d0:	67 e6       	ldi	r22, 0x67	; 103
    28d2:	77 e2       	ldi	r23, 0x27	; 39
    28d4:	87 e4       	ldi	r24, 0x47	; 71
    28d6:	98 e2       	ldi	r25, 0x28	; 40
    28d8:	e0 d9       	rcall	.-3136   	; 0x1c9a <VCP_DMA_transmit>
    28da:	14 c0       	rjmp	.+40     	; 0x2904 <radio_task+0x116>
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	8a 30       	cpi	r24, 0x0A	; 10
    28e0:	89 f4       	brne	.+34     	; 0x2904 <radio_task+0x116>
    28e2:	82 eb       	ldi	r24, 0xB2	; 178
    28e4:	98 e2       	ldi	r25, 0x28	; 40
    28e6:	80 93 38 25 	sts	0x2538, r24
    28ea:	90 93 39 25 	sts	0x2539, r25
    28ee:	8e ec       	ldi	r24, 0xCE	; 206
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	80 93 41 25 	sts	0x2541, r24
    28f6:	90 93 42 25 	sts	0x2542, r25
    28fa:	67 e6       	ldi	r22, 0x67	; 103
    28fc:	77 e2       	ldi	r23, 0x27	; 39
    28fe:	85 ee       	ldi	r24, 0xE5	; 229
    2900:	94 e2       	ldi	r25, 0x24	; 36
    2902:	cb d9       	rcall	.-3178   	; 0x1c9a <VCP_DMA_transmit>
    2904:	0f 90       	pop	r0
    2906:	df 91       	pop	r29
    2908:	cf 91       	pop	r28
    290a:	08 95       	ret

0000290c <tcap_task>:
 * Synopsis     : void tcap_task	(void)
 *
 * Description  : TCAP Task
 * 
 */
void tcap_task	(void){}
    290c:	cf 93       	push	r28
    290e:	df 93       	push	r29
    2910:	cd b7       	in	r28, 0x3d	; 61
    2912:	de b7       	in	r29, 0x3e	; 62
    2914:	df 91       	pop	r29
    2916:	cf 91       	pop	r28
    2918:	08 95       	ret

0000291a <append_crc16>:
 * append_crc16
 *
 * Adds a byte of data into the crc calculation.
 */
void append_crc16(uint8 character, uint16ptr crc)
{
    291a:	cf 93       	push	r28
    291c:	df 93       	push	r29
    291e:	00 d0       	rcall	.+0      	; 0x2920 <append_crc16+0x6>
    2920:	1f 92       	push	r1
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
    2926:	8a 83       	std	Y+2, r24	; 0x02
    2928:	6b 83       	std	Y+3, r22	; 0x03
    292a:	7c 83       	std	Y+4, r23	; 0x04
	uint8 j;
	for (j = 0; j < 8; j++)
    292c:	19 82       	std	Y+1, r1	; 0x01
    292e:	32 c0       	rjmp	.+100    	; 0x2994 <append_crc16+0x7a>
	{
		//*crc = (*crc >> 1) ^ (((character ^ *crc) & 0x01) ? 0x8408 : 0);
		//character >>= 1;

		if ((character ^ *crc) & 0x01) {
    2930:	8a 81       	ldd	r24, Y+2	; 0x02
    2932:	28 2f       	mov	r18, r24
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	9c 81       	ldd	r25, Y+4	; 0x04
    293a:	fc 01       	movw	r30, r24
    293c:	80 81       	ld	r24, Z
    293e:	91 81       	ldd	r25, Z+1	; 0x01
    2940:	82 27       	eor	r24, r18
    2942:	93 27       	eor	r25, r19
    2944:	81 70       	andi	r24, 0x01	; 1
    2946:	99 27       	eor	r25, r25
    2948:	00 97       	sbiw	r24, 0x00	; 0
    294a:	89 f0       	breq	.+34     	; 0x296e <append_crc16+0x54>
                *crc = (*crc >> 1) ^ 0x8408;
    294c:	8b 81       	ldd	r24, Y+3	; 0x03
    294e:	9c 81       	ldd	r25, Y+4	; 0x04
    2950:	fc 01       	movw	r30, r24
    2952:	80 81       	ld	r24, Z
    2954:	91 81       	ldd	r25, Z+1	; 0x01
    2956:	96 95       	lsr	r25
    2958:	87 95       	ror	r24
    295a:	28 e0       	ldi	r18, 0x08	; 8
    295c:	34 e8       	ldi	r19, 0x84	; 132
    295e:	28 27       	eor	r18, r24
    2960:	39 27       	eor	r19, r25
    2962:	8b 81       	ldd	r24, Y+3	; 0x03
    2964:	9c 81       	ldd	r25, Y+4	; 0x04
    2966:	fc 01       	movw	r30, r24
    2968:	20 83       	st	Z, r18
    296a:	31 83       	std	Z+1, r19	; 0x01
    296c:	0d c0       	rjmp	.+26     	; 0x2988 <append_crc16+0x6e>
		}
        else {
            *crc = *crc >> 1;
    296e:	8b 81       	ldd	r24, Y+3	; 0x03
    2970:	9c 81       	ldd	r25, Y+4	; 0x04
    2972:	fc 01       	movw	r30, r24
    2974:	80 81       	ld	r24, Z
    2976:	91 81       	ldd	r25, Z+1	; 0x01
    2978:	9c 01       	movw	r18, r24
    297a:	36 95       	lsr	r19
    297c:	27 95       	ror	r18
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	9c 81       	ldd	r25, Y+4	; 0x04
    2982:	fc 01       	movw	r30, r24
    2984:	20 83       	st	Z, r18
    2986:	31 83       	std	Z+1, r19	; 0x01
		}

        character >>= 1;
    2988:	8a 81       	ldd	r24, Y+2	; 0x02
    298a:	86 95       	lsr	r24
    298c:	8a 83       	std	Y+2, r24	; 0x02
 * Adds a byte of data into the crc calculation.
 */
void append_crc16(uint8 character, uint16ptr crc)
{
	uint8 j;
	for (j = 0; j < 8; j++)
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	8f 5f       	subi	r24, 0xFF	; 255
    2992:	89 83       	std	Y+1, r24	; 0x01
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	88 30       	cpi	r24, 0x08	; 8
    2998:	58 f2       	brcs	.-106    	; 0x2930 <append_crc16+0x16>
            *crc = *crc >> 1;
		}

        character >>= 1;
	}
}
    299a:	24 96       	adiw	r28, 0x04	; 4
    299c:	cd bf       	out	0x3d, r28	; 61
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	08 95       	ret

000029a6 <vcpptr_init>:
 * Description  : This function initializes a VCP ptrbuffer to be used.
 *				  Must call before calling Receive_VCP_byte().
 * 
 */
void vcpptr_init(vcp_ptrbuffer *buff, uint8 *message_buffer, uint16 message_buffer_size)
{
    29a6:	cf 93       	push	r28
    29a8:	df 93       	push	r29
    29aa:	00 d0       	rcall	.+0      	; 0x29ac <vcpptr_init+0x6>
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <vcpptr_init+0x8>
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	89 83       	std	Y+1, r24	; 0x01
    29b4:	9a 83       	std	Y+2, r25	; 0x02
    29b6:	6b 83       	std	Y+3, r22	; 0x03
    29b8:	7c 83       	std	Y+4, r23	; 0x04
    29ba:	4d 83       	std	Y+5, r20	; 0x05
    29bc:	5e 83       	std	Y+6, r21	; 0x06
	buff->address =	0;
    29be:	89 81       	ldd	r24, Y+1	; 0x01
    29c0:	9a 81       	ldd	r25, Y+2	; 0x02
    29c2:	fc 01       	movw	r30, r24
    29c4:	10 82       	st	Z, r1
	buff->message =	message_buffer;
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ca:	2b 81       	ldd	r18, Y+3	; 0x03
    29cc:	3c 81       	ldd	r19, Y+4	; 0x04
    29ce:	fc 01       	movw	r30, r24
    29d0:	21 83       	std	Z+1, r18	; 0x01
    29d2:	32 83       	std	Z+2, r19	; 0x02
	buff->size =	message_buffer_size;
    29d4:	89 81       	ldd	r24, Y+1	; 0x01
    29d6:	9a 81       	ldd	r25, Y+2	; 0x02
    29d8:	2d 81       	ldd	r18, Y+5	; 0x05
    29da:	3e 81       	ldd	r19, Y+6	; 0x06
    29dc:	fc 01       	movw	r30, r24
    29de:	25 83       	std	Z+5, r18	; 0x05
    29e0:	36 83       	std	Z+6, r19	; 0x06
	buff->index	=	0;
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	9a 81       	ldd	r25, Y+2	; 0x02
    29e6:	fc 01       	movw	r30, r24
    29e8:	17 82       	std	Z+7, r1	; 0x07
    29ea:	10 86       	std	Z+8, r1	; 0x08
	buff->crc =		CRC16_INIT_VALUE;
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	9a 81       	ldd	r25, Y+2	; 0x02
    29f0:	fc 01       	movw	r30, r24
    29f2:	13 82       	std	Z+3, r1	; 0x03
    29f4:	14 82       	std	Z+4, r1	; 0x04
	buff->status =	VCP_IDLE;
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
    29f8:	9a 81       	ldd	r25, Y+2	; 0x02
    29fa:	fc 01       	movw	r30, r24
    29fc:	11 86       	std	Z+9, r1	; 0x09
}
    29fe:	26 96       	adiw	r28, 0x06	; 6
    2a00:	cd bf       	out	0x3d, r28	; 61
    2a02:	de bf       	out	0x3e, r29	; 62
    2a04:	df 91       	pop	r29
    2a06:	cf 91       	pop	r28
    2a08:	08 95       	ret

00002a0a <Create_VCP_frame>:
 *				  including VCP address, CRC calculation and KISS escaping
 * 
 * \return				VCP status flags
 */
uint8_t Create_VCP_frame(uint8ptr dst, uint16ptr dst_size, uint8 addr, uint8ptr src, uint16 src_size)
{
    2a0a:	0f 93       	push	r16
    2a0c:	1f 93       	push	r17
    2a0e:	cf 93       	push	r28
    2a10:	df 93       	push	r29
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
    2a16:	61 97       	sbiw	r28, 0x11	; 17
    2a18:	cd bf       	out	0x3d, r28	; 61
    2a1a:	de bf       	out	0x3e, r29	; 62
    2a1c:	89 87       	std	Y+9, r24	; 0x09
    2a1e:	9a 87       	std	Y+10, r25	; 0x0a
    2a20:	6b 87       	std	Y+11, r22	; 0x0b
    2a22:	7c 87       	std	Y+12, r23	; 0x0c
    2a24:	4d 87       	std	Y+13, r20	; 0x0d
    2a26:	2e 87       	std	Y+14, r18	; 0x0e
    2a28:	3f 87       	std	Y+15, r19	; 0x0f
    2a2a:	08 8b       	std	Y+16, r16	; 0x10
    2a2c:	19 8b       	std	Y+17, r17	; 0x11
	uint16_t crc = CRC16_INIT_VALUE;
    2a2e:	1f 82       	std	Y+7, r1	; 0x07
    2a30:	18 86       	std	Y+8, r1	; 0x08
	uint16_t src_index = 0;
    2a32:	19 82       	std	Y+1, r1	; 0x01
    2a34:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t dst_index = 0;
    2a36:	1b 82       	std	Y+3, r1	; 0x03
    2a38:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t payload_size;
	
	// Check for invalid buffers
	if (dst == NULL || src == NULL)
    2a3a:	89 85       	ldd	r24, Y+9	; 0x09
    2a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3e:	00 97       	sbiw	r24, 0x00	; 0
    2a40:	21 f0       	breq	.+8      	; 0x2a4a <Create_VCP_frame+0x40>
    2a42:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a44:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a46:	00 97       	sbiw	r24, 0x00	; 0
    2a48:	11 f4       	brne	.+4      	; 0x2a4e <Create_VCP_frame+0x44>
		return VCP_NULL_ERR;
    2a4a:	85 e0       	ldi	r24, 0x05	; 5
    2a4c:	01 c1       	rjmp	.+514    	; 0x2c50 <Create_VCP_frame+0x246>
	// Check for invalid VCP address	
	if (addr > VCP_FC && addr != VCP_SUN_SENSOR)
    2a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a50:	8c 30       	cpi	r24, 0x0C	; 12
    2a52:	28 f0       	brcs	.+10     	; 0x2a5e <Create_VCP_frame+0x54>
    2a54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a56:	88 33       	cpi	r24, 0x38	; 56
    2a58:	11 f0       	breq	.+4      	; 0x2a5e <Create_VCP_frame+0x54>
		return VCP_ADDR_ERR;		
    2a5a:	86 e0       	ldi	r24, 0x06	; 6
    2a5c:	f9 c0       	rjmp	.+498    	; 0x2c50 <Create_VCP_frame+0x246>
		
	// Calculate CRC:
	append_crc16(addr, (uint16ptr)&crc);
    2a5e:	ce 01       	movw	r24, r28
    2a60:	07 96       	adiw	r24, 0x07	; 7
    2a62:	bc 01       	movw	r22, r24
    2a64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a66:	59 df       	rcall	.-334    	; 0x291a <append_crc16>
	for (src_index = 0; src_index < src_size; src_index++)
    2a68:	19 82       	std	Y+1, r1	; 0x01
    2a6a:	1a 82       	std	Y+2, r1	; 0x02
    2a6c:	12 c0       	rjmp	.+36     	; 0x2a92 <Create_VCP_frame+0x88>
	{
		append_crc16(src[src_index], (uint16ptr)&crc);
    2a6e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2a70:	3f 85       	ldd	r19, Y+15	; 0x0f
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	9a 81       	ldd	r25, Y+2	; 0x02
    2a76:	82 0f       	add	r24, r18
    2a78:	93 1f       	adc	r25, r19
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	20 81       	ld	r18, Z
    2a7e:	ce 01       	movw	r24, r28
    2a80:	07 96       	adiw	r24, 0x07	; 7
    2a82:	bc 01       	movw	r22, r24
    2a84:	82 2f       	mov	r24, r18
    2a86:	49 df       	rcall	.-366    	; 0x291a <append_crc16>
	if (addr > VCP_FC && addr != VCP_SUN_SENSOR)
		return VCP_ADDR_ERR;		
		
	// Calculate CRC:
	append_crc16(addr, (uint16ptr)&crc);
	for (src_index = 0; src_index < src_size; src_index++)
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8c:	01 96       	adiw	r24, 0x01	; 1
    2a8e:	89 83       	std	Y+1, r24	; 0x01
    2a90:	9a 83       	std	Y+2, r25	; 0x02
    2a92:	29 81       	ldd	r18, Y+1	; 0x01
    2a94:	3a 81       	ldd	r19, Y+2	; 0x02
    2a96:	88 89       	ldd	r24, Y+16	; 0x10
    2a98:	99 89       	ldd	r25, Y+17	; 0x11
    2a9a:	28 17       	cp	r18, r24
    2a9c:	39 07       	cpc	r19, r25
    2a9e:	38 f3       	brcs	.-50     	; 0x2a6e <Create_VCP_frame+0x64>
	{
		append_crc16(src[src_index], (uint16ptr)&crc);
	}
	
	// Add CRC to the end of the source buffer
	src[src_index++] = ((crc >> 8) & 0xFF);
    2aa0:	2e 85       	ldd	r18, Y+14	; 0x0e
    2aa2:	3f 85       	ldd	r19, Y+15	; 0x0f
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa8:	82 0f       	add	r24, r18
    2aaa:	93 1f       	adc	r25, r19
    2aac:	2f 81       	ldd	r18, Y+7	; 0x07
    2aae:	38 85       	ldd	r19, Y+8	; 0x08
    2ab0:	23 2f       	mov	r18, r19
    2ab2:	33 27       	eor	r19, r19
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	20 83       	st	Z, r18
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	9a 81       	ldd	r25, Y+2	; 0x02
    2abc:	01 96       	adiw	r24, 0x01	; 1
    2abe:	89 83       	std	Y+1, r24	; 0x01
    2ac0:	9a 83       	std	Y+2, r25	; 0x02
	src[src_index++] = (crc & 0xFF);
    2ac2:	2e 85       	ldd	r18, Y+14	; 0x0e
    2ac4:	3f 85       	ldd	r19, Y+15	; 0x0f
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aca:	82 0f       	add	r24, r18
    2acc:	93 1f       	adc	r25, r19
    2ace:	2f 81       	ldd	r18, Y+7	; 0x07
    2ad0:	38 85       	ldd	r19, Y+8	; 0x08
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	20 83       	st	Z, r18
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    2ada:	01 96       	adiw	r24, 0x01	; 1
    2adc:	89 83       	std	Y+1, r24	; 0x01
    2ade:	9a 83       	std	Y+2, r25	; 0x02
	
	// Size including the 2 CRC bytes
	payload_size = src_index;
    2ae0:	89 81       	ldd	r24, Y+1	; 0x01
    2ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae4:	8d 83       	std	Y+5, r24	; 0x05
    2ae6:	9e 83       	std	Y+6, r25	; 0x06
	
	
	// Build KISS Frame:
	
	// Start the frame with FEND
	dst[dst_index++] =					FEND;
    2ae8:	29 85       	ldd	r18, Y+9	; 0x09
    2aea:	3a 85       	ldd	r19, Y+10	; 0x0a
    2aec:	8b 81       	ldd	r24, Y+3	; 0x03
    2aee:	9c 81       	ldd	r25, Y+4	; 0x04
    2af0:	82 0f       	add	r24, r18
    2af2:	93 1f       	adc	r25, r19
    2af4:	20 ec       	ldi	r18, 0xC0	; 192
    2af6:	fc 01       	movw	r30, r24
    2af8:	20 83       	st	Z, r18
    2afa:	8b 81       	ldd	r24, Y+3	; 0x03
    2afc:	9c 81       	ldd	r25, Y+4	; 0x04
    2afe:	01 96       	adiw	r24, 0x01	; 1
    2b00:	8b 83       	std	Y+3, r24	; 0x03
    2b02:	9c 83       	std	Y+4, r25	; 0x04
	// then insert VCP address
	dst[dst_index++] =					addr;
    2b04:	29 85       	ldd	r18, Y+9	; 0x09
    2b06:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b08:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0c:	82 0f       	add	r24, r18
    2b0e:	93 1f       	adc	r25, r19
    2b10:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b12:	fc 01       	movw	r30, r24
    2b14:	20 83       	st	Z, r18
    2b16:	8b 81       	ldd	r24, Y+3	; 0x03
    2b18:	9c 81       	ldd	r25, Y+4	; 0x04
    2b1a:	01 96       	adiw	r24, 0x01	; 1
    2b1c:	8b 83       	std	Y+3, r24	; 0x03
    2b1e:	9c 83       	std	Y+4, r25	; 0x04
	
	// Copy src to dst and Escape when necessary
	for (src_index = 0; src_index < payload_size; src_index++ )
    2b20:	19 82       	std	Y+1, r1	; 0x01
    2b22:	1a 82       	std	Y+2, r1	; 0x02
    2b24:	77 c0       	rjmp	.+238    	; 0x2c14 <Create_VCP_frame+0x20a>
	{
		if (src[src_index] == FEND)
    2b26:	2e 85       	ldd	r18, Y+14	; 0x0e
    2b28:	3f 85       	ldd	r19, Y+15	; 0x0f
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2e:	82 0f       	add	r24, r18
    2b30:	93 1f       	adc	r25, r19
    2b32:	fc 01       	movw	r30, r24
    2b34:	80 81       	ld	r24, Z
    2b36:	80 3c       	cpi	r24, 0xC0	; 192
    2b38:	e9 f4       	brne	.+58     	; 0x2b74 <Create_VCP_frame+0x16a>
		{
			dst[dst_index++] =			FESC;
    2b3a:	29 85       	ldd	r18, Y+9	; 0x09
    2b3c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b40:	9c 81       	ldd	r25, Y+4	; 0x04
    2b42:	82 0f       	add	r24, r18
    2b44:	93 1f       	adc	r25, r19
    2b46:	2b ed       	ldi	r18, 0xDB	; 219
    2b48:	fc 01       	movw	r30, r24
    2b4a:	20 83       	st	Z, r18
    2b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b50:	01 96       	adiw	r24, 0x01	; 1
    2b52:	8b 83       	std	Y+3, r24	; 0x03
    2b54:	9c 83       	std	Y+4, r25	; 0x04
			dst[dst_index++] =			TFEND;
    2b56:	29 85       	ldd	r18, Y+9	; 0x09
    2b58:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5e:	82 0f       	add	r24, r18
    2b60:	93 1f       	adc	r25, r19
    2b62:	2c ed       	ldi	r18, 0xDC	; 220
    2b64:	fc 01       	movw	r30, r24
    2b66:	20 83       	st	Z, r18
    2b68:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6c:	01 96       	adiw	r24, 0x01	; 1
    2b6e:	8b 83       	std	Y+3, r24	; 0x03
    2b70:	9c 83       	std	Y+4, r25	; 0x04
    2b72:	3c c0       	rjmp	.+120    	; 0x2bec <Create_VCP_frame+0x1e2>
		}
		else if (src[src_index] == FESC)
    2b74:	2e 85       	ldd	r18, Y+14	; 0x0e
    2b76:	3f 85       	ldd	r19, Y+15	; 0x0f
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7c:	82 0f       	add	r24, r18
    2b7e:	93 1f       	adc	r25, r19
    2b80:	fc 01       	movw	r30, r24
    2b82:	80 81       	ld	r24, Z
    2b84:	8b 3d       	cpi	r24, 0xDB	; 219
    2b86:	e9 f4       	brne	.+58     	; 0x2bc2 <Create_VCP_frame+0x1b8>
		{
			dst[dst_index++] =			FESC;
    2b88:	29 85       	ldd	r18, Y+9	; 0x09
    2b8a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b90:	82 0f       	add	r24, r18
    2b92:	93 1f       	adc	r25, r19
    2b94:	2b ed       	ldi	r18, 0xDB	; 219
    2b96:	fc 01       	movw	r30, r24
    2b98:	20 83       	st	Z, r18
    2b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9e:	01 96       	adiw	r24, 0x01	; 1
    2ba0:	8b 83       	std	Y+3, r24	; 0x03
    2ba2:	9c 83       	std	Y+4, r25	; 0x04
			dst[dst_index++] =			TFESC;
    2ba4:	29 85       	ldd	r18, Y+9	; 0x09
    2ba6:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    2baa:	9c 81       	ldd	r25, Y+4	; 0x04
    2bac:	82 0f       	add	r24, r18
    2bae:	93 1f       	adc	r25, r19
    2bb0:	2d ed       	ldi	r18, 0xDD	; 221
    2bb2:	fc 01       	movw	r30, r24
    2bb4:	20 83       	st	Z, r18
    2bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bba:	01 96       	adiw	r24, 0x01	; 1
    2bbc:	8b 83       	std	Y+3, r24	; 0x03
    2bbe:	9c 83       	std	Y+4, r25	; 0x04
    2bc0:	15 c0       	rjmp	.+42     	; 0x2bec <Create_VCP_frame+0x1e2>
		}
		else
		{
			dst[dst_index++] =			src[src_index];
    2bc2:	29 85       	ldd	r18, Y+9	; 0x09
    2bc4:	3a 85       	ldd	r19, Y+10	; 0x0a
    2bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bca:	82 0f       	add	r24, r18
    2bcc:	93 1f       	adc	r25, r19
    2bce:	4e 85       	ldd	r20, Y+14	; 0x0e
    2bd0:	5f 85       	ldd	r21, Y+15	; 0x0f
    2bd2:	29 81       	ldd	r18, Y+1	; 0x01
    2bd4:	3a 81       	ldd	r19, Y+2	; 0x02
    2bd6:	24 0f       	add	r18, r20
    2bd8:	35 1f       	adc	r19, r21
    2bda:	f9 01       	movw	r30, r18
    2bdc:	20 81       	ld	r18, Z
    2bde:	fc 01       	movw	r30, r24
    2be0:	20 83       	st	Z, r18
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	9c 81       	ldd	r25, Y+4	; 0x04
    2be6:	01 96       	adiw	r24, 0x01	; 1
    2be8:	8b 83       	std	Y+3, r24	; 0x03
    2bea:	9c 83       	std	Y+4, r25	; 0x04
		}
		
		// Check if the frame fits in the dst buffer 
		if (dst_index >= *dst_size - 1)
    2bec:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bee:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	80 81       	ld	r24, Z
    2bf4:	91 81       	ldd	r25, Z+1	; 0x01
    2bf6:	9c 01       	movw	r18, r24
    2bf8:	21 50       	subi	r18, 0x01	; 1
    2bfa:	31 09       	sbc	r19, r1
    2bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2c00:	82 17       	cp	r24, r18
    2c02:	93 07       	cpc	r25, r19
    2c04:	10 f0       	brcs	.+4      	; 0x2c0a <Create_VCP_frame+0x200>
			return VCP_OVR_ERR;
    2c06:	83 e0       	ldi	r24, 0x03	; 3
    2c08:	23 c0       	rjmp	.+70     	; 0x2c50 <Create_VCP_frame+0x246>
	dst[dst_index++] =					FEND;
	// then insert VCP address
	dst[dst_index++] =					addr;
	
	// Copy src to dst and Escape when necessary
	for (src_index = 0; src_index < payload_size; src_index++ )
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
    2c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0e:	01 96       	adiw	r24, 0x01	; 1
    2c10:	89 83       	std	Y+1, r24	; 0x01
    2c12:	9a 83       	std	Y+2, r25	; 0x02
    2c14:	29 81       	ldd	r18, Y+1	; 0x01
    2c16:	3a 81       	ldd	r19, Y+2	; 0x02
    2c18:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1c:	28 17       	cp	r18, r24
    2c1e:	39 07       	cpc	r19, r25
    2c20:	08 f4       	brcc	.+2      	; 0x2c24 <Create_VCP_frame+0x21a>
    2c22:	81 cf       	rjmp	.-254    	; 0x2b26 <Create_VCP_frame+0x11c>
		if (dst_index >= *dst_size - 1)
			return VCP_OVR_ERR;
	}
	
	// End the frame with FEND
	dst[dst_index++] =					FEND;
    2c24:	29 85       	ldd	r18, Y+9	; 0x09
    2c26:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c28:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2c:	82 0f       	add	r24, r18
    2c2e:	93 1f       	adc	r25, r19
    2c30:	20 ec       	ldi	r18, 0xC0	; 192
    2c32:	fc 01       	movw	r30, r24
    2c34:	20 83       	st	Z, r18
    2c36:	8b 81       	ldd	r24, Y+3	; 0x03
    2c38:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3a:	01 96       	adiw	r24, 0x01	; 1
    2c3c:	8b 83       	std	Y+3, r24	; 0x03
    2c3e:	9c 83       	std	Y+4, r25	; 0x04
	
	// Save the frame size
	*dst_size = dst_index;
    2c40:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c42:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c44:	2b 81       	ldd	r18, Y+3	; 0x03
    2c46:	3c 81       	ldd	r19, Y+4	; 0x04
    2c48:	fc 01       	movw	r30, r24
    2c4a:	20 83       	st	Z, r18
    2c4c:	31 83       	std	Z+1, r19	; 0x01
	
	// All good
	return VCP_TERM;
    2c4e:	81 e0       	ldi	r24, 0x01	; 1

}
    2c50:	61 96       	adiw	r28, 0x11	; 17
    2c52:	cd bf       	out	0x3d, r28	; 61
    2c54:	de bf       	out	0x3e, r29	; 62
    2c56:	df 91       	pop	r29
    2c58:	cf 91       	pop	r28
    2c5a:	1f 91       	pop	r17
    2c5c:	0f 91       	pop	r16
    2c5e:	08 95       	ret

00002c60 <Receive_VCP_byte>:
 *				  removing KISS escaping, checking CRC when the frame is done.
 * 
 * \return			VCP status flags
 */
uint8_t Receive_VCP_byte(vcp_ptrbuffer *buff, uint8 byte)
{
    2c60:	cf 93       	push	r28
    2c62:	df 93       	push	r29
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
    2c68:	27 97       	sbiw	r28, 0x07	; 7
    2c6a:	cd bf       	out	0x3d, r28	; 61
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	8d 83       	std	Y+5, r24	; 0x05
    2c70:	9e 83       	std	Y+6, r25	; 0x06
    2c72:	6f 83       	std	Y+7, r22	; 0x07
	
	uint16_t payload_index;
	uint16_t message_crc;
	
	// Check for invalid buffer
	if (buff->message == NULL)
    2c74:	8d 81       	ldd	r24, Y+5	; 0x05
    2c76:	9e 81       	ldd	r25, Y+6	; 0x06
    2c78:	fc 01       	movw	r30, r24
    2c7a:	81 81       	ldd	r24, Z+1	; 0x01
    2c7c:	92 81       	ldd	r25, Z+2	; 0x02
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	11 f4       	brne	.+4      	; 0x2c86 <Receive_VCP_byte+0x26>
		return VCP_NULL_ERR;
    2c82:	85 e0       	ldi	r24, 0x05	; 5
    2c84:	30 c1       	rjmp	.+608    	; 0x2ee6 <Receive_VCP_byte+0x286>
	
	// Check if the buffer will overflow
	if (buff->index >= buff->size-1)
    2c86:	8d 81       	ldd	r24, Y+5	; 0x05
    2c88:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	27 81       	ldd	r18, Z+7	; 0x07
    2c8e:	30 85       	ldd	r19, Z+8	; 0x08
    2c90:	8d 81       	ldd	r24, Y+5	; 0x05
    2c92:	9e 81       	ldd	r25, Y+6	; 0x06
    2c94:	fc 01       	movw	r30, r24
    2c96:	85 81       	ldd	r24, Z+5	; 0x05
    2c98:	96 81       	ldd	r25, Z+6	; 0x06
    2c9a:	01 97       	sbiw	r24, 0x01	; 1
    2c9c:	28 17       	cp	r18, r24
    2c9e:	39 07       	cpc	r19, r25
    2ca0:	10 f0       	brcs	.+4      	; 0x2ca6 <Receive_VCP_byte+0x46>
		return VCP_OVR_ERR;
    2ca2:	83 e0       	ldi	r24, 0x03	; 3
    2ca4:	20 c1       	rjmp	.+576    	; 0x2ee6 <Receive_VCP_byte+0x286>
	
	// State Machine
	switch (buff->status)
    2ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    2caa:	fc 01       	movw	r30, r24
    2cac:	81 85       	ldd	r24, Z+9	; 0x09
    2cae:	88 2f       	mov	r24, r24
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	82 30       	cpi	r24, 0x02	; 2
    2cb4:	91 05       	cpc	r25, r1
    2cb6:	09 f4       	brne	.+2      	; 0x2cba <Receive_VCP_byte+0x5a>
    2cb8:	61 c0       	rjmp	.+194    	; 0x2d7c <Receive_VCP_byte+0x11c>
    2cba:	83 30       	cpi	r24, 0x03	; 3
    2cbc:	91 05       	cpc	r25, r1
    2cbe:	1c f4       	brge	.+6      	; 0x2cc6 <Receive_VCP_byte+0x66>
    2cc0:	00 97       	sbiw	r24, 0x00	; 0
    2cc2:	41 f0       	breq	.+16     	; 0x2cd4 <Receive_VCP_byte+0x74>
    2cc4:	9d c0       	rjmp	.+314    	; 0x2e00 <Receive_VCP_byte+0x1a0>
    2cc6:	80 31       	cpi	r24, 0x10	; 16
    2cc8:	91 05       	cpc	r25, r1
    2cca:	71 f0       	breq	.+28     	; 0x2ce8 <Receive_VCP_byte+0x88>
    2ccc:	80 32       	cpi	r24, 0x20	; 32
    2cce:	91 05       	cpc	r25, r1
    2cd0:	f1 f0       	breq	.+60     	; 0x2d0e <Receive_VCP_byte+0xae>
    2cd2:	96 c0       	rjmp	.+300    	; 0x2e00 <Receive_VCP_byte+0x1a0>
	{
		case VCP_IDLE:										
			if (byte == FEND)
    2cd4:	8f 81       	ldd	r24, Y+7	; 0x07
    2cd6:	80 3c       	cpi	r24, 0xC0	; 192
    2cd8:	09 f0       	breq	.+2      	; 0x2cdc <Receive_VCP_byte+0x7c>
    2cda:	97 c0       	rjmp	.+302    	; 0x2e0a <Receive_VCP_byte+0x1aa>
				buff->status = VCP_ADDRESS;	
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	20 e1       	ldi	r18, 0x10	; 16
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	21 87       	std	Z+9, r18	; 0x09
			break;
    2ce6:	91 c0       	rjmp	.+290    	; 0x2e0a <Receive_VCP_byte+0x1aa>
		case VCP_ADDRESS:
			// Check for invalid VCP address
			if (byte > VCP_FC && byte != VCP_SUN_SENSOR)
    2ce8:	8f 81       	ldd	r24, Y+7	; 0x07
    2cea:	8c 30       	cpi	r24, 0x0C	; 12
    2cec:	28 f0       	brcs	.+10     	; 0x2cf8 <Receive_VCP_byte+0x98>
    2cee:	8f 81       	ldd	r24, Y+7	; 0x07
    2cf0:	88 33       	cpi	r24, 0x38	; 56
    2cf2:	11 f0       	breq	.+4      	; 0x2cf8 <Receive_VCP_byte+0x98>
				return VCP_ADDR_ERR;
    2cf4:	86 e0       	ldi	r24, 0x06	; 6
    2cf6:	f7 c0       	rjmp	.+494    	; 0x2ee6 <Receive_VCP_byte+0x286>
			else
			{
				buff->address = byte;
    2cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfc:	2f 81       	ldd	r18, Y+7	; 0x07
    2cfe:	fc 01       	movw	r30, r24
    2d00:	20 83       	st	Z, r18
				buff->status = VCP_RECEIVING;
    2d02:	8d 81       	ldd	r24, Y+5	; 0x05
    2d04:	9e 81       	ldd	r25, Y+6	; 0x06
    2d06:	20 e2       	ldi	r18, 0x20	; 32
    2d08:	fc 01       	movw	r30, r24
    2d0a:	21 87       	std	Z+9, r18	; 0x09
			}	
			break;
    2d0c:	7f c0       	rjmp	.+254    	; 0x2e0c <Receive_VCP_byte+0x1ac>
		case VCP_RECEIVING:
			if (byte == FEND)
    2d0e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d10:	80 3c       	cpi	r24, 0xC0	; 192
    2d12:	99 f4       	brne	.+38     	; 0x2d3a <Receive_VCP_byte+0xda>
			{
				if (buff->index > 0)
    2d14:	8d 81       	ldd	r24, Y+5	; 0x05
    2d16:	9e 81       	ldd	r25, Y+6	; 0x06
    2d18:	fc 01       	movw	r30, r24
    2d1a:	87 81       	ldd	r24, Z+7	; 0x07
    2d1c:	90 85       	ldd	r25, Z+8	; 0x08
    2d1e:	00 97       	sbiw	r24, 0x00	; 0
    2d20:	31 f0       	breq	.+12     	; 0x2d2e <Receive_VCP_byte+0xce>
					// Done
					buff->status = VCP_TERM;
    2d22:	8d 81       	ldd	r24, Y+5	; 0x05
    2d24:	9e 81       	ldd	r25, Y+6	; 0x06
    2d26:	21 e0       	ldi	r18, 0x01	; 1
    2d28:	fc 01       	movw	r30, r24
    2d2a:	21 87       	std	Z+9, r18	; 0x09
				buff->status = VCP_ESC;
			else
			{
				buff->message[(buff->index)++] = byte;	
			}						
			break;
    2d2c:	6f c0       	rjmp	.+222    	; 0x2e0c <Receive_VCP_byte+0x1ac>
				if (buff->index > 0)
					// Done
					buff->status = VCP_TERM;
				else
					// No data between FENDs - assume lost sync and start over
					buff->status = VCP_ADDRESS;
    2d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d30:	9e 81       	ldd	r25, Y+6	; 0x06
    2d32:	20 e1       	ldi	r18, 0x10	; 16
    2d34:	fc 01       	movw	r30, r24
    2d36:	21 87       	std	Z+9, r18	; 0x09
				buff->status = VCP_ESC;
			else
			{
				buff->message[(buff->index)++] = byte;	
			}						
			break;
    2d38:	69 c0       	rjmp	.+210    	; 0x2e0c <Receive_VCP_byte+0x1ac>
					buff->status = VCP_TERM;
				else
					// No data between FENDs - assume lost sync and start over
					buff->status = VCP_ADDRESS;
			}
			else if (byte == FESC)
    2d3a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d3c:	8b 3d       	cpi	r24, 0xDB	; 219
    2d3e:	31 f4       	brne	.+12     	; 0x2d4c <Receive_VCP_byte+0xec>
				buff->status = VCP_ESC;
    2d40:	8d 81       	ldd	r24, Y+5	; 0x05
    2d42:	9e 81       	ldd	r25, Y+6	; 0x06
    2d44:	22 e0       	ldi	r18, 0x02	; 2
    2d46:	fc 01       	movw	r30, r24
    2d48:	21 87       	std	Z+9, r18	; 0x09
			else
			{
				buff->message[(buff->index)++] = byte;	
			}						
			break;
    2d4a:	60 c0       	rjmp	.+192    	; 0x2e0c <Receive_VCP_byte+0x1ac>
			}
			else if (byte == FESC)
				buff->status = VCP_ESC;
			else
			{
				buff->message[(buff->index)++] = byte;	
    2d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d50:	fc 01       	movw	r30, r24
    2d52:	21 81       	ldd	r18, Z+1	; 0x01
    2d54:	32 81       	ldd	r19, Z+2	; 0x02
    2d56:	8d 81       	ldd	r24, Y+5	; 0x05
    2d58:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	87 81       	ldd	r24, Z+7	; 0x07
    2d5e:	90 85       	ldd	r25, Z+8	; 0x08
    2d60:	28 0f       	add	r18, r24
    2d62:	39 1f       	adc	r19, r25
    2d64:	4f 81       	ldd	r20, Y+7	; 0x07
    2d66:	f9 01       	movw	r30, r18
    2d68:	40 83       	st	Z, r20
    2d6a:	9c 01       	movw	r18, r24
    2d6c:	2f 5f       	subi	r18, 0xFF	; 255
    2d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d70:	8d 81       	ldd	r24, Y+5	; 0x05
    2d72:	9e 81       	ldd	r25, Y+6	; 0x06
    2d74:	fc 01       	movw	r30, r24
    2d76:	27 83       	std	Z+7, r18	; 0x07
    2d78:	30 87       	std	Z+8, r19	; 0x08
			}						
			break;
    2d7a:	48 c0       	rjmp	.+144    	; 0x2e0c <Receive_VCP_byte+0x1ac>
		case VCP_ESC:
			if (byte == TFEND)
    2d7c:	8f 81       	ldd	r24, Y+7	; 0x07
    2d7e:	8c 3d       	cpi	r24, 0xDC	; 220
    2d80:	e9 f4       	brne	.+58     	; 0x2dbc <Receive_VCP_byte+0x15c>
			{
				buff->message[(buff->index)++] = FEND;
    2d82:	8d 81       	ldd	r24, Y+5	; 0x05
    2d84:	9e 81       	ldd	r25, Y+6	; 0x06
    2d86:	fc 01       	movw	r30, r24
    2d88:	21 81       	ldd	r18, Z+1	; 0x01
    2d8a:	32 81       	ldd	r19, Z+2	; 0x02
    2d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d90:	fc 01       	movw	r30, r24
    2d92:	87 81       	ldd	r24, Z+7	; 0x07
    2d94:	90 85       	ldd	r25, Z+8	; 0x08
    2d96:	28 0f       	add	r18, r24
    2d98:	39 1f       	adc	r19, r25
    2d9a:	40 ec       	ldi	r20, 0xC0	; 192
    2d9c:	f9 01       	movw	r30, r18
    2d9e:	40 83       	st	Z, r20
    2da0:	9c 01       	movw	r18, r24
    2da2:	2f 5f       	subi	r18, 0xFF	; 255
    2da4:	3f 4f       	sbci	r19, 0xFF	; 255
    2da6:	8d 81       	ldd	r24, Y+5	; 0x05
    2da8:	9e 81       	ldd	r25, Y+6	; 0x06
    2daa:	fc 01       	movw	r30, r24
    2dac:	27 83       	std	Z+7, r18	; 0x07
    2dae:	30 87       	std	Z+8, r19	; 0x08
				buff->status = VCP_RECEIVING;
    2db0:	8d 81       	ldd	r24, Y+5	; 0x05
    2db2:	9e 81       	ldd	r25, Y+6	; 0x06
    2db4:	20 e2       	ldi	r18, 0x20	; 32
    2db6:	fc 01       	movw	r30, r24
    2db8:	21 87       	std	Z+9, r18	; 0x09
				buff->message[(buff->index)++] = FESC;
				buff->status = VCP_RECEIVING;
			}
			else
				return VCP_ESC_ERR;	
			break;
    2dba:	28 c0       	rjmp	.+80     	; 0x2e0c <Receive_VCP_byte+0x1ac>
			if (byte == TFEND)
			{
				buff->message[(buff->index)++] = FEND;
				buff->status = VCP_RECEIVING;
			}
			else if (byte == TFESC)
    2dbc:	8f 81       	ldd	r24, Y+7	; 0x07
    2dbe:	8d 3d       	cpi	r24, 0xDD	; 221
    2dc0:	e9 f4       	brne	.+58     	; 0x2dfc <Receive_VCP_byte+0x19c>
			{
				buff->message[(buff->index)++] = FESC;
    2dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc6:	fc 01       	movw	r30, r24
    2dc8:	21 81       	ldd	r18, Z+1	; 0x01
    2dca:	32 81       	ldd	r19, Z+2	; 0x02
    2dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dce:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	87 81       	ldd	r24, Z+7	; 0x07
    2dd4:	90 85       	ldd	r25, Z+8	; 0x08
    2dd6:	28 0f       	add	r18, r24
    2dd8:	39 1f       	adc	r19, r25
    2dda:	4b ed       	ldi	r20, 0xDB	; 219
    2ddc:	f9 01       	movw	r30, r18
    2dde:	40 83       	st	Z, r20
    2de0:	9c 01       	movw	r18, r24
    2de2:	2f 5f       	subi	r18, 0xFF	; 255
    2de4:	3f 4f       	sbci	r19, 0xFF	; 255
    2de6:	8d 81       	ldd	r24, Y+5	; 0x05
    2de8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dea:	fc 01       	movw	r30, r24
    2dec:	27 83       	std	Z+7, r18	; 0x07
    2dee:	30 87       	std	Z+8, r19	; 0x08
				buff->status = VCP_RECEIVING;
    2df0:	8d 81       	ldd	r24, Y+5	; 0x05
    2df2:	9e 81       	ldd	r25, Y+6	; 0x06
    2df4:	20 e2       	ldi	r18, 0x20	; 32
    2df6:	fc 01       	movw	r30, r24
    2df8:	21 87       	std	Z+9, r18	; 0x09
			}
			else
				return VCP_ESC_ERR;	
			break;
    2dfa:	08 c0       	rjmp	.+16     	; 0x2e0c <Receive_VCP_byte+0x1ac>
			{
				buff->message[(buff->index)++] = FESC;
				buff->status = VCP_RECEIVING;
			}
			else
				return VCP_ESC_ERR;	
    2dfc:	87 e0       	ldi	r24, 0x07	; 7
    2dfe:	73 c0       	rjmp	.+230    	; 0x2ee6 <Receive_VCP_byte+0x286>
			break;
		default:
			buff->status = VCP_IDLE;
    2e00:	8d 81       	ldd	r24, Y+5	; 0x05
    2e02:	9e 81       	ldd	r25, Y+6	; 0x06
    2e04:	fc 01       	movw	r30, r24
    2e06:	11 86       	std	Z+9, r1	; 0x09
			break; 
    2e08:	01 c0       	rjmp	.+2      	; 0x2e0c <Receive_VCP_byte+0x1ac>
	switch (buff->status)
	{
		case VCP_IDLE:										
			if (byte == FEND)
				buff->status = VCP_ADDRESS;	
			break;
    2e0a:	00 00       	nop
			buff->status = VCP_IDLE;
			break; 
	}
	
	// End of frame
	if (buff->status == VCP_TERM)
    2e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e10:	fc 01       	movw	r30, r24
    2e12:	81 85       	ldd	r24, Z+9	; 0x09
    2e14:	81 30       	cpi	r24, 0x01	; 1
    2e16:	09 f0       	breq	.+2      	; 0x2e1a <Receive_VCP_byte+0x1ba>
    2e18:	62 c0       	rjmp	.+196    	; 0x2ede <Receive_VCP_byte+0x27e>
	{
		// Message CRC is last 2 bytes 
		message_crc = (buff->message[buff->index-2] << 8 ) + buff->message[buff->index-1];
    2e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1e:	fc 01       	movw	r30, r24
    2e20:	21 81       	ldd	r18, Z+1	; 0x01
    2e22:	32 81       	ldd	r19, Z+2	; 0x02
    2e24:	8d 81       	ldd	r24, Y+5	; 0x05
    2e26:	9e 81       	ldd	r25, Y+6	; 0x06
    2e28:	fc 01       	movw	r30, r24
    2e2a:	87 81       	ldd	r24, Z+7	; 0x07
    2e2c:	90 85       	ldd	r25, Z+8	; 0x08
    2e2e:	02 97       	sbiw	r24, 0x02	; 2
    2e30:	82 0f       	add	r24, r18
    2e32:	93 1f       	adc	r25, r19
    2e34:	fc 01       	movw	r30, r24
    2e36:	80 81       	ld	r24, Z
    2e38:	88 2f       	mov	r24, r24
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	38 2f       	mov	r19, r24
    2e3e:	22 27       	eor	r18, r18
    2e40:	8d 81       	ldd	r24, Y+5	; 0x05
    2e42:	9e 81       	ldd	r25, Y+6	; 0x06
    2e44:	fc 01       	movw	r30, r24
    2e46:	41 81       	ldd	r20, Z+1	; 0x01
    2e48:	52 81       	ldd	r21, Z+2	; 0x02
    2e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4e:	fc 01       	movw	r30, r24
    2e50:	87 81       	ldd	r24, Z+7	; 0x07
    2e52:	90 85       	ldd	r25, Z+8	; 0x08
    2e54:	01 97       	sbiw	r24, 0x01	; 1
    2e56:	84 0f       	add	r24, r20
    2e58:	95 1f       	adc	r25, r21
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	80 81       	ld	r24, Z
    2e5e:	88 2f       	mov	r24, r24
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	82 0f       	add	r24, r18
    2e64:	93 1f       	adc	r25, r19
    2e66:	8b 83       	std	Y+3, r24	; 0x03
    2e68:	9c 83       	std	Y+4, r25	; 0x04
		// Remove CRC bytes from the message
		buff->index -= 2;
    2e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6e:	fc 01       	movw	r30, r24
    2e70:	87 81       	ldd	r24, Z+7	; 0x07
    2e72:	90 85       	ldd	r25, Z+8	; 0x08
    2e74:	9c 01       	movw	r18, r24
    2e76:	22 50       	subi	r18, 0x02	; 2
    2e78:	31 09       	sbc	r19, r1
    2e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e7e:	fc 01       	movw	r30, r24
    2e80:	27 83       	std	Z+7, r18	; 0x07
    2e82:	30 87       	std	Z+8, r19	; 0x08
		// Calculate CRC on received message (including address)
		append_crc16(buff->address, &(buff->crc));
    2e84:	8d 81       	ldd	r24, Y+5	; 0x05
    2e86:	9e 81       	ldd	r25, Y+6	; 0x06
    2e88:	03 96       	adiw	r24, 0x03	; 3
    2e8a:	2d 81       	ldd	r18, Y+5	; 0x05
    2e8c:	3e 81       	ldd	r19, Y+6	; 0x06
    2e8e:	f9 01       	movw	r30, r18
    2e90:	20 81       	ld	r18, Z
    2e92:	bc 01       	movw	r22, r24
    2e94:	82 2f       	mov	r24, r18
    2e96:	41 dd       	rcall	.-1406   	; 0x291a <append_crc16>
		for (payload_index = 0; payload_index < buff->index; payload_index++)
    2e98:	19 82       	std	Y+1, r1	; 0x01
    2e9a:	1a 82       	std	Y+2, r1	; 0x02
    2e9c:	16 c0       	rjmp	.+44     	; 0x2eca <Receive_VCP_byte+0x26a>
		{
			append_crc16(buff->message[payload_index], &buff->crc);
    2e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea2:	03 96       	adiw	r24, 0x03	; 3
    2ea4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ea6:	3e 81       	ldd	r19, Y+6	; 0x06
    2ea8:	f9 01       	movw	r30, r18
    2eaa:	41 81       	ldd	r20, Z+1	; 0x01
    2eac:	52 81       	ldd	r21, Z+2	; 0x02
    2eae:	29 81       	ldd	r18, Y+1	; 0x01
    2eb0:	3a 81       	ldd	r19, Y+2	; 0x02
    2eb2:	24 0f       	add	r18, r20
    2eb4:	35 1f       	adc	r19, r21
    2eb6:	f9 01       	movw	r30, r18
    2eb8:	20 81       	ld	r18, Z
    2eba:	bc 01       	movw	r22, r24
    2ebc:	82 2f       	mov	r24, r18
    2ebe:	2d dd       	rcall	.-1446   	; 0x291a <append_crc16>
		message_crc = (buff->message[buff->index-2] << 8 ) + buff->message[buff->index-1];
		// Remove CRC bytes from the message
		buff->index -= 2;
		// Calculate CRC on received message (including address)
		append_crc16(buff->address, &(buff->crc));
		for (payload_index = 0; payload_index < buff->index; payload_index++)
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
    2ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec4:	01 96       	adiw	r24, 0x01	; 1
    2ec6:	89 83       	std	Y+1, r24	; 0x01
    2ec8:	9a 83       	std	Y+2, r25	; 0x02
    2eca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ece:	fc 01       	movw	r30, r24
    2ed0:	27 81       	ldd	r18, Z+7	; 0x07
    2ed2:	30 85       	ldd	r19, Z+8	; 0x08
    2ed4:	89 81       	ldd	r24, Y+1	; 0x01
    2ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed8:	82 17       	cp	r24, r18
    2eda:	93 07       	cpc	r25, r19
    2edc:	00 f3       	brcs	.-64     	; 0x2e9e <Receive_VCP_byte+0x23e>
		// Check Calculated CRC against Received CRC
//		if (buff->crc != message_crc)
//			return VCP_CRC_ERR;
	}

	return buff->status;
    2ede:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee2:	fc 01       	movw	r30, r24
    2ee4:	81 85       	ldd	r24, Z+9	; 0x09
    2ee6:	27 96       	adiw	r28, 0x07	; 7
    2ee8:	cd bf       	out	0x3d, r28	; 61
    2eea:	de bf       	out	0x3e, r29	; 62
    2eec:	df 91       	pop	r29
    2eee:	cf 91       	pop	r28
    2ef0:	08 95       	ret

00002ef2 <__udivmodsi4>:
    2ef2:	a1 e2       	ldi	r26, 0x21	; 33
    2ef4:	1a 2e       	mov	r1, r26
    2ef6:	aa 1b       	sub	r26, r26
    2ef8:	bb 1b       	sub	r27, r27
    2efa:	fd 01       	movw	r30, r26
    2efc:	0d c0       	rjmp	.+26     	; 0x2f18 <__udivmodsi4_ep>

00002efe <__udivmodsi4_loop>:
    2efe:	aa 1f       	adc	r26, r26
    2f00:	bb 1f       	adc	r27, r27
    2f02:	ee 1f       	adc	r30, r30
    2f04:	ff 1f       	adc	r31, r31
    2f06:	a2 17       	cp	r26, r18
    2f08:	b3 07       	cpc	r27, r19
    2f0a:	e4 07       	cpc	r30, r20
    2f0c:	f5 07       	cpc	r31, r21
    2f0e:	20 f0       	brcs	.+8      	; 0x2f18 <__udivmodsi4_ep>
    2f10:	a2 1b       	sub	r26, r18
    2f12:	b3 0b       	sbc	r27, r19
    2f14:	e4 0b       	sbc	r30, r20
    2f16:	f5 0b       	sbc	r31, r21

00002f18 <__udivmodsi4_ep>:
    2f18:	66 1f       	adc	r22, r22
    2f1a:	77 1f       	adc	r23, r23
    2f1c:	88 1f       	adc	r24, r24
    2f1e:	99 1f       	adc	r25, r25
    2f20:	1a 94       	dec	r1
    2f22:	69 f7       	brne	.-38     	; 0x2efe <__udivmodsi4_loop>
    2f24:	60 95       	com	r22
    2f26:	70 95       	com	r23
    2f28:	80 95       	com	r24
    2f2a:	90 95       	com	r25
    2f2c:	9b 01       	movw	r18, r22
    2f2e:	ac 01       	movw	r20, r24
    2f30:	bd 01       	movw	r22, r26
    2f32:	cf 01       	movw	r24, r30
    2f34:	08 95       	ret

00002f36 <memcpy>:
    2f36:	fb 01       	movw	r30, r22
    2f38:	dc 01       	movw	r26, r24
    2f3a:	02 c0       	rjmp	.+4      	; 0x2f40 <memcpy+0xa>
    2f3c:	01 90       	ld	r0, Z+
    2f3e:	0d 92       	st	X+, r0
    2f40:	41 50       	subi	r20, 0x01	; 1
    2f42:	50 40       	sbci	r21, 0x00	; 0
    2f44:	d8 f7       	brcc	.-10     	; 0x2f3c <memcpy+0x6>
    2f46:	08 95       	ret

00002f48 <_exit>:
    2f48:	f8 94       	cli

00002f4a <__stop_program>:
    2f4a:	ff cf       	rjmp	.-2      	; 0x2f4a <__stop_program>
